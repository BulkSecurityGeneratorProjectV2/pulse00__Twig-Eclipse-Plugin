/* The following code was generated by JFlex 1.2.2 on 6/13/11 8:24 PM */

/*******************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/*nlsXXX*/
package org.eclipse.twig.core.documentModel.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.php.internal.core.PHPVersion;
import org.eclipse.php.internal.core.documentModel.parser.regions.PhpScriptRegion;
import org.eclipse.php.internal.core.documentModel.parser.PHPRegionContext;
import org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer;
import org.eclipse.php.internal.core.documentModel.parser.PhpLexerFactory;
import org.eclipse.php.internal.core.project.ProjectOptions;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import org.eclipse.twig.core.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;



/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 6/13/11 8:24 PM from the specification file
 * <tt>file:/Volumes/Data/Symfony2Eclipse/workspace/twig/org.eclipse.twig.core/Resources/parserTools/TwigTokenizer.jflex</tt>
 */
public class TwigTokenizer implements BlockTokenizer, PHPRegionContext, DOMRegionContext, TwigRegionContext {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_BLOCK_TAG_SCAN = 30;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 33;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 19;
  final public static int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 32;
  final public static int ST_XML_ATTRIBUTE_NAME = 17;
  final public static int ST_TWIG_DOUBLE_QUOTES = 36;
  final public static int ST_XML_EQUALS = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  final public static int ST_XML_ELEMENT_DECLARATION = 26;
  final public static int ST_XML_DECLARATION_CLOSE = 21;
  final public static int ST_TWIG_CONTENT = 35;
  final public static int ST_XML_DOCTYPE_DECLARATION = 22;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  final public static int ST_XML_ATTLIST_DECLARATION = 28;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_PHP_CONTENT = 31;
  final public static int ST_ABORT_EMBEDDED = 15;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_TWIG_DOUBLE_QUOTES_SPECIAL = 37;
  final public static int ST_BLOCK_TAG_INTERNAL_SCAN = 34;
  final public static int ST_PI = 5;
  final public static int ST_XML_DECLARATION = 20;
  final public static int ST_XML_TAG_NAME = 16;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\24\2\0\1\15\22\0\1\15\1\23\1\12\1\64"+
    "\1\113\1\20\1\13\1\14\1\22\1\22\1\62\1\17\1\17\1\7"+
    "\1\6\1\3\12\16\1\11\1\71\1\1\1\44\1\2\1\4\1\17"+
    "\1\30\1\73\1\26\1\27\1\50\1\67\1\35\1\101\1\55\1\35"+
    "\1\35\1\57\1\60\1\61\1\45\1\47\1\35\1\66\1\65\1\31"+
    "\1\70\2\35\1\56\1\46\1\35\1\25\1\115\1\21\1\112\1\10"+
    "\1\116\1\52\1\106\1\74\1\53\1\36\1\72\1\35\1\100\1\41"+
    "\1\35\1\107\1\34\1\33\1\43\1\42\1\77\1\35\1\37\1\40"+
    "\1\51\1\110\1\35\1\111\1\32\1\54\1\35\1\102\1\63\1\114"+
    "\1\112\70\103\1\105\10\103\27\104\1\103\37\104\1\103\10\104\62\75"+
    "\2\0\13\75\2\0\10\75\1\0\65\75\1\0\104\75\11\0\44\75"+
    "\3\0\2\75\4\0\36\75\70\0\131\75\22\0\7\75\16\0\2\76"+
    "\56\0\106\76\32\0\2\76\44\0\1\75\1\76\3\75\1\0\1\75"+
    "\1\0\24\75\1\0\54\75\1\0\7\75\3\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\1\75\1\0\22\75\15\0\14\75\1\0\102\75"+
    "\1\0\14\75\1\0\44\75\1\0\4\76\11\0\65\75\2\0\2\75"+
    "\2\0\2\75\3\0\34\75\2\0\10\75\2\0\2\75\67\0\46\75"+
    "\2\0\1\75\7\0\46\75\12\0\21\76\1\0\27\76\1\0\3\76"+
    "\1\0\1\76\1\0\2\76\1\0\1\76\13\0\33\75\5\0\3\75"+
    "\56\0\32\75\5\0\1\76\12\75\10\76\15\0\12\76\6\0\1\76"+
    "\107\75\2\0\5\75\1\0\17\75\1\0\4\75\1\0\1\75\17\76"+
    "\2\75\2\76\1\0\4\76\2\0\12\76\u0207\0\3\76\1\0\65\75"+
    "\2\0\1\76\1\75\20\76\3\0\4\76\3\0\12\75\2\76\2\0"+
    "\12\76\21\0\3\76\1\0\10\75\2\0\2\75\2\0\26\75\1\0"+
    "\7\75\1\0\1\75\3\0\4\75\2\0\1\76\1\0\7\76\2\0"+
    "\2\76\2\0\3\76\11\0\1\76\4\0\2\75\1\0\3\75\2\76"+
    "\2\0\12\76\2\75\20\0\1\76\2\0\6\75\4\0\2\75\2\0"+
    "\26\75\1\0\7\75\1\0\2\75\1\0\2\75\1\0\2\75\2\0"+
    "\1\76\1\0\5\76\4\0\2\76\2\0\3\76\13\0\4\75\1\0"+
    "\1\75\7\0\12\76\2\76\3\75\14\0\3\76\1\0\7\75\1\0"+
    "\1\75\1\0\3\75\1\0\26\75\1\0\7\75\1\0\2\75\1\0"+
    "\5\75\2\0\1\76\1\75\10\76\1\0\3\76\1\0\3\76\22\0"+
    "\1\75\5\0\12\76\21\0\3\76\1\0\10\75\2\0\2\75\2\0"+
    "\26\75\1\0\7\75\1\0\2\75\2\0\4\75\2\0\1\76\1\75"+
    "\6\76\3\0\2\76\2\0\3\76\10\0\2\76\4\0\2\75\1\0"+
    "\3\75\4\0\12\76\22\0\2\76\1\0\6\75\3\0\3\75\1\0"+
    "\4\75\3\0\2\75\1\0\1\75\1\0\2\75\3\0\2\75\3\0"+
    "\3\75\3\0\10\75\1\0\3\75\4\0\5\76\3\0\3\76\1\0"+
    "\4\76\11\0\1\76\17\0\11\76\21\0\3\76\1\0\10\75\1\0"+
    "\3\75\1\0\27\75\1\0\12\75\1\0\5\75\4\0\7\76\1\0"+
    "\3\76\1\0\4\76\7\0\2\76\11\0\2\75\4\0\12\76\22\0"+
    "\2\76\1\0\10\75\1\0\3\75\1\0\27\75\1\0\12\75\1\0"+
    "\5\75\4\0\7\76\1\0\3\76\1\0\4\76\7\0\2\76\7\0"+
    "\1\75\1\0\2\75\4\0\12\76\22\0\2\76\1\0\10\75\1\0"+
    "\3\75\1\0\27\75\1\0\20\75\4\0\6\76\2\0\3\76\1\0"+
    "\4\76\11\0\1\76\10\0\2\75\4\0\12\76\221\0\56\75\1\0"+
    "\1\75\1\76\2\75\7\76\5\0\6\75\1\76\10\76\1\0\12\76"+
    "\47\0\2\75\1\0\1\75\2\0\2\75\1\0\1\75\2\0\1\75"+
    "\6\0\4\75\1\0\7\75\1\0\3\75\1\0\1\75\1\0\1\75"+
    "\2\0\2\75\1\0\2\75\1\0\1\75\1\76\2\75\6\76\1\0"+
    "\2\76\1\75\2\0\5\75\1\0\1\76\1\0\6\76\2\0\12\76"+
    "\76\0\2\76\6\0\12\76\13\0\1\76\1\0\1\76\1\0\1\76"+
    "\4\0\2\76\10\75\1\0\41\75\7\0\24\76\1\0\6\76\4\0"+
    "\6\76\1\0\1\76\1\0\25\76\3\0\7\76\1\0\1\76\346\0"+
    "\46\75\12\0\47\75\11\0\1\75\1\0\2\75\1\0\3\75\1\0"+
    "\1\75\1\0\2\75\1\0\5\75\51\0\1\75\1\0\1\75\1\0"+
    "\1\75\13\0\1\75\1\0\1\75\1\0\1\75\3\0\2\75\3\0"+
    "\1\75\5\0\3\75\1\0\1\75\1\0\1\75\1\0\1\75\1\0"+
    "\1\75\3\0\2\75\3\0\2\75\1\0\1\75\50\0\1\75\11\0"+
    "\1\75\2\0\1\75\2\0\2\75\7\0\2\75\1\0\1\75\1\0"+
    "\7\75\50\0\1\75\4\0\1\75\10\0\1\75\u0c06\0\234\75\4\0"+
    "\132\75\6\0\26\75\2\0\6\75\2\0\46\75\2\0\6\75\2\0"+
    "\10\75\1\0\1\75\1\0\1\75\1\0\1\75\1\0\37\75\2\0"+
    "\65\75\1\0\7\75\1\0\1\75\3\0\3\75\1\0\7\75\3\0"+
    "\4\75\2\0\6\75\4\0\15\75\5\0\3\75\1\0\7\75\323\0"+
    "\15\76\4\0\1\76\104\0\1\75\3\0\2\75\2\0\1\75\121\0"+
    "\3\75\u0e82\0\1\76\1\0\1\75\31\0\11\75\6\76\1\0\5\76"+
    "\13\0\124\75\4\0\2\76\2\0\2\76\2\0\132\75\1\0\3\76"+
    "\6\0\50\75\u1cd3\0\u51a6\75\u0c5a\0\u2ba4\75\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    79,   158,   237,   316,   395,   474,   553,   632,   711, 
      790,   869,   948,  1027,  1106,  1185,  1264,  1343,  1422,  1501, 
     1580,  1659,  1738,  1817,  1896,  1975,  2054,  2133,  2212,  2291, 
     2370,  2449,  2528,  2607,  2686,  2765,  2844,  2923,  3002,  3081, 
     3160,  3239,  3318,  3397,  3476,  3555,  3476,  3555,  3634,  3476, 
     3476,  3555,  3713,  3792,  3871,  3950,  4029,  4108,  4187,  4266, 
     4345,  4424,  3476,  3555,  4503,  4582,  4661,  3476,  4740,  4740, 
     4819,  4898,  4977,  4503,  3476,  5056,  5135,  3476,  5214,  5293, 
     5372,  5451,  5530,  3476,  5609,  5688,  5767,  5846,  5925,  6004, 
     6083,  3476,  6162,  6241,  6320,  6399,  6478,  6557,  3476,  6636, 
     6715,  6794,  6873,  6952,  7031,  7110,  7189,  7189,  7268,  7347, 
     7426,  7505,  7505,  7584,  7663,  7742,  7821,  7821,  7900,  7979, 
     8058,  8137,  3476,  8216,  8216,  8295,  8374,  8453,  8532,  3476, 
     3476,  3555,  3476,  3555,  8611,  8690,  8769,  8848,  3476,  8927, 
     9006,  9085,  3476,  9164,  3713,  3713,  3476,  3555,  3476,  9243, 
     9322,  3476,  9401,  9480,  9559,  9638,  9717,  9796,  9875,  9954, 
    10033, 10112, 10191, 10270, 10349, 10428, 10507, 10586, 10665, 10744, 
    10823,  3476, 10902,  3476, 10981,  3476,  3476, 11060,  3476, 11139, 
    11218, 11297, 11376, 11455, 11534, 11613, 11692, 11771,  3713, 11850, 
     3476, 11929, 12008, 12087, 12166,  3476,  3476,  4740,  4898,  3476, 
     4977,  5056,  5214,  5293, 12245,  5372,  3476, 12324,  5451,  3476, 
    12403,  6162, 12482,  6399,  3476,  6478, 11139, 12561, 12640, 12719, 
     6873,  3476, 12798, 12877,  7189, 12956,  7268,  3476, 13035, 13114, 
    13193, 13193, 13272, 13351,  7426,  7189,  7505, 13430,  7584,  3476, 
    13509,  7663,  7742,  7505,  7821, 13588,  7900,  3476, 13667, 13746, 
    13825, 13825, 13904, 13983, 14062,  8058, 14141,  8216, 14220,  8295, 
     3476, 14299, 14378, 14457, 14457, 14536, 14615, 14694,  8453, 14773, 
     3476,  8927,  3476,  9164,  9401,  3476, 14852,  3476, 14931, 15010, 
    15089, 15168, 15247, 15326, 15405,  9322, 15484, 10191,  3476, 15563, 
    15642, 15721, 15800, 15879,  3476, 15958, 10744, 16037, 16116, 16195, 
    16274, 16353, 16432, 16511, 16590, 16669,  3476, 16748, 16827,  3476, 
     3476,  3476, 16906,  4029, 16985,  4029, 17064, 17143, 17222, 17301, 
    17380, 13035, 17459, 17459, 13667, 17538, 17538, 17617, 17696, 14299, 
    17775, 17775, 17854, 17933, 18012, 18091, 18170, 18249, 18328, 18407, 
    18486, 18565, 18644, 18723, 18802, 18881, 18960,  3476, 19039, 19118, 
    19197,  3476, 19276, 19355, 19434, 19513, 19592, 19671, 19750, 19829, 
    13272, 13904, 19908, 19987, 14536, 20066, 20145, 20224, 20303, 20382, 
    20461, 20540, 20619, 20698, 20777, 20856, 20935, 21014, 21093, 21172, 
    21251, 21330, 21409, 21488, 21567, 21646, 21725, 21804, 21883, 21962, 
    22041, 22120, 22199, 22278, 22357, 22436, 22515, 22594, 22673,  3476, 
     3476, 22752, 22831, 22910,  4029, 22989, 23068, 23147,  3476,  3476, 
    23226, 23305, 23384, 23463, 23542, 23621, 23700,  3476,  3476,  3476, 
    23779, 23858, 23937, 24016, 24095, 24174, 24253, 24332, 24411, 24490, 
     3476, 24569,  8058,  8453, 10744, 24648, 24727, 24806, 24885,  4029
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\47\1\50\3\47\1\51\5\47\1\52\1\47\1\51"+
    "\2\47\1\53\3\47\1\51\55\47\1\54\14\47\1\55"+
    "\1\56\115\55\1\57\1\60\17\57\1\61\2\57\1\62"+
    "\72\57\1\63\1\64\3\63\1\65\7\63\1\65\6\63"+
    "\1\65\72\63\1\57\1\60\5\57\1\66\14\57\1\62"+
    "\73\57\1\60\2\57\1\67\1\70\2\57\2\71\3\57"+
    "\1\70\6\57\1\70\1\57\4\71\1\72\6\71\1\73"+
    "\2\71\1\57\2\71\1\74\5\71\1\73\1\75\3\71"+
    "\3\57\4\71\1\57\4\71\1\57\1\74\2\71\2\57"+
    "\1\71\1\57\4\71\6\57\1\60\2\57\1\67\1\76"+
    "\7\57\1\76\6\57\1\76\72\57\1\77\1\100\2\77"+
    "\1\101\17\77\1\62\72\77\1\57\1\60\2\57\1\102"+
    "\1\70\2\57\2\103\3\57\1\70\6\57\1\70\1\57"+
    "\16\103\1\57\15\103\3\57\4\103\1\57\4\103\1\57"+
    "\3\103\2\57\1\103\1\57\4\103\6\57\1\60\2\57"+
    "\1\102\1\70\2\57\2\103\3\57\1\70\6\57\1\70"+
    "\1\57\16\103\1\104\15\103\3\57\4\103\1\57\4\103"+
    "\1\57\3\103\2\57\1\103\1\57\4\103\5\57\1\105"+
    "\1\60\1\57\1\106\1\107\1\70\4\105\1\110\1\105"+
    "\1\111\1\70\6\105\1\70\72\105\1\57\1\60\2\57"+
    "\1\112\17\57\1\62\73\57\1\60\1\113\1\114\4\57"+
    "\2\115\12\57\1\62\1\57\16\115\1\57\15\115\3\57"+
    "\4\115\1\57\4\115\1\57\3\115\2\57\1\115\1\57"+
    "\4\115\6\57\1\60\1\113\1\114\4\57\2\115\12\57"+
    "\1\62\1\57\16\115\1\116\15\115\3\57\4\115\1\57"+
    "\4\115\1\57\3\115\2\57\1\115\1\57\4\115\5\57"+
    "\1\117\1\60\1\113\1\120\1\117\1\57\4\117\1\121"+
    "\1\117\1\122\1\57\6\117\1\62\72\117\1\57\1\60"+
    "\22\57\1\62\72\57\1\123\1\50\1\124\1\125\1\123"+
    "\1\126\2\123\2\127\3\123\1\126\6\123\1\126\1\123"+
    "\16\130\1\123\15\130\3\123\4\130\1\123\4\130\1\123"+
    "\3\130\2\123\1\130\1\123\4\130\5\123\1\57\1\131"+
    "\1\124\1\125\1\57\1\132\2\57\2\133\3\57\1\132"+
    "\6\57\1\132\1\57\16\133\1\57\15\133\3\57\4\133"+
    "\1\57\4\133\1\57\3\133\2\57\1\133\1\57\4\133"+
    "\6\57\1\131\1\124\1\125\1\57\1\132\2\57\2\133"+
    "\3\57\1\132\6\57\1\132\1\57\16\133\1\134\15\133"+
    "\3\57\4\133\1\57\4\133\1\57\3\133\2\57\1\133"+
    "\1\57\4\133\5\57\1\135\1\136\1\124\1\137\1\135"+
    "\1\132\4\135\1\140\1\135\1\141\1\132\6\135\1\132"+
    "\72\135\1\57\1\142\1\143\2\57\1\132\7\57\1\132"+
    "\6\57\1\132\2\57\1\144\1\145\5\57\1\146\11\57"+
    "\1\146\1\57\1\145\1\144\44\57\1\60\1\143\2\57"+
    "\1\132\7\57\1\132\6\57\1\132\1\147\72\57\1\60"+
    "\1\143\2\57\1\132\2\57\2\150\3\57\1\132\6\57"+
    "\1\132\1\147\16\150\1\57\15\150\3\57\4\150\1\57"+
    "\4\150\1\57\3\150\2\57\1\150\1\57\4\150\6\57"+
    "\1\60\1\143\2\57\1\132\7\57\1\132\6\57\1\132"+
    "\1\147\12\57\1\151\6\57\1\152\15\57\1\151\11\57"+
    "\1\152\17\57\1\153\1\60\1\143\1\154\1\153\1\132"+
    "\4\153\1\155\1\153\1\156\1\132\6\153\1\132\1\157"+
    "\71\153\1\160\1\60\1\143\1\161\1\160\1\132\4\160"+
    "\1\162\1\160\1\163\1\132\6\160\1\132\1\164\71\160"+
    "\1\165\1\60\1\143\1\166\1\165\1\132\4\165\1\167"+
    "\1\165\1\170\1\132\6\165\1\132\72\165\1\171\1\172"+
    "\1\173\114\171\1\174\1\60\1\143\1\175\1\174\1\132"+
    "\4\174\1\176\1\174\1\177\1\132\6\174\1\132\72\174"+
    "\1\200\1\201\1\202\114\200\1\203\1\204\115\203\1\205"+
    "\1\206\2\205\1\207\13\205\1\207\76\205\1\210\1\211"+
    "\3\210\1\212\6\210\1\213\1\212\6\210\1\212\37\210"+
    "\1\214\26\210\1\214\3\210\1\215\1\211\3\215\1\216"+
    "\4\215\1\217\2\215\1\216\6\215\1\216\37\215\1\220"+
    "\26\215\1\220\3\215\1\57\1\60\3\57\1\221\7\57"+
    "\1\221\6\57\1\222\72\57\1\223\1\224\3\225\1\226"+
    "\2\225\1\227\1\225\1\230\1\225\1\231\1\226\1\232"+
    "\1\225\1\233\3\225\1\226\1\225\5\227\1\234\2\227"+
    "\1\235\1\236\1\237\1\240\1\227\1\241\1\225\5\227"+
    "\1\242\7\227\1\243\1\225\1\223\4\227\1\223\1\244"+
    "\2\227\2\223\3\227\1\223\3\227\1\245\1\227\1\246"+
    "\1\247\1\225\1\250\1\251\2\223\1\252\1\253\10\252"+
    "\1\254\100\252\1\255\2\252\1\256\1\57\1\60\1\225"+
    "\3\57\2\225\1\227\5\57\1\232\3\57\1\225\1\57"+
    "\1\62\1\57\16\227\1\57\15\227\3\57\4\227\1\57"+
    "\3\227\2\57\3\227\1\57\7\227\1\57\1\257\2\57"+
    "\1\260\1\47\1\0\11\47\1\0\4\47\1\0\76\47"+
    "\3\0\1\261\1\262\13\0\1\263\2\0\1\264\73\0"+
    "\1\47\1\265\3\47\1\51\5\47\1\0\1\47\1\51"+
    "\2\47\1\0\3\47\1\51\55\47\1\54\14\47\5\0"+
    "\1\266\2\0\2\267\3\0\1\266\6\0\1\266\1\0"+
    "\16\267\1\0\15\267\2\0\1\270\4\267\1\0\4\267"+
    "\1\0\3\267\2\0\1\267\1\0\4\267\12\0\1\266"+
    "\2\0\2\271\3\0\1\266\6\0\1\266\1\0\16\271"+
    "\1\0\15\271\3\0\4\271\1\0\4\271\1\0\3\271"+
    "\2\0\1\271\1\0\4\271\5\0\1\47\1\0\11\47"+
    "\1\0\4\47\1\272\76\47\123\0\1\262\13\0\1\263"+
    "\2\0\1\273\114\0\1\274\76\0\1\265\3\0\1\275"+
    "\7\0\1\275\6\0\1\275\101\0\1\276\111\0\1\277"+
    "\121\0\1\70\7\0\1\70\6\0\1\70\100\0\4\71"+
    "\4\0\1\71\7\0\16\71\1\0\15\71\3\0\4\71"+
    "\1\0\10\71\2\0\6\71\13\0\4\71\4\0\1\71"+
    "\7\0\5\71\1\300\10\71\1\0\13\71\1\301\1\71"+
    "\3\0\4\71\1\0\10\71\2\0\6\71\13\0\4\71"+
    "\4\0\1\71\7\0\5\71\1\302\10\71\1\0\13\71"+
    "\1\302\1\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\13\0\4\71\4\0\1\71\7\0\16\71\1\0\15\71"+
    "\3\0\4\71\1\0\6\71\2\303\2\0\6\71\13\0"+
    "\4\71\4\0\1\71\7\0\5\71\1\301\10\71\1\0"+
    "\13\71\1\301\1\71\3\0\4\71\1\0\10\71\2\0"+
    "\6\71\12\0\1\76\7\0\1\76\6\0\1\76\74\0"+
    "\1\304\116\0\1\305\122\0\4\103\4\0\1\103\7\0"+
    "\16\103\1\0\15\103\3\0\4\103\1\0\10\103\2\0"+
    "\6\103\5\0\1\105\2\0\1\306\1\105\1\0\4\105"+
    "\1\0\1\105\2\0\6\105\1\0\73\105\1\0\1\305"+
    "\1\306\1\105\1\0\4\105\1\0\1\105\2\0\6\105"+
    "\1\0\72\105\1\307\1\0\10\307\1\310\104\307\1\311"+
    "\1\0\12\311\1\310\102\311\2\0\1\113\1\312\121\0"+
    "\4\115\4\0\1\115\7\0\16\115\1\0\15\115\3\0"+
    "\4\115\1\0\10\115\2\0\6\115\5\0\1\117\2\0"+
    "\1\313\1\117\1\0\4\117\1\0\1\117\2\0\6\117"+
    "\1\0\73\117\1\0\1\113\1\314\1\117\1\0\4\117"+
    "\1\0\1\117\2\0\6\117\1\0\72\117\1\121\1\0"+
    "\1\315\1\316\1\121\1\315\4\121\1\317\1\121\2\315"+
    "\6\121\1\315\72\121\1\122\1\0\1\320\1\321\1\122"+
    "\1\320\4\122\1\320\1\122\1\317\1\320\6\122\1\320"+
    "\72\122\1\123\3\0\22\123\16\0\1\123\15\0\3\123"+
    "\4\0\1\123\4\0\1\123\3\0\2\123\1\0\1\123"+
    "\4\0\5\123\2\0\1\322\114\0\1\123\1\265\2\0"+
    "\1\123\1\126\7\123\1\126\6\123\1\126\1\123\16\0"+
    "\1\123\15\0\3\123\4\0\1\123\4\0\1\123\3\0"+
    "\2\123\1\0\1\123\4\0\6\123\3\0\2\123\4\127"+
    "\4\123\1\127\7\123\16\130\1\123\15\130\3\123\4\130"+
    "\1\123\4\130\1\127\3\130\2\123\1\130\1\127\4\130"+
    "\5\123\6\0\4\130\4\0\1\130\7\0\16\130\1\0"+
    "\15\130\3\0\4\130\1\0\10\130\2\0\6\130\10\0"+
    "\1\261\1\262\3\0\2\323\6\0\1\263\2\0\1\264"+
    "\2\0\16\323\1\0\15\323\3\0\4\323\1\0\4\323"+
    "\1\0\3\323\2\0\1\323\1\0\4\323\6\0\1\265"+
    "\3\0\1\132\7\0\1\132\6\0\1\132\100\0\4\133"+
    "\4\0\1\133\7\0\16\133\1\0\15\133\3\0\4\133"+
    "\1\0\10\133\2\0\6\133\5\0\1\135\2\0\1\324"+
    "\1\135\1\0\4\135\1\0\1\135\2\0\6\135\1\0"+
    "\72\135\3\0\1\261\1\262\3\0\2\325\6\0\1\263"+
    "\2\0\1\264\2\0\16\325\1\0\15\325\3\0\4\325"+
    "\1\0\4\325\1\0\3\325\2\0\1\325\1\0\4\325"+
    "\5\0\1\135\1\0\1\322\1\324\1\135\1\0\4\135"+
    "\1\0\1\135\2\0\6\135\1\0\72\135\1\326\1\0"+
    "\10\326\1\327\104\326\1\330\1\0\12\330\1\327\102\330"+
    "\3\0\1\261\1\262\13\0\1\263\2\0\1\331\135\0"+
    "\1\332\2\0\1\332\102\0\1\333\17\0\1\333\101\0"+
    "\1\334\22\0\1\334\37\0\21\335\1\336\75\335\6\0"+
    "\4\150\4\0\1\150\7\0\16\150\1\0\15\150\3\0"+
    "\4\150\1\0\10\150\2\0\6\150\53\0\1\337\5\0"+
    "\1\337\132\0\1\340\17\0\1\340\6\0\1\153\2\0"+
    "\1\341\1\153\1\0\4\153\1\0\1\153\2\0\6\153"+
    "\1\0\72\153\1\155\1\0\1\342\1\343\1\155\1\342"+
    "\4\155\1\344\1\155\2\342\6\155\1\342\72\155\1\345"+
    "\1\0\1\346\1\347\1\350\1\346\4\350\1\346\1\345"+
    "\1\351\1\352\3\350\1\345\2\350\1\352\1\345\35\350"+
    "\1\345\11\350\2\345\3\350\4\345\4\350\1\345\1\350"+
    "\3\345\1\157\2\335\1\353\1\157\1\335\4\157\1\335"+
    "\1\157\2\335\3\157\1\354\2\157\1\335\72\157\1\160"+
    "\2\0\1\355\1\160\1\0\4\160\1\0\1\160\2\0"+
    "\6\160\1\0\72\160\1\162\2\356\1\357\1\162\1\356"+
    "\4\162\1\360\1\162\2\356\6\162\1\356\72\162\1\163"+
    "\2\361\1\362\1\163\1\361\4\163\1\361\1\163\1\360"+
    "\1\361\6\163\1\361\72\163\1\164\2\335\1\363\1\164"+
    "\1\335\4\164\1\335\1\164\2\335\3\164\1\364\2\164"+
    "\1\335\72\164\1\165\2\0\1\365\1\165\1\0\4\165"+
    "\1\0\1\165\2\0\6\165\1\0\72\165\1\167\1\0"+
    "\1\366\1\367\1\167\1\366\4\167\1\370\1\167\2\366"+
    "\6\167\1\366\72\167\1\371\1\0\1\372\1\373\1\374"+
    "\1\372\4\374\1\372\1\371\1\375\1\376\3\374\1\371"+
    "\2\374\1\376\1\371\35\374\1\371\11\374\2\371\3\374"+
    "\4\371\4\374\1\371\1\374\3\371\2\171\1\0\116\171"+
    "\1\0\1\171\1\377\13\171\1\u0100\2\171\1\u0101\73\171"+
    "\1\174\2\0\1\u0102\1\174\1\0\4\174\1\0\1\174"+
    "\2\0\6\174\1\0\72\174\1\176\1\0\1\u0103\1\u0104"+
    "\1\176\1\u0103\4\176\1\u0105\1\176\2\u0103\6\176\1\u0103"+
    "\72\176\1\u0106\1\0\1\u0107\1\u0108\1\u0109\1\u0107\4\u0109"+
    "\1\u0107\1\u0106\1\u010a\1\u010b\3\u0109\1\u0106\2\u0109\1\u010b"+
    "\1\u0106\35\u0109\1\u0106\11\u0109\2\u0106\3\u0109\4\u0106\4\u0109"+
    "\1\u0106\1\u0109\3\u0106\2\200\1\0\116\200\1\0\1\200"+
    "\1\u010c\13\200\1\u010d\2\200\1\u010e\73\200\2\0\1\u010f"+
    "\114\0\1\210\1\0\12\210\1\0\47\210\1\u0110\26\210"+
    "\1\u0110\3\210\3\0\1\u0111\1\262\13\0\1\263\2\0"+
    "\1\273\73\0\1\210\1\265\3\210\1\212\6\210\1\0"+
    "\1\212\6\210\1\212\37\210\1\u0110\26\210\1\u0110\105\210"+
    "\1\0\14\210\1\215\1\0\10\215\1\0\51\215\1\u0112"+
    "\26\215\1\u0112\4\215\1\265\3\215\1\216\4\215\1\0"+
    "\2\215\1\216\6\215\1\216\37\215\1\u0112\26\215\1\u0112"+
    "\105\215\1\0\14\215\5\0\1\226\7\0\1\226\6\0"+
    "\1\226\102\0\1\227\5\0\1\227\7\0\16\227\1\0"+
    "\15\227\3\0\4\227\1\0\3\227\2\0\3\227\1\0"+
    "\7\227\5\0\14\u0113\1\u0114\100\u0113\1\u0115\1\u0113\16\0"+
    "\1\232\214\0\1\u0116\12\0\1\227\5\0\1\227\7\0"+
    "\16\227\1\0\5\227\1\u0117\7\227\3\0\4\227\1\0"+
    "\3\227\2\0\3\227\1\0\7\227\15\0\1\227\5\0"+
    "\1\227\7\0\4\227\1\u0118\10\227\1\u0119\1\0\15\227"+
    "\3\0\4\227\1\0\3\227\2\0\3\227\1\0\7\227"+
    "\15\0\1\227\5\0\1\227\7\0\10\227\1\u011a\5\227"+
    "\1\0\15\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\10\227"+
    "\1\u011b\5\227\1\0\15\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\7\227\15\0\1\227\5\0\1\227"+
    "\7\0\5\227\1\u011c\7\227\1\u011d\1\0\15\227\3\0"+
    "\4\227\1\0\1\u011e\2\227\2\0\3\227\1\0\7\227"+
    "\15\0\1\227\5\0\1\227\7\0\14\227\1\u011b\1\227"+
    "\1\0\15\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\12\227"+
    "\1\u011e\3\227\1\0\15\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\5\227\1\u011f\1\227\5\0\62\u0120"+
    "\1\u0121\34\u0120\10\0\1\227\5\0\1\227\7\0\14\227"+
    "\1\u0122\1\227\1\0\15\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\7\227\15\0\1\227\5\0\1\227"+
    "\7\0\6\227\1\u0123\7\227\1\0\15\227\3\0\4\227"+
    "\1\0\3\227\2\0\3\227\1\0\7\227\15\0\1\227"+
    "\5\0\1\227\7\0\12\227\1\u0124\3\227\1\0\15\227"+
    "\3\0\4\227\1\0\3\227\2\0\3\227\1\0\7\227"+
    "\15\0\1\227\5\0\1\227\7\0\13\227\1\u0125\2\227"+
    "\1\0\15\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\7\227\15\0\1\u0126\15\0\16\u0126\1\0\15\u0126"+
    "\3\0\4\u0126\1\0\3\u0126\2\0\3\u0126\1\0\7\u0126"+
    "\121\0\1\u0127\2\0\12\252\1\0\100\252\1\0\2\252"+
    "\1\0\4\252\1\u0128\5\252\1\0\5\252\1\u0129\2\252"+
    "\1\u012a\67\252\1\0\2\252\11\0\1\u012b\15\0\16\u012b"+
    "\1\0\15\u012b\3\0\4\u012b\1\0\3\u012b\2\0\3\u012b"+
    "\1\0\7\u012b\15\0\1\u012c\15\0\16\u012c\1\0\15\u012c"+
    "\3\0\4\u012c\1\0\3\u012c\2\0\3\u012c\1\0\7\u012c"+
    "\54\0\1\u012d\27\0\1\u012d\26\0\1\u012e\15\0\1\u012f"+
    "\75\0\1\u0130\117\0\1\266\2\0\2\47\3\0\1\266"+
    "\6\0\1\266\1\0\16\47\1\0\15\47\3\0\4\47"+
    "\1\0\4\47\1\0\3\47\2\0\1\47\1\0\4\47"+
    "\5\0\1\u0131\1\0\3\u0131\1\u0132\4\267\1\u0131\1\0"+
    "\1\u0131\1\u0132\1\267\1\u0131\1\0\3\u0131\1\u0132\1\u0131"+
    "\16\267\1\u0131\15\267\3\u0131\4\267\1\u0133\10\267\2\u0131"+
    "\6\267\5\u0131\16\0\1\u0134\13\0\1\u0135\64\0\1\u0131"+
    "\1\0\3\u0131\1\u0132\4\271\1\u0131\1\0\1\u0131\1\u0132"+
    "\1\271\1\u0131\1\0\3\u0131\1\u0132\1\u0131\16\271\1\u0131"+
    "\15\271\3\u0131\4\271\1\u0136\10\271\2\u0131\6\271\5\u0131"+
    "\5\0\1\272\7\0\1\272\6\0\1\272\117\0\1\u012f"+
    "\73\0\1\u0137\116\0\1\u0138\122\0\4\71\4\0\1\71"+
    "\7\0\6\71\1\u0139\7\71\1\0\12\71\1\u013a\2\71"+
    "\3\0\4\71\1\0\10\71\2\0\6\71\13\0\4\71"+
    "\4\0\1\71\7\0\6\71\1\u013a\7\71\1\0\12\71"+
    "\1\u013a\2\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\13\0\4\71\4\0\1\71\7\0\16\71\1\0\2\71"+
    "\1\u013b\12\71\3\0\4\71\1\0\5\71\1\u013b\2\71"+
    "\2\0\6\71\13\0\4\71\4\0\1\71\7\0\16\71"+
    "\1\0\2\71\1\u013c\12\71\3\0\4\71\1\0\5\71"+
    "\1\u013c\2\71\2\0\6\71\5\0\1\315\1\0\10\315"+
    "\1\317\104\315\1\320\1\0\12\320\1\317\102\320\6\0"+
    "\4\323\4\0\1\323\7\0\16\323\1\0\15\323\3\0"+
    "\4\323\1\0\10\323\2\0\6\323\13\0\4\325\4\0"+
    "\1\325\7\0\16\325\1\0\15\325\3\0\4\325\1\0"+
    "\10\325\2\0\6\325\33\0\1\u013d\45\0\1\u013d\53\0"+
    "\1\u013e\17\0\1\u013e\103\0\1\u013f\11\0\1\u013f\106\0"+
    "\1\u0140\24\0\1\u0140\124\0\1\u0141\12\0\1\u0141\10\0"+
    "\1\342\1\0\10\342\1\344\104\342\1\345\1\0\1\346"+
    "\1\u0142\1\345\1\346\4\345\1\346\1\345\1\344\1\346"+
    "\6\345\1\346\72\345\1\346\1\0\12\346\1\344\102\346"+
    "\1\345\1\0\1\346\1\u0142\1\345\1\346\4\345\1\346"+
    "\1\345\1\u0143\1\346\6\345\1\346\72\345\14\0\1\u0144"+
    "\102\0\1\346\1\0\12\346\1\u0143\102\346\12\356\1\360"+
    "\104\356\14\361\1\360\102\361\1\366\1\0\10\366\1\370"+
    "\104\366\1\371\1\0\1\372\1\u0145\1\371\1\372\4\371"+
    "\1\372\1\371\1\370\1\372\6\371\1\372\72\371\1\372"+
    "\1\0\12\372\1\370\102\372\1\371\1\0\1\372\1\u0145"+
    "\1\371\1\372\4\371\1\372\1\371\1\u0146\1\372\6\371"+
    "\1\372\72\371\14\0\1\u0147\102\0\1\372\1\0\12\372"+
    "\1\u0146\102\372\2\171\1\0\44\171\1\u0148\27\171\1\u0148"+
    "\21\171\1\0\22\171\1\u0149\71\171\1\u0103\1\0\10\u0103"+
    "\1\u0105\104\u0103\1\u0106\1\0\1\u0107\1\u014a\1\u0106\1\u0107"+
    "\4\u0106\1\u0107\1\u0106\1\u0105\1\u0107\6\u0106\1\u0107\72\u0106"+
    "\1\u0107\1\0\12\u0107\1\u0105\102\u0107\1\u0106\1\0\1\u0107"+
    "\1\u014a\1\u0106\1\u0107\4\u0106\1\u0107\1\u0106\1\u014b\1\u0107"+
    "\6\u0106\1\u0107\72\u0106\14\0\1\u014c\102\0\1\u0107\1\0"+
    "\12\u0107\1\u014b\102\u0107\2\200\1\0\44\200\1\u014d\27\200"+
    "\1\u014d\21\200\1\0\22\200\1\u014e\71\200\24\u0113\1\0"+
    "\72\u0113\10\0\1\227\5\0\1\227\7\0\16\227\1\0"+
    "\15\227\3\0\4\227\1\0\2\227\1\u014f\2\0\3\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\16\227"+
    "\1\0\4\227\1\u0150\10\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\7\227\15\0\1\227\5\0\1\227"+
    "\7\0\16\227\1\0\6\227\1\u0151\6\227\3\0\4\227"+
    "\1\0\3\227\2\0\3\227\1\0\7\227\15\0\1\227"+
    "\5\0\1\227\7\0\15\227\1\u0152\1\0\15\227\3\0"+
    "\4\227\1\0\3\227\2\0\3\227\1\0\7\227\15\0"+
    "\1\227\5\0\1\227\7\0\16\227\1\0\4\227\1\u011e"+
    "\10\227\3\0\4\227\1\0\3\227\2\0\3\227\1\0"+
    "\7\227\15\0\1\227\5\0\1\227\7\0\16\227\1\0"+
    "\15\227\3\0\4\227\1\0\3\227\2\0\1\u0153\2\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\16\227"+
    "\1\0\15\227\3\0\4\227\1\0\2\227\1\u0154\2\0"+
    "\3\227\1\0\7\227\15\0\1\227\5\0\1\227\7\0"+
    "\16\227\1\0\4\227\1\u0155\10\227\3\0\4\227\1\0"+
    "\3\227\2\0\3\227\1\0\7\227\15\0\1\227\5\0"+
    "\1\227\7\0\11\227\1\u011e\4\227\1\0\15\227\3\0"+
    "\4\227\1\0\3\227\2\0\3\227\1\0\7\227\15\0"+
    "\1\227\5\0\1\227\7\0\14\227\1\u0156\1\227\1\0"+
    "\15\227\3\0\4\227\1\0\3\227\2\0\3\227\1\0"+
    "\7\227\15\0\1\227\5\0\1\227\7\0\10\227\1\u011e"+
    "\5\227\1\0\15\227\3\0\4\227\1\0\3\227\2\0"+
    "\3\227\1\0\7\227\15\0\1\227\5\0\1\227\7\0"+
    "\16\227\1\0\4\227\1\u0157\10\227\3\0\4\227\1\0"+
    "\3\227\2\0\3\227\1\0\7\227\15\0\1\u0126\5\0"+
    "\1\u0126\7\0\16\u0126\1\0\15\u0126\3\0\4\u0126\1\0"+
    "\3\u0126\2\0\3\u0126\1\0\7\u0126\5\0\12\252\1\0"+
    "\34\252\1\u0158\27\252\1\u0158\13\252\1\0\2\252\1\0"+
    "\12\252\1\0\12\252\1\u0159\65\252\1\0\2\252\11\0"+
    "\1\u012b\5\0\1\u012b\6\0\1\u015a\16\u012b\1\0\15\u012b"+
    "\3\0\4\u012b\1\0\3\u012b\2\0\3\u012b\1\0\7\u012b"+
    "\15\0\1\u012c\5\0\1\u012c\7\0\16\u012c\1\0\15\u012c"+
    "\3\0\4\u012c\1\0\3\u012c\2\0\3\u012c\1\0\7\u012c"+
    "\105\0\2\u015b\24\0\1\u015c\135\0\1\u015d\137\0\1\u015e"+
    "\27\0\1\u015e\17\0\1\u0131\1\0\11\u0131\1\0\4\u0131"+
    "\1\0\50\u0131\1\0\26\u0131\1\0\3\u0131\1\u0132\5\u0131"+
    "\1\0\1\u0131\1\u0132\2\u0131\1\0\3\u0131\1\u0132\44\u0131"+
    "\1\u015f\25\u0131\16\0\1\u0134\52\0\1\u0160\43\0\1\u0161"+
    "\7\0\3\u0161\5\0\1\u0161\11\0\1\u0161\1\0\2\u0161"+
    "\13\0\1\u0161\2\0\3\u0161\11\0\1\u0161\16\0\1\71"+
    "\1\u0162\2\71\4\0\1\71\7\0\16\71\1\0\15\71"+
    "\3\0\4\71\1\0\10\71\2\0\6\71\13\0\4\71"+
    "\4\0\1\71\7\0\14\71\1\u0163\1\71\1\0\1\u0163"+
    "\14\71\3\0\4\71\1\0\10\71\2\0\6\71\36\0"+
    "\1\u0164\17\0\1\u0164\101\0\1\u0165\22\0\1\u0165\72\0"+
    "\1\u0166\24\0\1\u0166\67\0\1\u0167\17\0\1\u0167\101\0"+
    "\1\u0168\22\0\1\u0168\42\0\2\u0169\1\0\4\u0169\2\0"+
    "\1\351\4\u0169\1\0\3\u0169\1\0\35\u0169\1\0\11\u0169"+
    "\2\0\3\u0169\4\0\4\u0169\1\0\1\u0169\6\0\2\u016a"+
    "\1\0\4\u016a\2\0\1\375\4\u016a\1\0\3\u016a\1\0"+
    "\35\u016a\1\0\11\u016a\2\0\3\u016a\4\0\4\u016a\1\0"+
    "\1\u016a\3\0\2\171\1\0\75\171\2\u016b\17\171\1\0"+
    "\23\171\1\u016c\70\171\3\0\2\u016d\1\0\4\u016d\2\0"+
    "\1\u010a\4\u016d\1\0\3\u016d\1\0\35\u016d\1\0\11\u016d"+
    "\2\0\3\u016d\4\0\4\u016d\1\0\1\u016d\3\0\2\200"+
    "\1\0\75\200\2\u016e\17\200\1\0\23\200\1\u016f\70\200"+
    "\10\0\1\227\5\0\1\227\7\0\11\227\1\u0170\4\227"+
    "\1\0\15\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\10\227"+
    "\1\u0171\5\227\1\0\15\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\7\227\15\0\1\227\5\0\1\227"+
    "\7\0\5\227\1\234\5\227\1\u0172\2\227\1\0\5\227"+
    "\1\u0173\7\227\3\0\4\227\1\0\1\244\2\227\2\0"+
    "\3\227\1\0\3\227\1\245\3\227\15\0\1\227\5\0"+
    "\1\227\7\0\16\227\1\0\6\227\1\u0174\6\227\3\0"+
    "\4\227\1\0\3\227\2\0\3\227\1\0\7\227\15\0"+
    "\1\227\5\0\1\227\7\0\14\227\1\u0175\1\227\1\0"+
    "\15\227\3\0\4\227\1\0\3\227\2\0\3\227\1\0"+
    "\7\227\15\0\1\227\5\0\1\227\7\0\6\227\1\u0176"+
    "\7\227\1\0\15\227\3\0\4\227\1\0\3\227\2\0"+
    "\3\227\1\0\7\227\15\0\1\227\5\0\1\227\7\0"+
    "\14\227\1\u0177\1\227\1\0\15\227\3\0\4\227\1\0"+
    "\3\227\2\0\3\227\1\0\7\227\15\0\1\227\5\0"+
    "\1\227\7\0\16\227\1\0\15\227\3\0\4\227\1\0"+
    "\2\227\1\u0178\2\0\3\227\1\0\7\227\15\0\1\227"+
    "\5\0\1\227\7\0\16\227\1\0\15\227\3\0\4\227"+
    "\1\0\3\227\2\0\1\227\1\u011e\1\227\1\0\7\227"+
    "\5\0\12\252\1\0\65\252\2\u0179\11\252\1\0\2\252"+
    "\1\0\12\252\1\0\13\252\1\u017a\64\252\1\0\2\252"+
    "\11\0\1\u017b\5\0\1\u017c\7\0\16\u017b\1\0\15\u017b"+
    "\3\0\4\u017b\1\0\3\u017b\2\0\3\u017b\1\0\7\u017b"+
    "\54\0\1\u017d\13\0\1\u017d\13\0\1\u017d\46\0\1\u017e"+
    "\167\0\2\u017f\106\0\1\u015f\43\0\1\u0161\7\0\3\u0161"+
    "\5\0\1\u0161\11\0\1\u0161\1\0\2\u0161\13\0\1\u0161"+
    "\1\0\1\u0160\3\u0161\11\0\1\u0161\16\0\4\71\4\0"+
    "\1\71\7\0\12\71\1\u0180\3\71\1\0\15\71\3\0"+
    "\4\71\1\0\10\71\2\0\6\71\13\0\4\71\4\0"+
    "\1\71\7\0\11\71\1\u0181\4\71\1\0\15\71\3\0"+
    "\1\71\1\u0181\2\71\1\0\10\71\2\0\6\71\53\0"+
    "\1\u0182\5\0\1\u0182\103\0\1\u0183\13\0\1\u0183\77\0"+
    "\1\u0184\11\0\1\u0184\104\0\1\u0185\11\0\1\u0185\107\0"+
    "\1\u0186\13\0\1\u0186\41\0\2\171\1\0\44\171\1\u0187"+
    "\13\171\1\u0187\13\171\1\u0187\21\171\1\0\24\171\1\u0188"+
    "\67\171\2\200\1\0\44\200\1\u0189\13\200\1\u0189\13\200"+
    "\1\u0189\21\200\1\0\24\200\1\u018a\67\200\10\0\1\227"+
    "\5\0\1\227\7\0\14\227\1\u011e\1\227\1\0\15\227"+
    "\3\0\4\227\1\0\3\227\2\0\3\227\1\0\7\227"+
    "\15\0\1\227\5\0\1\227\7\0\15\227\1\u018b\1\0"+
    "\15\227\3\0\4\227\1\0\3\227\2\0\3\227\1\0"+
    "\7\227\15\0\1\227\5\0\1\227\7\0\16\227\1\0"+
    "\15\227\3\0\4\227\1\0\1\u011e\2\227\2\0\3\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\16\227"+
    "\1\0\15\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\5\227\1\u011f\1\227\15\0\1\227\5\0\1\227"+
    "\7\0\10\227\1\u0122\5\227\1\0\15\227\3\0\4\227"+
    "\1\0\3\227\2\0\3\227\1\0\7\227\15\0\1\227"+
    "\5\0\1\227\7\0\11\227\1\u011b\4\227\1\0\15\227"+
    "\3\0\4\227\1\0\3\227\2\0\3\227\1\0\7\227"+
    "\15\0\1\227\5\0\1\227\7\0\16\227\1\0\15\227"+
    "\3\0\4\227\1\0\3\227\2\0\3\227\1\0\5\227"+
    "\1\u018c\1\227\15\0\1\227\5\0\1\227\7\0\10\227"+
    "\1\u018d\5\227\1\0\15\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\7\227\15\0\1\227\5\0\1\227"+
    "\7\0\16\227\1\0\15\227\3\0\4\227\1\0\3\227"+
    "\2\0\3\227\1\0\4\227\1\u011e\2\227\5\0\12\252"+
    "\1\0\34\252\1\u018e\13\252\1\u018e\13\252\1\u018e\13\252"+
    "\1\0\2\252\1\0\12\252\1\0\14\252\1\u018f\63\252"+
    "\1\0\2\252\11\0\1\u017b\5\0\1\u017b\2\0\1\u0190"+
    "\4\0\16\u017b\1\0\15\u017b\3\0\4\u017b\1\0\3\u017b"+
    "\2\0\3\u017b\1\0\7\u017b\23\0\1\u017c\2\0\1\u0191"+
    "\102\0\1\u017d\7\0\1\u017d\6\0\1\u017d\122\0\1\u0192"+
    "\135\0\1\u0193\13\0\1\u0193\13\0\1\u0193\25\0\4\71"+
    "\4\0\1\71\7\0\16\71\1\0\4\71\1\u0194\10\71"+
    "\3\0\4\71\1\0\10\71\2\0\6\71\13\0\4\71"+
    "\4\0\1\71\7\0\3\71\1\u0195\12\71\1\0\4\71"+
    "\1\u0195\10\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\54\0\1\u0196\27\0\1\u0196\57\0\1\u0197\24\0\1\u0197"+
    "\74\0\1\u0198\15\0\1\u0198\70\0\1\u0199\24\0\1\u0199"+
    "\64\0\1\u019a\45\0\1\u019a\22\0\2\171\1\0\2\171"+
    "\1\u0187\7\171\1\u0187\6\171\1\u0187\74\171\1\0\25\171"+
    "\1\u019b\66\171\2\200\1\0\2\200\1\u0189\7\200\1\u0189"+
    "\6\200\1\u0189\74\200\1\0\25\200\1\u019c\66\200\10\0"+
    "\1\227\5\0\1\227\7\0\16\227\1\0\6\227\1\u019d"+
    "\6\227\3\0\4\227\1\0\3\227\2\0\3\227\1\0"+
    "\7\227\15\0\1\227\5\0\1\227\7\0\16\227\1\0"+
    "\6\227\1\u0124\6\227\3\0\4\227\1\0\3\227\2\0"+
    "\3\227\1\0\7\227\15\0\1\227\5\0\1\227\7\0"+
    "\12\227\1\u019e\3\227\1\0\15\227\3\0\4\227\1\0"+
    "\3\227\2\0\3\227\1\0\7\227\5\0\5\252\1\u018e"+
    "\4\252\1\0\2\252\1\u018e\6\252\1\u018e\66\252\1\0"+
    "\2\252\1\0\12\252\1\0\15\252\1\u019f\62\252\1\0"+
    "\2\252\32\0\1\u01a0\72\0\1\u0193\7\0\1\u0193\6\0"+
    "\1\u0193\100\0\4\71\4\0\1\71\7\0\16\71\1\0"+
    "\7\71\1\u01a1\5\71\3\0\4\71\1\0\10\71\2\0"+
    "\6\71\43\0\1\u01a2\11\0\1\u01a2\77\0\1\u01a3\17\0"+
    "\1\u01a3\76\0\1\u01a4\17\0\1\u01a4\45\0\2\171\1\0"+
    "\26\171\1\u01a5\65\171\2\200\1\0\26\200\1\u01a6\65\200"+
    "\10\0\1\227\5\0\1\227\7\0\12\227\1\u011e\3\227"+
    "\1\0\15\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\7\227\15\0\1\227\5\0\1\227\7\0\16\227"+
    "\1\0\15\227\3\0\4\227\1\0\2\227\1\u01a7\2\0"+
    "\3\227\1\0\7\227\5\0\12\252\1\0\16\252\1\u01a8"+
    "\61\252\1\0\2\252\31\0\1\u01a9\74\0\4\71\4\0"+
    "\1\71\7\0\6\71\1\u01aa\7\71\1\0\15\71\3\0"+
    "\4\71\1\0\10\71\2\0\6\71\5\0\2\171\1\0"+
    "\25\171\1\u01ab\66\171\2\200\1\0\25\200\1\u01ac\66\200"+
    "\10\0\1\227\5\0\1\227\7\0\16\227\1\0\5\227"+
    "\1\u01ad\7\227\3\0\4\227\1\0\3\227\2\0\3\227"+
    "\1\0\7\227\5\0\12\252\1\0\15\252\1\u01ae\62\252"+
    "\1\0\2\252\26\0\1\u01af\77\0\4\71\4\0\1\71"+
    "\7\0\10\71\1\u01b0\5\71\1\0\15\71\3\0\4\71"+
    "\1\0\10\71\2\0\6\71\5\0\2\171\1\0\22\171"+
    "\1\u01b1\71\171\2\200\1\0\22\200\1\u01b2\71\200\10\0"+
    "\1\227\5\0\1\227\7\0\16\227\1\0\15\227\3\0"+
    "\4\227\1\0\3\227\2\0\1\u0124\2\227\1\0\7\227"+
    "\5\0\12\252\1\0\12\252\1\u01b3\65\252\1\0\2\252"+
    "\7\0\4\71\4\0\1\71\7\0\12\71\1\u01b4\3\71"+
    "\1\0\15\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\13\0\4\71\4\0\1\71\7\0\16\71\1\0\15\71"+
    "\3\0\4\71\1\0\6\71\1\u01b5\1\71\2\0\6\71"+
    "\13\0\4\71\4\0\1\71\7\0\10\71\1\u01b6\5\71"+
    "\1\0\15\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\13\0\4\71\4\0\1\71\7\0\10\71\1\u01b7\5\71"+
    "\1\0\15\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\13\0\4\71\4\0\1\71\7\0\16\71\1\0\4\71"+
    "\1\u01b8\10\71\3\0\4\71\1\0\10\71\2\0\6\71"+
    "\5\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  0,  0,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1, 
     1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  9,  9,  1,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  9,  1, 
     1,  1,  9,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1,  9, 
     9,  1,  9,  1,  0,  0,  1,  0,  1,  1,  0,  0,  0,  0,  9,  1, 
     1,  1,  1,  9,  9,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0, 
     0,  9,  1,  0,  1,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  0,  1,  0,  0,  0,  9, 
     0,  0,  0,  1,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  1, 
     1,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  1,  1,  9,  0, 
     9,  0,  0,  9,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  0,  0,  0,  0, 
     1,  1,  9,  0,  0,  9,  9,  9,  1,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  1,  0,  0,  1,  0,  1,  1,  0,  1,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  9,  0,  0,  1,  9, 
     0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  0,  0,  1, 
     1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     9,  0,  1,  1,  1,  0,  0,  0,  9,  9,  1,  1,  1,  1,  1,  0, 
     1,  9,  9,  9,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private String fBufferedText = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	
	// help for php container text region
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;


	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has 
	// been completed
	private int fEmbeddedPostState = YYINITIAL;
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private String text = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;
	
	public static String twigLeftDelim = "{{";
	public static String twigRightDelim = "}}";
	
	
	private final XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean allowPHP, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			
			/**
			 * Look for starting PHPs "<?"
			 */
			// Look for a PHP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '<' && 
					(yy_buffer[yy_currentPos] == '?' || (yy_buffer[yy_currentPos] == '%' && ProjectOptions.isSupportingAspTags(project)))) {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			
			// 2) yy_currentPos - jspstarter.length : There's not searchStringLength of input available; check for a JSP 2 spots back in what we could read
			// ---
			// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			else if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '<' && yy_buffer[yy_currentPos] == '?') {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			// 3) yy_currentPos..(yy_currentPos+jspStartlength-1) : Check at the start of the block one time
			// ---
			// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
			// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
			else if(allowPHP && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
					yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '<' && yy_buffer[yy_startRead + 1] == '?') {
				fLastInternalBlockStart = yy_markedPos = yy_startRead;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}

			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			if (n == YYEOF) {
				stillSearching = false;
			}
			else {
				same = true;
				// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				
				// safety check for array accesses (yy_currentPos is the *last* character we can check against)
				if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
					for(i = 0; i < searchStringLength; i++) {
						if(same && fIsCaseSensitiveBlocking)
							same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
						else if(same && !fIsCaseSensitiveBlocking)
							same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
					}
				}
				// safety check failed; no match is possible right now
				else {
					same = false;
				}
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}

/**
 * Method doScanEndPhp
 * 
 * @see doScan(searchString, req...) 
 * this version can handle two strings as options to search string
 * it originally written to support ?> or %> close tags to php
 * The two strings must be on the same length
 *
 * @param isAsp - whether the asp %> close is premited
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private ITextRegion bufferedTextRegion = null;
private final String doScanEndPhp(boolean isAsp, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	yypushback(1); // begin with the last char
	
	final AbstractPhpLexer phpLexer = getPhpLexer(); 
	bufferedTextRegion = new PhpScriptRegion(searchContext, yychar, project, phpLexer);

	// restore the locations / states
	reset(yy_reader, phpLexer.getZZBuffer(), phpLexer.getParamenters());
	
	yybegin(exitState);
	return searchContext;
}

/**
 * @param project
 * @param stream
 * @return a new lexer for the given project with the given stream initialized with current parameters
 */
private AbstractPhpLexer getPhpLexer() {
	final PHPVersion phpVersion = ProjectOptions.getPhpVersion(project);
	final AbstractPhpLexer lexer = PhpLexerFactory.createLexer(yy_reader, phpVersion);
	int[] currentParameters = getParamenters();
	try {
		// set initial lexer state - we use reflection here since we don't know the constant value of 
		// of this state in specific PHP version lexer 
		currentParameters[6] = lexer.getClass().getField("ST_PHP_IN_SCRIPTING").getInt(lexer);
	} catch (Exception e) {
		Logger.logException(e);
	}
	lexer.initialize(currentParameters[6]);
	lexer.reset(yy_reader, yy_buffer, currentParameters);
	lexer.setPatterns(project);

	lexer.setAspTags(ProjectOptions.isSupportingAspTags(project));
	return lexer;
}

// call the doScan without searching for PHP internal code
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	return doScan(searchString, true, requireTailSeparator, searchContext, exitState, immediateFallbackState);	
}

	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String[] endTypes) {
		assembleEmbeddedContainer(startType, endTypes, null);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {

				ITextRegion newToken;
				// if it is php content we extract the tokens
				if (internalContext == PHP_CONTENT) {
					newToken = bufferedTextRegion; 
					bufferedTextRegion.adjustStart(-containerStart);
				} else {
					newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				}
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength() );
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container

					ITextRegion newToken;
					// if it is php content we extract the tokens
					if (internalContext == PHP_CONTENT) {
						newToken = bufferedTextRegion; 
						bufferedTextRegion.adjustStart(-containerStart);
					} else {
						newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					}

					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
			} catch (Exception f) {
				// some other exception happened; never should
				Logger.logException(f);
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]);
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}

	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		return true;
	}

/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}

private IProject project;

public void setProject(IProject project) {
	this.project = project;
}

public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
	this.yy_reader = reader;
	this.yy_buffer = buffer;
	this.yy_markedPos = parameters[0];
	this.yy_pushbackPos = parameters[1];
	this.yy_currentPos = parameters[2];
	this.yy_startRead = parameters[3];
	this.yy_endRead = parameters[4];
	this.yyline = parameters[5];  
	this.yychar = this.yy_startRead - this.yy_pushbackPos;
}

public int[] getParamenters(){
	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
}

/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	fEmbeddedContainer = null;
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		if (fBufferedEmbeddedContainer != null) {
			ITextRegion container = fBufferedEmbeddedContainer;
			fBufferedEmbeddedContainer = null;
			fShouldLoadBuffered = false;
			return container;
		}
		context = fBufferedContext;
		text = fBufferedText;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == PROXY_CONTEXT) {
			return fEmbeddedContainer;
		} else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		text = yytext();
		if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = text;
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	
	// store the next token
	f_context = primGetNextToken();
	if (f_context == PROXY_CONTEXT) {
		fBufferedEmbeddedContainer = fEmbeddedContainer;
		fShouldLoadBuffered = true;
	} else if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	} else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	} else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedText = yytext();
	if (fBufferedContext == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = fBufferedText;
		else
			fCurrentTagName = null;
	}
	else if (fBufferedContext == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (fBufferedContext == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}else {
		fShouldLoadBuffered = true;
	}
	if (context == null) {
		// EOF
		if (Debug.debugTokenizer) {
			System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
		}
		return null;
	}
	fTokenCount++;

	// if it is php content we extract the tokens
	if (context == PHP_CONTENT) {
		return bufferedTextRegion; 
	} else {
		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
}

/* user method */
public TwigTokenizer(){
	super();
}
/* user method */
public TwigTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fLastInternalBlockStart = -1;	

	fTokenCount = 0;
	
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedText = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	text = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		TwigTokenizer newInstance = new TwigTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", true, false,  XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[24964];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 7138) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1380) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}
	
	/* user method - skeleton.sse */
	protected final String findTwigDelimiter(String text, String insideOf, String delim, String delimType, int afterDelimType){
		final int startChar = text.indexOf(delim);
		
		if (Debug.debugTokenizer) {
			System.err.println("Delim: "+delim+" looking in: '"+text+"' startchar: "+startChar);
		}
			
		if (startChar != -1) {
			//System.err.println("a");
			//go to the char right before the text, so it doesnt mark the whole thing red...
			if (startChar > 0){
				//System.err.println("b");
				//push to right before the delim
				yypushback(yylength() - startChar);
				//return YYINITIAL;
			} else {
				//System.err.println("c");
				yybegin(afterDelimType);
				// pushback to just after the closing bracket
				int delemLen = delim.length();
				yypushback(yylength() - startChar - delemLen);
				return delimType;
			}
		}
		//System.err.println("d"+insideOf);
		return insideOf;
	}

		

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_counted = false;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 439: 
          { 
	if(Debug.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 441: break;
        case 430: 
        case 432: 
        case 433: 
        case 434: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 442: break;
        case 419: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 443: break;
        case 418: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 444: break;
        case 417: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 445: break;
        case 409: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 446: break;
        case 408: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 447: break;
        case 404: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 448: break;
        case 402: 
          { 
    if (ProjectOptions.isSupportingAspTags(project) ||yytext().charAt(1) != '%') {
		//removeing trailing whitespaces for the php open
		String phpStart = yytext();
		int i = phpStart.length() - 1; 
		while(i >= 0 && Character.isWhitespace(phpStart.charAt(i--))){
			yypushback(1);
		}

		fStateStack.push(yystate());
		if(fStateStack.peek()==YYINITIAL) {
			// the simple case, just a regular scriptlet out in content
			yybegin(ST_PHP_CONTENT);
			return PHP_OPEN;
		}
		else {
			if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
			else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
			else if(yystate() == ST_CDATA_TEXT) {
				fEmbeddedPostState = ST_CDATA_TEXT;
				fEmbeddedHint = XML_CDATA_TEXT;
			}
			yybegin(ST_PHP_CONTENT);
			assembleEmbeddedContainer(PHP_OPEN, PHP_CLOSE);
			if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
				yybegin(ST_BLOCK_TAG_SCAN);
				return BLOCK_TEXT;
			}
			// required help for successive embedded regions
			if(yystate() == ST_XML_TAG_NAME) {
				fEmbeddedHint = XML_TAG_NAME;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
				fEmbeddedPostState = ST_XML_EQUALS;
			}
			else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			return PROXY_CONTEXT;
		}
    }
    yypushback(1);
	yybegin(ST_XML_TAG_NAME);
	return XML_TAG_OPEN;
 }
        case 449: break;
        case 400: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable3");

    return TWIG_VARIABLE;
 }
        case 450: break;
        case 399: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable4");

    return TWIG_VARIABLE;
 }
        case 451: break;
        case 351: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 452: break;
        case 347: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 453: break;
        case 315: 
          { 
	if(Debug.debugTokenizer)
		dump("PHP processing instruction target");//$NON-NLS-1$
	//fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	//fEmbeddedPostState = ST_XML_EQUALS;
        //yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        //return XML_TAG_NAME;
        yybegin(ST_PHP_CONTENT);
		return PHP_OPEN;
 }
        case 454: break;
        case 312: 
        case 313: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 455: break;
        case 311: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 456: break;
        case 310: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 457: break;
        case 309: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 458: break;
        case 306: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 459: break;
        case 299: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable5");

    return TWIG_VARIABLE;
 }
        case 460: break;
        case 129: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 461: break;
        case 123: 
        case 125: 
        case 126: 
        case 260: 
        case 261: 
        case 264: 
        case 265: 
        case 330: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 462: break;
        case 122: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 463: break;
        case 116: 
        case 118: 
        case 119: 
        case 247: 
        case 248: 
        case 251: 
        case 252: 
        case 325: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 464: break;
        case 111: 
        case 113: 
        case 114: 
        case 115: 
        case 239: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 465: break;
        case 106: 
        case 108: 
        case 109: 
        case 110: 
        case 227: 
        case 228: 
        case 231: 
        case 232: 
        case 322: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 466: break;
        case 103: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 467: break;
        case 98: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 468: break;
        case 96: 
          { 
	// begin embedded region: " + fEmbeddedHint
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	// JSP attribute value start - complex single quoted
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_SQUOTE, XML_TAG_ATTRIBUTE_VALUE_SQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 469: break;
        case 95: 
          { 
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_DQUOTE, XML_TAG_ATTRIBUTE_VALUE_DQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 470: break;
        case 92: 
        case 214: 
          { 
	// attr value
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 471: break;
        case 91: 
          { 
	// equals
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 472: break;
        case 90: 
          { 
	// attr name
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 473: break;
        case 86: 
        case 87: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 474: break;
        case 83: 
          { 
	// tag close
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);
        return XML_TAG_CLOSE;
 }
        case 475: break;
        case 77: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 476: break;
        case 76: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 477: break;
        case 74: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 478: break;
        case 41: 
        case 42: 
        case 46: 
        case 47: 
        case 48: 
        case 53: 
        case 54: 
        case 65: 
        case 69: 
        case 71: 
        case 72: 
        case 73: 
        case 75: 
        case 79: 
        case 84: 
        case 94: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 104: 
        case 105: 
        case 107: 
        case 112: 
        case 117: 
        case 124: 
        case 139: 
        case 143: 
        case 144: 
        case 172: 
        case 174: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 479: break;
        case 39: 
        case 88: 
        case 93: 
        case 97: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    return XML_TAG_OPEN;
 }
        case 480: break;
        case 29: 
        case 127: 
        case 128: 
        case 269: 
        case 332: 
        case 333: 
        case 365: 
        case 366: 
        case 393: 
        case 411: 
        case 421: 
        case 427: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 481: break;
        case 27: 
        case 120: 
        case 121: 
        case 256: 
        case 327: 
        case 328: 
        case 362: 
        case 363: 
        case 391: 
        case 410: 
        case 420: 
        case 426: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 482: break;
        case 16: 
        case 82: 
        case 85: 
          { 
	// inappropriate tag name
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 483: break;
        case 14: 
        case 78: 
        case 80: 
        case 81: 
        case 206: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 484: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 28: 
        case 55: 
        case 89: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 485: break;
        case 0: 
        case 38: 
        case 40: 
        case 43: 
        case 182: 
        case 184: 
        case 304: 
        case 305: 
        case 350: 
          { 
	if(Debug.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$

	final String text = yytext();
	assert text != null;

	// checks the smarty case
	return findTwigDelimiter(text, XML_CONTENT, twigLeftDelim, TWIG_OPEN, ST_TWIG_CONTENT);


 }
        case 486: break;
        case 44: 
        case 45: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedPostState = ST_CDATA_TEXT;
	fEmbeddedHint = XML_CDATA_TEXT;
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 487: break;
        case 49: 
        case 145: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 488: break;
        case 50: 
        case 51: 
        case 52: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 489: break;
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 191: 
        case 192: 
        case 193: 
        case 194: 
        case 314: 
        case 353: 
        case 354: 
        case 383: 
        case 384: 
        case 403: 
        case 416: 
        case 425: 
        case 431: 
        case 435: 
        case 436: 
        case 437: 
        case 438: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 490: break;
        case 61: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 491: break;
        case 62: 
        case 63: 
        case 64: 
          { 
		// block scan until close is found
	return doScan("?>", false, false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 492: break;
        case 66: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 493: break;
        case 67: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 494: break;
        case 68: 
        case 70: 
        case 199: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 495: break;
        case 132: 
        case 133: 
        case 134: 
          { 
	return doScanEndPhp(ProjectOptions.isSupportingAspTags(project), PHP_CONTENT, ST_PHP_CONTENT, ST_PHP_CONTENT);
 }
        case 496: break;
        case 135: 
        case 137: 
        case 140: 
        case 141: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 497: break;
        case 136: 
          { 
	// begin embedded region: " + fEmbeddedHint
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// tag inside of JSP attribute value start
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 498: break;
        case 138: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
 }
        case 499: break;
        case 142: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 500: break;
        case 146: 
        case 152: 
        case 154: 
        case 168: 
          { 

	return doScan(twigRightDelim, false, false, TWIG_CONTENT, ST_TWIG_CONTENT, ST_TWIG_CONTENT);
 }
        case 501: break;
        case 147: 
        case 148: 
        case 162: 
        case 167: 
          { 

	return TWIG_DELIMITER;
 }
        case 502: break;
        case 149: 
          { 

	return TWIG_WHITESPACE;
 }
        case 503: break;
        case 150: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 161: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 278: 
        case 279: 
        case 280: 
        case 281: 
        case 282: 
        case 283: 
        case 286: 
        case 289: 
        case 290: 
        case 291: 
        case 292: 
        case 334: 
        case 335: 
        case 336: 
        case 337: 
        case 338: 
        case 339: 
        case 340: 
        case 341: 
        case 342: 
        case 367: 
        case 368: 
        case 369: 
        case 370: 
        case 371: 
        case 372: 
        case 373: 
        case 374: 
        case 375: 
        case 394: 
        case 395: 
        case 396: 
        case 412: 
        case 413: 
        case 422: 
        case 428: 
          { 

	return TWIG_LABEL;
 }
        case 504: break;
        case 151: 
          { 

	yybegin(ST_TWIG_DOUBLE_QUOTES);
    return TWIG_DOUBLE_QUOTES_START;
 }
        case 505: break;
        case 153: 
          { 

    return TWIG_NUMBER;
 }
        case 506: break;
        case 169: 
        case 170: 
        case 297: 
        case 343: 
        case 344: 
        case 376: 
        case 377: 
        case 398: 
        case 414: 
        case 423: 
        case 429: 
          { 

    return TWIG_DOUBLE_QUOTES_CONTENT;
 }
        case 507: break;
        case 171: 
          { 

	yybegin(ST_TWIG_CONTENT);
    return TWIG_DOUBLE_QUOTES_END;
 }
        case 508: break;
        case 173: 
          { 

	yybegin(ST_TWIG_DOUBLE_QUOTES_SPECIAL);
    return TWIG_BACKTICK_START;
 }
        case 509: break;
        case 175: 
          { 

	yybegin(ST_TWIG_DOUBLE_QUOTES);
    return TWIG_BACKTICK_END;
 }
        case 510: break;
        case 176: 
          { 
	// end tag open
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 511: break;
        case 177: 
        case 178: 
        case 254: 
        case 255: 
        case 267: 
        case 268: 
        case 295: 
        case 296: 
        case 380: 
        case 390: 
        case 392: 
        case 397: 
          { 
	if(Debug.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	if ("<?".equals(yytext())
			&& !(ProjectOptions.useShortTags(project) && Character.isWhitespace(yy_buffer[yy_currentPos - 1]))) {
		yybegin(ST_PI);
		return XML_PI_OPEN;

	} else {
		// removeing trailing whitespaces for the php open
		String phpStart = yytext();
		int i = phpStart.length() - 1;
		while (i >= 0
				&& Character.isWhitespace(phpStart.charAt(i--))) {
			yypushback(1);
		}
		fStateStack.push(yystate());// YYINITIAL
		if (fStateStack.peek() == YYINITIAL) {
			// the simple case, just a regular scriptlet out in
			// content
			yybegin(ST_PHP_CONTENT);
			return PHP_OPEN;
		} else {
			if (yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
			else if (yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
			else if (yystate() == ST_CDATA_TEXT) {
				fEmbeddedPostState = ST_CDATA_TEXT;
				fEmbeddedHint = XML_CDATA_TEXT;
			}
			yybegin(ST_PHP_CONTENT);
			assembleEmbeddedContainer(PHP_OPEN, PHP_CLOSE);
			if (yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
				yybegin(ST_BLOCK_TAG_SCAN);
				return BLOCK_TEXT;
			}
			// required help for successive embedded regions
			if (yystate() == ST_XML_TAG_NAME) {
				fEmbeddedHint = XML_TAG_NAME;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			} else if ((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
				fEmbeddedPostState = ST_XML_EQUALS;
			} else if (yystate() == ST_XML_ATTRIBUTE_VALUE) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			return PROXY_CONTEXT;
		}
	}

 }
        case 512: break;
        case 179: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 513: break;
        case 185: 
          { 

	yybegin(ST_TWIG_CONTENT);
	return TWIG_STMT_OPEN;

 }
        case 514: break;
        case 190: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 515: break;
        case 195: 
          { 
		// ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 516: break;
        case 196: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 517: break;
        case 209: 
          { 
        yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	// empty tag close
    return XML_EMPTY_TAG_CLOSE;
 }
        case 518: break;
        case 210: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
 }
        case 519: break;
        case 212: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 520: break;
        case 221: 
        case 235: 
        case 243: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 521: break;
        case 270: 
          { 
	yybegin(fStateStack.pop());
	return PHP_CLOSE;
	
 }
        case 522: break;
        case 272: 
          { 
	// begin embedded region: " + fEmbeddedHint);//$NON-NLS-1$
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// Php attribute value start - end tag
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_END_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 523: break;
        case 275: 
          { 

    return TWIG_CONSTANT_ENCAPSED_STRING;
 }
        case 524: break;
        case 277: 
          { 
	//TODO: Figure out how to change the end delimiter, so that 
	//this.rightSmartyDelimiter is used (so it can be changed in config)
	
	
	yybegin(YYINITIAL);
	return TWIG_STMT_CLOSE;
 }
        case 525: break;
        case 284: 
        case 285: 
          { 

	return TWIG_KEYWORD;
 }
        case 526: break;
        case 288: 
          { 

	return TWIG_COMMENT;
 }
        case 527: break;
        case 293: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable1");

	return TWIG_VARIABLE;
 }
        case 528: break;
        case 294: 
          { 
	//TODO: Figure out how to change the end delimiter, so that 
	//this.rightSmartyDelimiter is used (so it can be changed in config)
	
	
	yybegin(YYINITIAL);
	return TWIG_CLOSE;
 }
        case 529: break;
        case 298: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable2");
		
    return TWIG_VARIABLE;
 }
        case 530: break;
        case 130: 
        case 131: 
          { 
		return doBlockTagScan();
	 }
        case 531: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
