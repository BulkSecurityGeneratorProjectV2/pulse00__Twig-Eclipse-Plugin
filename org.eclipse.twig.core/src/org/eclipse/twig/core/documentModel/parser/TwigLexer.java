/* The following code was generated by JFlex 1.4.1 on 6/16/11 9:33 PM */

/******************************************************************************* 
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/

package org.eclipse.twig.core.documentModel.parser;

import org.eclipse.php.internal.core.util.collections.IntHashtable;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/16/11 9:33 PM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
public class TwigLexer extends org.eclipse.twig.core.documentModel.parser.AbstractTwigLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_NOWDOC = 6;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_END_NOWDOC = 14;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\2\0\1\15\22\0\1\12\1\26\1\17\1\56"+
    "\1\16\1\32\1\33\1\55\2\13\1\30\1\25\1\13\1\4\1\2"+
    "\1\31\1\5\11\1\1\50\1\14\1\27\1\23\1\24\1\57\1\60"+
    "\1\40\1\61\1\7\1\42\1\3\1\44\2\10\1\43\2\10\1\45"+
    "\1\10\1\41\1\36\2\10\1\37\1\46\1\47\1\51\2\10\1\6"+
    "\2\10\1\53\1\20\1\54\1\35\1\10\1\21\1\40\1\61\1\7"+
    "\1\42\1\3\1\44\2\10\1\43\2\10\1\45\1\10\1\41\1\36"+
    "\2\10\1\37\1\46\1\47\1\51\2\10\1\6\2\10\1\22\1\34"+
    "\1\52\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\10\0\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\2\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\1\14\12\5\6\6\1\5\1\15\1\3"+
    "\1\16\1\5\1\6\1\2\1\17\1\20\2\17\1\2"+
    "\3\17\3\21\3\1\3\3\3\2\2\3\1\0\1\3"+
    "\1\22\1\23\1\22\1\24\1\25\1\24\1\26\1\25"+
    "\1\27\2\30\1\0\3\31\3\32\1\33\1\34\1\0"+
    "\1\3\2\4\1\35\3\6\1\0\1\36\2\0\1\17"+
    "\2\0\2\35\1\37\1\40\1\35\1\6\1\41\1\6"+
    "\1\42\3\6\1\43\2\0\1\44\4\0\1\45\2\46"+
    "\1\47\1\50\1\46\3\0\3\51\1\52\3\0\1\53"+
    "\2\1\2\46\1\54\2\2\5\0\1\55\4\0\1\56"+
    "\1\4\1\45\1\57\1\60\1\61\1\62\1\0\3\6"+
    "\1\4\2\0\1\6\1\63\2\6\1\0\1\64\1\65"+
    "\1\1\1\66\1\2\3\0\1\67\4\0\1\55\4\0"+
    "\1\70\1\0\3\6\1\71\3\0\1\72\1\0\1\73"+
    "\1\6\1\74\3\0\1\67\2\0\1\6\1\75\2\6"+
    "\2\76\3\0\1\77\1\0\1\6\1\100\1\101\4\0"+
    "\1\102\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\0"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\0\0\0\0\u047e\0\u04b0\0\0\0\0\0\0\0\u04e2"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\0\0\u0834\0\0\0\u0866\0\u0898\0\u08ca\0\u08fc\0\0"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\0\0\u0a5a"+
    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0ce4\0\0\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\0\0\u0dac\0\0\0\u0dde\0\0\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\0\0\u0ed8\0\0\0\u0f0a\0\u0866"+
    "\0\0\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\0\0\u1036"+
    "\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u04b0\0\u1130\0\0\0\u1162"+
    "\0\u1194\0\u05dc\0\u11c6\0\u11f8\0\u122a\0\u041a\0\u125c\0\u041a"+
    "\0\u128e\0\u041a\0\u12c0\0\u12f2\0\u1324\0\0\0\u0834\0\u1356"+
    "\0\u1388\0\u13ba\0\u13ec\0\u092e\0\u141e\0\u1450\0\u13ec\0\0"+
    "\0\0\0\0\0\u141e\0\u1482\0\u09f6\0\u14b4\0\u1482\0\0"+
    "\0\u14b4\0\0\0\u14e6\0\u0b86\0\u1518\0\u0b22\0\u154a\0\u157c"+
    "\0\u14e6\0\u1518\0\u0c4e\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\0\0\u170c\0\u173e\0\u1770\0\u0c80\0\0"+
    "\0\u17a2\0\u17d4\0\0\0\0\0\0\0\u1806\0\u1838\0\u186a"+
    "\0\u189c\0\u18ce\0\u10cc\0\u1900\0\u1932\0\u1964\0\u041a\0\u1996"+
    "\0\u19c8\0\u19fa\0\0\0\0\0\u1a2c\0\0\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1ac2\0\u1b26\0\u1b58\0\u1b8a\0\u0cb2\0\u1ac2"+
    "\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\0\0\u1c84\0\u1cb6\0\u1ce8"+
    "\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u041a"+
    "\0\u1e78\0\u041a\0\u1eaa\0\u1edc\0\u1f0e\0\0\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u041a\0\u1fd6\0\u2008\0\0\0\u203a\0\u206c\0\u209e"+
    "\0\u20d0\0\u041a\0\u2102\0\u2134\0\u041a\0\u041a\0\u2166\0\u1e14"+
    "\0\u2198\0\u21ca\0\u041a\0\u21fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\62\0\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\27\2\30\1\31\1\32\1\30\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\45\1\52\1\27\1\53"+
    "\1\54\1\27\1\55\1\56\2\27\1\57\1\60\1\27"+
    "\1\61\2\31\1\62\1\63\1\64\1\31\1\65\16\66"+
    "\1\67\1\70\1\71\1\66\1\72\37\66\16\73\1\74"+
    "\1\73\1\75\1\70\1\76\37\73\4\77\1\100\15\77"+
    "\1\101\37\77\3\102\1\103\2\102\3\103\1\104\3\102"+
    "\1\104\1\105\1\102\1\106\1\102\1\107\13\102\12\103"+
    "\1\102\1\103\7\102\1\103\3\110\1\111\2\110\3\111"+
    "\1\112\3\110\1\112\20\110\12\111\1\110\1\111\7\110"+
    "\1\111\3\113\1\114\2\113\3\114\1\115\3\113\1\116"+
    "\20\113\12\114\1\113\1\114\7\113\1\114\3\117\1\120"+
    "\1\121\1\117\3\120\2\30\2\117\1\30\20\117\12\120"+
    "\1\117\1\120\7\117\1\120\1\20\1\122\1\123\1\27"+
    "\1\123\1\124\3\27\2\125\2\123\1\125\1\126\1\123"+
    "\1\125\15\123\3\27\1\54\6\27\1\123\1\27\1\123"+
    "\1\31\1\127\2\125\2\123\1\27\30\130\1\131\31\130"+
    "\30\0\1\132\31\0\11\133\1\134\3\133\1\135\6\133"+
    "\1\136\5\133\1\137\24\133\1\140\2\133\11\141\2\142"+
    "\2\141\1\142\44\141\11\20\1\143\3\20\1\144\44\20"+
    "\1\0\1\21\1\145\1\146\1\0\1\21\55\0\1\145"+
    "\3\0\1\145\15\0\1\147\37\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\150\2\27\25\0\3\27\1\151\3\27"+
    "\1\152\2\27\1\0\1\27\7\0\1\27\4\0\1\147"+
    "\16\0\1\147\37\0\1\21\1\145\1\146\1\0\1\21"+
    "\1\153\54\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\52\11\27\1\0\1\27\7\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\12\27\1\0\1\27"+
    "\7\0\1\27\11\0\2\30\2\0\1\30\47\0\1\154"+
    "\2\0\3\154\25\0\12\154\1\0\1\154\7\0\1\154"+
    "\16\155\1\156\1\157\1\160\1\155\1\161\37\155\23\0"+
    "\1\162\1\147\60\0\1\147\1\162\60\0\1\147\1\0"+
    "\1\147\57\0\1\162\61\0\2\147\2\0\1\163\55\0"+
    "\1\147\61\0\1\147\4\0\1\164\1\63\53\0\1\147"+
    "\1\165\60\0\1\147\7\0\1\147\51\0\1\147\10\0"+
    "\1\147\26\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\27\1\166\10\27\1\0\1\27\7\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\3\27\1\167"+
    "\4\27\1\170\1\27\1\0\1\27\7\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\12\27\1\0"+
    "\1\171\7\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\172\3\27\1\0\1\27\7\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\1\173\1\27\1\174\7\27\1\0\1\27\7\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\25\0\1\27"+
    "\1\175\10\27\1\0\1\27\7\0\1\27\50\0\1\176"+
    "\11\0\20\177\1\200\34\177\1\157\4\177\24\0\1\201"+
    "\36\0\1\27\1\0\1\27\1\0\4\27\6\0\1\34"+
    "\7\0\1\202\6\0\12\27\1\0\1\27\3\0\1\177"+
    "\3\0\1\27\16\66\1\203\1\0\1\204\1\66\1\205"+
    "\42\66\1\206\2\66\3\206\5\66\1\207\1\210\1\204"+
    "\1\66\1\211\13\66\12\206\1\66\1\206\7\66\1\206"+
    "\100\66\1\212\1\210\1\204\1\66\1\213\37\66\16\73"+
    "\1\214\1\73\1\215\1\0\1\216\42\73\1\206\2\73"+
    "\3\206\5\73\1\217\1\73\1\215\1\220\1\211\13\73"+
    "\12\206\1\73\1\206\7\73\1\206\100\73\1\212\1\73"+
    "\1\215\1\220\1\221\37\73\24\0\1\222\53\0\1\212"+
    "\43\0\11\102\1\104\3\102\1\104\1\223\1\102\1\224"+
    "\1\102\1\225\40\102\1\103\1\102\1\103\1\102\4\103"+
    "\1\226\2\102\1\227\1\226\1\223\1\102\1\224\1\102"+
    "\1\225\13\102\12\103\1\102\1\103\7\102\1\103\3\102"+
    "\1\230\2\102\3\230\1\104\3\102\1\104\1\223\1\102"+
    "\1\224\1\102\1\225\13\102\12\230\1\102\1\230\7\102"+
    "\1\230\3\102\1\206\2\102\3\206\1\104\3\102\1\104"+
    "\1\231\1\102\1\224\1\102\1\211\13\102\12\206\1\102"+
    "\1\206\7\102\1\206\11\102\1\104\3\102\1\104\55\102"+
    "\1\104\3\102\1\104\1\212\1\102\1\224\1\102\1\232"+
    "\37\102\11\110\1\112\3\110\1\112\45\110\1\111\1\110"+
    "\1\111\1\110\4\111\1\233\2\110\1\234\1\233\20\110"+
    "\12\111\1\110\1\111\7\110\1\111\3\110\1\235\2\110"+
    "\3\235\1\112\3\110\1\112\20\110\12\235\1\110\1\235"+
    "\7\110\1\235\3\236\1\237\2\236\3\237\1\0\2\236"+
    "\1\240\1\0\20\236\12\237\1\236\1\237\7\236\1\237"+
    "\1\241\1\242\1\241\1\242\1\241\4\242\1\243\2\241"+
    "\1\244\1\243\20\241\12\242\1\241\1\242\7\241\1\242"+
    "\3\245\1\246\2\245\3\246\1\115\2\245\1\247\1\115"+
    "\20\245\12\246\1\245\1\246\7\245\1\246\1\0\1\120"+
    "\1\0\1\120\1\0\4\120\25\0\12\120\1\0\1\120"+
    "\7\0\1\120\24\0\1\250\36\0\1\122\3\0\1\122"+
    "\55\0\1\251\3\0\1\251\1\153\56\0\1\252\2\0"+
    "\3\252\25\0\12\252\1\0\1\252\7\0\1\252\30\130"+
    "\1\0\31\130\31\0\1\253\61\0\1\254\30\0\11\133"+
    "\1\134\3\133\1\134\6\133\1\134\5\133\1\134\24\133"+
    "\1\134\2\133\11\0\1\255\74\0\1\256\46\0\2\142"+
    "\2\0\1\142\47\0\1\257\2\0\3\257\25\0\12\257"+
    "\1\0\1\257\7\0\1\257\3\0\1\257\2\0\3\257"+
    "\1\143\24\0\12\257\1\0\1\257\7\0\1\257\1\0"+
    "\1\145\1\0\1\146\1\0\1\145\55\0\1\251\2\0"+
    "\2\251\17\0\1\251\35\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\11\27\1\260\1\0\1\27\7\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\25\0\4\27"+
    "\1\261\5\27\1\0\1\27\7\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\4\27\25\0\10\27\1\262\1\27"+
    "\1\0\1\27\7\0\1\27\1\0\1\263\1\0\1\263"+
    "\1\0\1\263\1\0\1\263\30\0\1\263\1\0\1\263"+
    "\1\0\1\263\14\0\1\263\1\0\1\154\1\0\1\154"+
    "\1\0\4\154\25\0\12\154\1\0\1\154\7\0\1\154"+
    "\3\155\1\0\2\155\3\0\5\155\1\156\1\157\1\160"+
    "\1\155\1\0\13\155\12\0\1\155\1\0\7\155\1\0"+
    "\100\155\1\0\1\157\1\160\1\155\1\161\37\155\23\0"+
    "\1\147\3\0\1\264\62\0\1\265\42\0\2\165\2\0"+
    "\1\165\45\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\4\27\1\166\5\27\1\0\1\27\7\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\7\27\1\266"+
    "\2\27\1\0\1\27\7\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\27\1\267\10\27\1\0"+
    "\1\27\7\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\7\27\1\270\2\27\1\0\1\27\7\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\12\27\1\0\1\271\7\0\1\27\62\177\11\0\2\201"+
    "\2\0\1\201\73\0\1\272\32\0\3\66\1\0\2\66"+
    "\3\0\5\66\1\207\1\210\1\204\1\66\1\0\13\66"+
    "\12\0\1\66\1\0\7\66\1\0\16\66\1\0\1\210"+
    "\1\204\1\66\1\213\37\66\1\0\1\206\1\0\1\206"+
    "\1\0\4\206\25\0\12\206\1\0\1\206\1\0\1\273"+
    "\5\0\1\206\3\73\1\0\2\73\3\0\5\73\1\217"+
    "\1\73\1\215\1\220\1\0\13\73\12\0\1\73\1\0"+
    "\7\73\1\0\16\73\1\0\1\73\1\215\1\220\1\221"+
    "\37\73\3\102\1\0\2\102\3\0\1\104\3\102\1\104"+
    "\1\231\1\102\1\224\1\102\1\0\13\102\12\0\1\102"+
    "\1\0\7\102\1\0\11\102\1\104\3\102\1\104\1\0"+
    "\1\102\1\224\1\102\1\232\50\102\1\226\3\102\1\226"+
    "\1\223\1\102\1\224\1\102\1\225\40\102\1\230\1\102"+
    "\1\230\1\102\4\230\1\274\2\102\1\275\1\274\1\223"+
    "\1\102\1\224\1\102\1\225\13\102\12\230\1\102\1\230"+
    "\7\102\1\230\11\110\1\233\3\110\1\233\45\110\1\235"+
    "\1\110\1\235\1\110\4\235\1\276\2\110\1\277\1\276"+
    "\20\110\12\235\1\110\1\235\7\110\1\235\3\247\1\300"+
    "\2\247\3\300\1\301\3\247\1\301\20\247\12\300\1\247"+
    "\1\300\7\247\1\300\1\247\1\302\1\247\1\300\1\247"+
    "\1\302\3\300\1\303\2\247\1\304\1\303\20\247\12\300"+
    "\1\247\1\300\7\247\1\300\3\240\1\305\2\240\3\305"+
    "\1\0\3\240\1\0\20\240\12\305\1\240\1\305\7\240"+
    "\1\305\3\306\1\307\2\306\3\307\1\303\3\306\1\303"+
    "\20\306\12\307\1\306\1\307\7\306\1\307\1\306\1\307"+
    "\1\306\1\307\1\306\4\307\1\310\2\306\1\311\1\310"+
    "\20\306\12\307\1\306\1\307\7\306\1\307\11\312\1\243"+
    "\3\312\1\243\44\312\3\245\1\313\2\245\3\313\1\301"+
    "\2\245\1\247\1\301\20\245\12\313\1\245\1\313\7\245"+
    "\1\313\1\314\1\246\1\314\1\246\1\314\4\246\1\310"+
    "\2\314\1\311\1\310\20\314\12\246\1\314\1\246\7\314"+
    "\1\246\1\0\1\251\3\0\1\251\55\0\1\252\1\0"+
    "\1\252\1\0\4\252\25\0\12\252\1\0\1\252\7\0"+
    "\1\252\11\0\2\256\2\0\1\256\45\0\1\257\1\0"+
    "\1\257\1\0\4\257\1\315\2\0\1\316\1\315\20\0"+
    "\12\257\1\0\1\257\7\0\1\257\1\0\1\27\1\0"+
    "\1\317\1\0\4\27\25\0\12\27\1\0\1\27\7\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\5\27\1\320\1\321\3\27\1\0\1\27\7\0\1\27"+
    "\1\0\1\27\1\0\1\322\1\0\4\27\25\0\12\27"+
    "\1\0\1\27\7\0\1\27\3\0\1\323\2\0\3\323"+
    "\1\0\1\264\4\0\1\324\16\0\12\323\1\0\1\323"+
    "\3\0\1\325\3\0\1\323\11\0\2\326\2\0\1\326"+
    "\40\0\1\327\4\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\7\27\1\330\2\27\1\0\1\27\7\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\25\0\10\27"+
    "\1\331\1\27\1\0\1\27\7\0\1\27\1\0\1\27"+
    "\1\0\1\332\1\0\4\27\25\0\12\27\1\0\1\27"+
    "\7\0\1\27\27\0\1\264\32\0\11\102\1\274\3\102"+
    "\1\274\1\223\1\102\1\224\1\102\1\225\37\102\11\110"+
    "\1\276\3\110\1\276\44\110\1\236\1\333\1\236\1\333"+
    "\1\236\4\333\1\243\2\236\1\334\1\243\20\236\12\333"+
    "\1\236\1\333\7\236\1\333\11\335\1\0\2\335\2\0"+
    "\44\335\1\236\1\237\1\236\1\237\1\236\4\237\1\336"+
    "\2\236\1\337\1\336\20\236\12\237\1\236\1\237\7\236"+
    "\1\237\3\236\1\237\2\236\3\237\1\336\2\236\1\240"+
    "\1\336\20\236\12\237\1\236\1\237\7\236\1\237\1\240"+
    "\1\305\1\240\1\305\1\240\4\305\1\336\2\240\1\337"+
    "\1\336\20\240\12\305\1\240\1\305\7\240\1\305\11\241"+
    "\1\336\2\241\1\312\1\336\55\241\1\243\2\241\1\312"+
    "\1\243\44\241\11\312\1\336\3\312\1\336\44\312\1\245"+
    "\1\313\1\245\1\313\1\245\4\313\1\310\2\245\1\340"+
    "\1\310\20\245\12\313\1\245\1\313\7\245\1\313\3\314"+
    "\1\246\2\314\3\246\1\303\2\314\1\306\1\303\20\314"+
    "\12\246\1\314\1\246\7\314\1\246\11\0\1\315\3\0"+
    "\1\315\45\0\1\27\1\0\1\27\1\0\4\27\25\0"+
    "\3\27\1\341\6\27\1\0\1\27\7\0\1\27\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\6\27\1\342"+
    "\3\27\1\0\1\27\7\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\343\11\27\1\0\1\27"+
    "\7\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\5\27\1\344\4\27\1\0\1\27\7\0\1\27"+
    "\1\0\1\323\1\0\1\323\1\0\4\323\1\345\3\0"+
    "\1\346\20\0\12\323\1\0\1\323\7\0\1\323\3\0"+
    "\1\347\2\0\3\347\25\0\12\347\1\0\1\347\7\0"+
    "\1\347\3\0\1\350\2\0\3\350\25\0\12\350\1\0"+
    "\1\350\7\0\1\350\11\0\2\326\2\0\1\326\124\0"+
    "\1\351\2\0\1\27\1\0\1\352\1\0\4\27\25\0"+
    "\12\27\1\0\1\27\7\0\1\27\1\247\1\300\1\247"+
    "\1\300\1\247\4\300\1\310\2\247\1\340\1\310\20\247"+
    "\12\300\1\247\1\300\7\247\1\300\3\240\1\305\2\240"+
    "\3\305\1\243\3\240\1\243\20\240\12\305\1\240\1\305"+
    "\7\240\1\305\3\301\1\353\2\301\3\353\25\301\12\353"+
    "\1\301\1\353\7\301\1\353\3\240\1\305\2\240\3\305"+
    "\1\336\3\240\1\336\20\240\12\305\1\240\1\305\7\240"+
    "\1\305\3\236\1\237\2\236\3\237\1\243\2\236\1\240"+
    "\1\243\20\236\12\237\1\236\1\237\7\236\1\237\1\0"+
    "\1\27\1\0\1\27\1\0\4\27\25\0\4\27\1\354"+
    "\5\27\1\0\1\27\7\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\25\0\1\27\1\355\10\27\1\0"+
    "\1\27\7\0\1\27\1\0\1\27\1\0\1\27\1\0"+
    "\4\27\25\0\6\27\1\356\3\27\1\0\1\27\7\0"+
    "\1\27\11\0\1\345\51\0\1\347\1\0\1\347\1\0"+
    "\4\347\6\0\1\357\16\0\12\347\1\0\1\347\7\0"+
    "\1\347\1\0\1\350\1\0\1\350\1\0\4\350\25\0"+
    "\12\350\1\0\1\350\3\0\1\357\3\0\1\350\25\0"+
    "\1\360\34\0\1\335\1\361\1\335\1\361\1\335\4\361"+
    "\1\243\2\335\1\362\1\243\20\335\12\361\1\335\1\361"+
    "\7\335\1\361\1\0\1\27\1\0\1\27\1\0\4\27"+
    "\25\0\10\27\1\363\1\27\1\0\1\27\7\0\1\27"+
    "\11\0\1\345\3\0\1\346\44\0\1\301\1\353\1\301"+
    "\1\353\1\301\4\353\1\310\2\301\1\364\1\310\20\301"+
    "\12\353\1\301\1\353\7\301\1\353\11\0\1\243\3\0"+
    "\1\243\44\0\11\335\1\243\2\335\1\0\1\243\44\335";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\4\0\2\1\10\0\1\11\10\1\2\11\2\1"+
    "\3\11\21\1\1\11\1\1\1\11\4\1\1\11\6\1"+
    "\1\11\15\1\1\0\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\0\3\1\1\11\3\1"+
    "\1\0\1\1\2\0\1\11\2\0\14\1\1\11\2\0"+
    "\1\1\4\0\2\1\3\11\1\1\3\0\1\1\1\11"+
    "\1\1\1\11\3\0\10\1\5\0\1\11\4\0\1\11"+
    "\2\1\3\11\1\1\1\0\4\1\2\0\4\1\1\0"+
    "\2\11\1\1\1\11\1\1\3\0\1\1\4\0\1\1"+
    "\4\0\1\11\1\0\4\1\3\0\1\1\1\0\3\1"+
    "\3\0\1\11\2\0\4\1\1\11\1\1\3\0\1\1"+
    "\1\0\3\1\4\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public TwigLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_END_HEREDOC || state == ST_PHP_NOWDOC || state == ST_PHP_END_NOWDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

	protected void pushBack(int i) {
		yypushback(i);
	}

	// A pool of states. To avoid creation of a new state on each createMemento.
	private static final IntHashtable lexerStates = new IntHashtable(100);
	
	protected IntHashtable getLexerStates() {
		return lexerStates;
	}

 // End user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return PHP_SEMICOLON;
          }
        case 67: break;
        case 11: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 68: break;
        case 39: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHP_TOKEN;
          }
        case 69: break;
        case 22: 
          { yypushback(1);
	popState();
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 70: break;
        case 42: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHP_OBJECT_OPERATOR;
          }
        case 71: break;
        case 21: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return UNKNOWN_TOKEN;
          }
        case 72: break;
        case 50: 
          { if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHP_LINE_COMMENT;
          }
        case 73: break;
        case 43: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 74: break;
        case 53: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	
    	if ((label_len - heredoc_len-2) >= 0 && yytext().charAt(label_len - heredoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(heredoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 75: break;
        case 19: 
          { popState();
    return PHP_STRING;
          }
        case 76: break;
        case 48: 
          { popState();
    return PHPDOC_COMMENT_END;
          }
        case 77: break;
        case 36: 
          { return PHP_CLOSETAG;
          }
        case 78: break;
        case 34: 
          { return PHP_IF;
          }
        case 79: break;
        case 59: 
          { return  PHP_KEYWORD;
          }
        case 80: break;
        case 45: 
          { int label_len = yylength() - 1;
	int startIndex = 0;
	String yytext = yytext();
	if (yytext.charAt(label_len - 1) == ';') {
		label_len--;
	}
	while (yytext.charAt(startIndex) == '\r'
			|| yytext.charAt(startIndex) == '\n') {
		startIndex++;
	}

	if (label_len > heredoc_len
			&& yytext.substring(startIndex, label_len).equals(
					heredoc)) {
		heredoc = null;
		heredoc_len = 0;
		yybegin(ST_PHP_IN_SCRIPTING);
		return PHP_HEREDOC_TAG;
	} else {
		yybegin(ST_PHP_HEREDOC);
		return PHP_CONSTANT_ENCAPSED_STRING;
	}
          }
        case 81: break;
        case 41: 
          { yypushback(1);
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 82: break;
        case 38: 
          { yypushback(1);
    return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 83: break;
        case 20: 
          { /* Offset could be treated as a long */
	return PHP_NUMBER;
          }
        case 84: break;
        case 4: 
          { return PHP_NUMBER;
          }
        case 85: break;
        case 6: 
          { return  PHP_STRING;
          }
        case 86: break;
        case 56: 
          { nowdoc = null;
	nowdoc_len = 0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHP_HEREDOC_TAG;
          }
        case 87: break;
        case 27: 
          { return UNKNOWN_TOKEN;
          }
        case 88: break;
        case 23: 
          { popState();
	return PHP_TOKEN;
          }
        case 89: break;
        case 24: 
          { return PHP_COMMENT;
          }
        case 90: break;
        case 28: 
          { popState();return WHITESPACE;
          }
        case 91: break;
        case 2: 
          { return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 92: break;
        case 26: 
          { return PHP_LINE_COMMENT;
          }
        case 93: break;
        case 30: 
          { return PHP_VARIABLE;
          }
        case 94: break;
        case 47: 
          { popState();
    return PHP_COMMENT_END;
          }
        case 95: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 96: break;
        case 52: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHP_VARIABLE;
          }
        case 97: break;
        case 61: 
          { return PHP_ENDIF;
          }
        case 98: break;
        case 44: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHP_HEREDOC_TAG;
    } else {
        return PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 99: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 100: break;
        case 66: 
          { return PHP_EXTENDS;
          }
        case 101: break;
        case 49: 
          { popState();
    return PHP_LINE_COMMENT;
          }
        case 102: break;
        case 1: 
          { if(heredoc!=null&&yytext().startsWith(heredoc)){
		String text = yytext();
		if(heredoc_len < text.length() && (text.charAt(heredoc_len) == '\r'
			|| text.charAt(heredoc_len) == '\n')){
			yypushback(yylength()-heredoc_len-1);
	        heredoc=null;
	        heredoc_len=0;
	        yybegin(ST_PHP_IN_SCRIPTING);
	        return PHP_HEREDOC_TAG;
		}
	}
	return PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 103: break;
        case 14: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHP_LINE_COMMENT;
          }
        case 104: break;
        case 64: 
          { return PHP_ENDFOR;
          }
        case 105: break;
        case 18: 
          { yypushback(1);
    popState();
          }
        case 106: break;
        case 57: 
          { return PHP_ELSE;
          }
        case 107: break;
        case 55: 
          { yybegin(ST_PHP_HEREDOC);
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 108: break;
        case 35: 
          { return PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 109: break;
        case 65: 
          { return PHP_ELSEIF;
          }
        case 110: break;
        case 25: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHP_LINE_COMMENT;
          }
        case 111: break;
        case 58: 
          { pushState(ST_PHP_DOC_COMMENT);
    return PHPDOC_COMMENT_START;
          }
        case 112: break;
        case 7: 
          { return WHITESPACE;
          }
        case 113: break;
        case 5: 
          { return PHP_TOKEN;
          }
        case 114: break;
        case 17: 
          { yypushback(1);
        popState();
          }
        case 115: break;
        case 62: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    
    int hereOrNowDoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        hereOrNowDoc_len--;
    }
    String hereOrNowDoc = yytext().substring(startString,hereOrNowDoc_len+startString);
    if (hereOrNowDoc.charAt(0) == '\'') {
    	nowdoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	nowdoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_NOWDOC);
    }
    else if (hereOrNowDoc.charAt(0) == '"') {
    	heredoc = hereOrNowDoc.substring(1, hereOrNowDoc_len-1);
    	heredoc_len = hereOrNowDoc_len - 2;
    	yybegin(ST_PHP_HEREDOC);
    } else {
    	heredoc = hereOrNowDoc;
    	heredoc_len = hereOrNowDoc_len;
    	yybegin(ST_PHP_HEREDOC);
    }
    return PHP_HEREDOC_TAG;
          }
        case 116: break;
        case 40: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHP_CURLY_OPEN;
          }
        case 117: break;
        case 13: 
          { if (!phpStack.isEmpty()) {
        popState();
    }
    return  PHP_CURLY_CLOSE;
          }
        case 118: break;
        case 60: 
          { return PHP_TRUE;
          }
        case 119: break;
        case 15: 
          { return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 120: break;
        case 31: 
          { pushState(ST_PHP_COMMENT);
    return PHP_COMMENT_START;
          }
        case 121: break;
        case 46: 
          { return PHP_OBJECT_OPERATOR;
          }
        case 122: break;
        case 16: 
          { popState();
    return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 123: break;
        case 33: 
          { return PHP_AS;
          }
        case 124: break;
        case 54: 
          { int label_len = yylength() - 1;

	if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
    	//nowdoc = null;
    	//nowdoc_len = 0;
		//yypushback(1);
		//yybegin(ST_PHP_END_NOWDOC);
		
    	if ((label_len - nowdoc_len-2) >= 0 && yytext().charAt(label_len - nowdoc_len-2)=='\r') {
        	label_len = label_len-2;
    	} else {
        	label_len--;
    	}
    	yypushback(nowdoc_len + (yylength() - label_len));
    	
        yybegin(ST_PHP_END_NOWDOC);
	}
	return PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 125: break;
        case 37: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHP_VARIABLE;
          }
        case 126: break;
        case 10: 
          { return PHP_NS_SEPARATOR;
          }
        case 127: break;
        case 12: 
          { return PHP_CURLY_OPEN;
          }
        case 128: break;
        case 29: 
          { return PHP_OPERATOR;
          }
        case 129: break;
        case 51: 
          { return PHP_FOR;
          }
        case 130: break;
        case 63: 
          { return PHP_FALSE;
          }
        case 131: break;
        case 32: 
          { if (asp_tags) {
	    return PHP_CLOSETAG;
	}
	return UNKNOWN_TOKEN;
          }
        case 132: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
