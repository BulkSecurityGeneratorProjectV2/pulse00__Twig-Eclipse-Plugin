/*******************************************************************************
 * This file is part of the Twig eclipse plugin.
 * 
 * (c) Robert Gruendler <r.gruendler@gmail.com>
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 ******************************************************************************/

/* ----------------------Preliminary Declarations Section--------------------*/

package com.dubture.twig.core.parser.ast;
   
import java.util.LinkedList;
import java.util.List;

import com.dubture.twig.core.parser.ast.node.TwigCallExpression;
import com.dubture.twig.core.parser.ast.node.TwigModuleDeclaration;
import com.dubture.twig.core.parser.ast.node.BlockStatement;
import com.dubture.twig.core.parser.ast.node.Variable;
import com.dubture.twig.core.parser.ast.node.PrintStatement;
import com.dubture.twig.core.parser.ast.node.StringLiteral;
import com.dubture.twig.core.parser.ast.node.InLineHtml;

import org.eclipse.dltk.ast.expressions.Expression;
import org.eclipse.dltk.ast.statements.Statement;





/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
       
    }
:};
   

terminal        TWIG_VAR_OPEN;
terminal        TWIG_VAR_CLOSE;
terminal        TWIG_STMT_OPEN;
terminal        TWIG_STMT_CLOSE;
terminal		T_OPEN_PARENTHESE;
terminal		T_CLOSE_PARENTHESE;
terminal		T_INLINE_HTML;

terminal String T_VARIABLE;
terminal String T_CONSTANT_ENCAPSED_STRING;
terminal String T_BLOCK_NAME;

non terminal TwigModuleDeclaration module;
non terminal BlockStatement block;
non terminal PrintStatement var;
non terminal List top_statement_list;
non terminal Statement top_statement;
non terminal List inner_statement_list;
non terminal Statement inner_statement;
non terminal Statement statement;
non terminal TwigCallExpression function;


precedence left TWIG_VAR_OPEN, TWIG_STMT_OPEN;

   
/* ----------------------------Grammar Section-------------------- */
   
   
	module				::= top_statement_list:sList
                 		{:                 
                    		TwigModuleDeclaration module = parser.getModuleDeclaration();
                    		module.setStatements(sList);
                    		RESULT = module;
                 		:}
		                ;
                 
    top_statement_list	::= top_statement_list:sList top_statement:statement
    					{:
							if(statement != null) {
								sList.add(statement);
							}
							RESULT = sList;
						:}						
						| /* empty */
						{: 
							RESULT = new LinkedList();
						:}
						;
												
	top_statement		::= statement:statement
						{:
							RESULT = statement;
						:}
						| var:v
						{:
							RESULT = v; 
						:}
						| block:b
						{:
							RESULT = b; 
						:}						
						;
	    					
	var					::= TWIG_VAR_OPEN:start inner_statement_list:inner TWIG_VAR_CLOSE:end
						{:
							PrintStatement stmt = new PrintStatement(startleft, endright, inner);
							RESULT = stmt;
						:}
						;
	                 
	block     			::= TWIG_STMT_OPEN:start T_BLOCK_NAME:name inner_statement_list:inner TWIG_STMT_CLOSE:end
		                {:
		                	BlockStatement stmt = new BlockStatement(startleft, endright, name, inner);
		                    RESULT = stmt;
		                :}
		                ;
                 
    inner_statement_list ::= inner_statement_list:statementList inner_statement:statement
					    {:
							// Ignore null statements
							if(statement != null) {
							    statementList.add(statement);
							}
							RESULT = statementList;
					    :}    
					    | /* empty */
					    {: 
					        RESULT = new LinkedList(); 
					    :}
					    ;                                 
                
    inner_statement 	::=statement:statement
					    {: 
					        RESULT = statement; 
					    :}
					    | function:function
					    {:
					    	RESULT = function;
					    :}
					    ;
    
    function			::= T_VARIABLE:id T_OPEN_PARENTHESE:open inner_statement_list:stmt T_CLOSE_PARENTHESE:close
    					{:
    						RESULT = new TwigCallExpression(openleft, closeright, id, stmt);
    					:}
    					;
    
    statement			::= T_VARIABLE:stmt
					    {: 
					        RESULT = new Variable(stmtleft, stmtright, stmt); 
					    :}
					    | T_CONSTANT_ENCAPSED_STRING:string
					    {:
					    	RESULT = new StringLiteral(stringleft, stringright, string);
					    :}
					    | T_INLINE_HTML:html
					    {:
					    	RESULT = new InLineHtml(htmlleft, htmlright);
					    :}
					    ;
    