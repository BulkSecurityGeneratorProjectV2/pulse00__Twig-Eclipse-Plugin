/* The following code was generated by JFlex 1.2.2 on 1/3/12 8:59 AM */

/********************************************************************************
 * Copyright (c) 2006 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *******************************************************************************/
/*nlsXXX*/
package com.dubture.twig.core.documentModel.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;

import com.dubture.twig.core.documentModel.parser.regions.TwigScriptRegion;
import com.dubture.twig.core.util.Debug;



/**
 * This class is a scanner generated by 
 * <a href="http://www.informatik.tu-muenchen.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 1/3/12 8:59 AM from the specification file
 * <tt>file:/Users/sobert/Documents/workspaces/main/Twig-Eclipse-Plugin/com.dubture.twig.core/Resources/parserTools/highlighting/TwigTokenizer.jflex</tt>
 */
public class TwigTokenizer implements BlockTokenizer, DOMRegionContext, TwigRegionContext {
 
  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_BLOCK_TAG_SCAN = 30;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 32;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 19;
  final public static int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 31;
  final public static int ST_XML_ATTRIBUTE_NAME = 17;
  final public static int ST_TWIG_DOUBLE_QUOTES = 36;
  final public static int ST_XML_EQUALS = 18;
  final public static int YYINITIAL = 0;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  final public static int ST_XML_ELEMENT_DECLARATION = 26;
  final public static int ST_XML_DECLARATION_CLOSE = 21;
  final public static int ST_TWIG_CONTENT = 34;
  final public static int ST_XML_DOCTYPE_DECLARATION = 22;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  final public static int ST_XML_ATTLIST_DECLARATION = 28;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_ABORT_EMBEDDED = 15;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_TWIG_DOUBLE_QUOTES_SPECIAL = 37;
  final public static int ST_TWIG_COMMENT = 35;
  final public static int ST_BLOCK_TAG_INTERNAL_SCAN = 33;
  final public static int ST_PI = 5;
  final public static int ST_XML_DECLARATION = 20;
  final public static int ST_XML_TAG_NAME = 16;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\25\2\0\1\16\22\0\1\16\1\24\1\12\1\26"+
    "\1\76\1\21\1\13\1\14\1\23\1\23\1\20\1\20\1\20\1\7"+
    "\1\6\1\3\12\17\1\11\1\65\1\1\1\47\1\2\1\4\1\20"+
    "\1\33\1\66\1\31\1\32\1\52\1\63\1\40\1\40\1\44\1\40"+
    "\1\40\1\60\1\61\1\46\1\45\1\51\1\40\1\42\1\62\1\34"+
    "\1\64\2\40\1\57\1\50\1\40\1\30\1\0\1\22\1\0\1\10"+
    "\1\77\1\54\1\66\1\67\1\55\1\41\1\63\1\40\1\75\1\44"+
    "\2\40\1\37\1\36\1\46\1\45\1\51\1\40\1\42\1\43\1\53"+
    "\1\64\1\40\1\40\1\35\1\56\1\40\1\15\1\0\1\27\1\0"+
    "\70\72\1\74\10\72\27\73\1\72\37\73\1\72\10\73\62\70\2\0"+
    "\13\70\2\0\10\70\1\0\65\70\1\0\104\70\11\0\44\70\3\0"+
    "\2\70\4\0\36\70\70\0\131\70\22\0\7\70\16\0\2\71\56\0"+
    "\106\71\32\0\2\71\44\0\1\70\1\71\3\70\1\0\1\70\1\0"+
    "\24\70\1\0\54\70\1\0\7\70\3\0\1\70\1\0\1\70\1\0"+
    "\1\70\1\0\1\70\1\0\22\70\15\0\14\70\1\0\102\70\1\0"+
    "\14\70\1\0\44\70\1\0\4\71\11\0\65\70\2\0\2\70\2\0"+
    "\2\70\3\0\34\70\2\0\10\70\2\0\2\70\67\0\46\70\2\0"+
    "\1\70\7\0\46\70\12\0\21\71\1\0\27\71\1\0\3\71\1\0"+
    "\1\71\1\0\2\71\1\0\1\71\13\0\33\70\5\0\3\70\56\0"+
    "\32\70\5\0\1\71\12\70\10\71\15\0\12\71\6\0\1\71\107\70"+
    "\2\0\5\70\1\0\17\70\1\0\4\70\1\0\1\70\17\71\2\70"+
    "\2\71\1\0\4\71\2\0\12\71\u0207\0\3\71\1\0\65\70\2\0"+
    "\1\71\1\70\20\71\3\0\4\71\3\0\12\70\2\71\2\0\12\71"+
    "\21\0\3\71\1\0\10\70\2\0\2\70\2\0\26\70\1\0\7\70"+
    "\1\0\1\70\3\0\4\70\2\0\1\71\1\0\7\71\2\0\2\71"+
    "\2\0\3\71\11\0\1\71\4\0\2\70\1\0\3\70\2\71\2\0"+
    "\12\71\2\70\20\0\1\71\2\0\6\70\4\0\2\70\2\0\26\70"+
    "\1\0\7\70\1\0\2\70\1\0\2\70\1\0\2\70\2\0\1\71"+
    "\1\0\5\71\4\0\2\71\2\0\3\71\13\0\4\70\1\0\1\70"+
    "\7\0\12\71\2\71\3\70\14\0\3\71\1\0\7\70\1\0\1\70"+
    "\1\0\3\70\1\0\26\70\1\0\7\70\1\0\2\70\1\0\5\70"+
    "\2\0\1\71\1\70\10\71\1\0\3\71\1\0\3\71\22\0\1\70"+
    "\5\0\12\71\21\0\3\71\1\0\10\70\2\0\2\70\2\0\26\70"+
    "\1\0\7\70\1\0\2\70\2\0\4\70\2\0\1\71\1\70\6\71"+
    "\3\0\2\71\2\0\3\71\10\0\2\71\4\0\2\70\1\0\3\70"+
    "\4\0\12\71\22\0\2\71\1\0\6\70\3\0\3\70\1\0\4\70"+
    "\3\0\2\70\1\0\1\70\1\0\2\70\3\0\2\70\3\0\3\70"+
    "\3\0\10\70\1\0\3\70\4\0\5\71\3\0\3\71\1\0\4\71"+
    "\11\0\1\71\17\0\11\71\21\0\3\71\1\0\10\70\1\0\3\70"+
    "\1\0\27\70\1\0\12\70\1\0\5\70\4\0\7\71\1\0\3\71"+
    "\1\0\4\71\7\0\2\71\11\0\2\70\4\0\12\71\22\0\2\71"+
    "\1\0\10\70\1\0\3\70\1\0\27\70\1\0\12\70\1\0\5\70"+
    "\4\0\7\71\1\0\3\71\1\0\4\71\7\0\2\71\7\0\1\70"+
    "\1\0\2\70\4\0\12\71\22\0\2\71\1\0\10\70\1\0\3\70"+
    "\1\0\27\70\1\0\20\70\4\0\6\71\2\0\3\71\1\0\4\71"+
    "\11\0\1\71\10\0\2\70\4\0\12\71\221\0\56\70\1\0\1\70"+
    "\1\71\2\70\7\71\5\0\6\70\1\71\10\71\1\0\12\71\47\0"+
    "\2\70\1\0\1\70\2\0\2\70\1\0\1\70\2\0\1\70\6\0"+
    "\4\70\1\0\7\70\1\0\3\70\1\0\1\70\1\0\1\70\2\0"+
    "\2\70\1\0\2\70\1\0\1\70\1\71\2\70\6\71\1\0\2\71"+
    "\1\70\2\0\5\70\1\0\1\71\1\0\6\71\2\0\12\71\76\0"+
    "\2\71\6\0\12\71\13\0\1\71\1\0\1\71\1\0\1\71\4\0"+
    "\2\71\10\70\1\0\41\70\7\0\24\71\1\0\6\71\4\0\6\71"+
    "\1\0\1\71\1\0\25\71\3\0\7\71\1\0\1\71\346\0\46\70"+
    "\12\0\47\70\11\0\1\70\1\0\2\70\1\0\3\70\1\0\1\70"+
    "\1\0\2\70\1\0\5\70\51\0\1\70\1\0\1\70\1\0\1\70"+
    "\13\0\1\70\1\0\1\70\1\0\1\70\3\0\2\70\3\0\1\70"+
    "\5\0\3\70\1\0\1\70\1\0\1\70\1\0\1\70\1\0\1\70"+
    "\3\0\2\70\3\0\2\70\1\0\1\70\50\0\1\70\11\0\1\70"+
    "\2\0\1\70\2\0\2\70\7\0\2\70\1\0\1\70\1\0\7\70"+
    "\50\0\1\70\4\0\1\70\10\0\1\70\u0c06\0\234\70\4\0\132\70"+
    "\6\0\26\70\2\0\6\70\2\0\46\70\2\0\6\70\2\0\10\70"+
    "\1\0\1\70\1\0\1\70\1\0\1\70\1\0\37\70\2\0\65\70"+
    "\1\0\7\70\1\0\1\70\3\0\3\70\1\0\7\70\3\0\4\70"+
    "\2\0\6\70\4\0\15\70\5\0\3\70\1\0\7\70\323\0\15\71"+
    "\4\0\1\71\104\0\1\70\3\0\2\70\2\0\1\70\121\0\3\70"+
    "\u0e82\0\1\71\1\0\1\70\31\0\11\70\6\71\1\0\5\71\13\0"+
    "\124\70\4\0\2\71\2\0\2\71\2\0\132\70\1\0\3\71\6\0"+
    "\50\70\u1cd3\0\u51a6\70\u0c5a\0\u2ba4\70\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    64,   128,   192,   256,   320,   384,   448,   512,   576, 
      640,   704,   768,   832,   896,   960,  1024,  1088,  1152,  1216, 
     1280,  1344,  1408,  1472,  1536,  1600,  1664,  1728,  1792,  1856, 
     1920,  1984,  2048,  2112,  2176,  2240,  2304,  2368,  2432,  2496, 
     2560,  2624,  2688,  2752,  2816,  2880,  2944,  2816,  2880,  2944, 
     3008,  2816,  2816,  2880,  3072,  3136,  3200,  3264,  3328,  3392, 
     3456,  3520,  3584,  3648,  2816,  2880,  3712,  2944,  3776,  3840, 
     2816,  3904,  3904,  3968,  4032,  4096,  4160,  3712,  2816,  4224, 
     4288,  2816,  4352,  4416,  4480,  4544,  4608,  4672,  2816,  4736, 
     4800,  4864,  4928,  4992,  5056,  3136,  2816,  5120,  5184,  5248, 
     5312,  5376,  5440,  5504,  2816,  5568,  5632,  5696,  5760,  5824, 
     5888,  5952,  6016,  6016,  6080,  6144,  6208,  6272,  6336,  6336, 
     6400,  6464,  6528,  6592,  6656,  6656,  6720,  6784,  6848,  6912, 
     6976,  2816,  7040,  7104,  7104,  7168,  7232,  7296,  7360,  7424, 
     2816,  7488,  2816,  2880,  2944,  7552,  7616,  2816,  7680,  7744, 
     7808,  2816,  7872,  3072,  3072,  2816,  2880,  2944,  7936,  8000, 
     2816,  2880,  2944,  8064,  8128,  8192,  2816,  8256,  8320,  2816, 
     2816,  8384,  8448,  8512,  2816,  2816,  8576,  8640,  8704,  8768, 
     8832,  8896,  8960,  9024,  9088,  3072,  9152,  9216,  9280,  2816, 
     9344,  9408,  9472,  2816,  2816,  3904,  4032,  2816,  4096,  9536, 
     4224,  4352,  4416,  9600,  4480,  2816,  9664,  4544,  9728,  2816, 
     9792,  5120,  9856,  5312,  2816,  5376,  9920,  9984,  8576, 10048, 
    10112, 10176,  5760,  2816, 10240, 10304,  6016, 10368,  6080,  2816, 
    10432, 10496, 10560, 10560, 10624, 10688, 10752, 10816,  6272,  6016, 
     6336, 10880,  6400,  2816, 10944,  6464, 11008, 11072,  6592,  6336, 
     6656, 11136,  6720,  2816, 11200, 11264, 11328, 11328, 11392, 11456, 
    11520, 11584, 11648, 11712,  7104, 11776,  7168,  2816, 11840, 11904, 
    11968, 11968, 12032, 12096, 12160, 12224, 12288, 12352,  7680,  7872, 
     2816,  2816,  2816, 12416, 12480, 12544, 12608, 12672, 12736, 12800, 
     2432, 12864, 12928,  2432,  2816, 12992,  2816, 13056,  3392, 13120, 
    13184, 13248, 13312, 13376, 13440, 10432, 13504, 13504, 11200, 13568, 
    13568, 13632, 11840, 13696, 13696, 13760, 13824, 13888,  2816, 13952, 
     2432, 14016, 14080, 14144, 14208, 14272, 14336, 14400, 14464, 10624, 
    11392, 14528, 12032, 14592, 14656, 14720, 14784, 14848, 14912, 14976, 
    15040, 15104, 15168, 15232, 15296, 15360, 15424, 15488,  2816,  2816, 
    15552, 15616,  3392, 15680, 15744, 15808,  2816,  2816, 15872, 15936, 
    16000, 16064, 16128,  2816,  2816,  2816, 16192, 16256, 16320, 16384, 
    16448, 16512, 16576, 16640,  2816, 16704,  6912,  7360,  8128, 16768, 
    16832, 16896, 16960,  3392
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\47\1\50\3\47\1\51\5\47\1\52\1\47\1\53"+
    "\1\51\2\47\1\54\3\47\1\51\52\47\1\55\1\56"+
    "\13\55\1\57\62\55\1\60\1\61\13\60\1\62\4\60"+
    "\1\63\2\60\1\64\52\60\1\65\1\66\3\65\1\67"+
    "\7\65\1\70\1\67\6\65\1\67\52\65\1\60\1\61"+
    "\5\60\1\71\5\60\1\62\7\60\1\64\53\60\1\61"+
    "\2\60\1\72\1\73\2\60\2\74\3\60\1\62\1\73"+
    "\6\60\1\73\3\60\4\74\1\75\6\74\1\76\2\74"+
    "\1\60\7\74\1\77\5\74\1\60\3\74\2\60\1\74"+
    "\1\60\1\74\3\60\1\61\2\60\1\72\1\100\7\60"+
    "\1\62\1\100\6\60\1\100\52\60\1\101\1\102\2\101"+
    "\1\103\10\101\1\104\7\101\1\64\52\101\1\60\1\61"+
    "\2\60\1\105\1\73\2\60\2\106\3\60\1\62\1\73"+
    "\6\60\1\73\3\60\16\106\1\60\15\106\1\60\3\106"+
    "\2\60\1\106\1\60\1\106\3\60\1\61\2\60\1\105"+
    "\1\73\2\60\2\106\3\60\1\62\1\73\6\60\1\73"+
    "\3\60\16\106\1\107\15\106\1\60\3\106\2\60\1\106"+
    "\1\60\1\106\2\60\1\110\1\61\1\60\1\111\1\112"+
    "\1\73\4\110\1\113\1\110\1\114\1\115\1\73\6\110"+
    "\1\73\52\110\1\60\1\61\2\60\1\116\10\60\1\62"+
    "\7\60\1\64\53\60\1\61\1\117\1\120\4\60\2\121"+
    "\3\60\1\62\7\60\1\64\3\60\16\121\1\60\15\121"+
    "\1\60\3\121\2\60\1\121\1\60\1\121\3\60\1\61"+
    "\1\117\1\120\4\60\2\121\3\60\1\62\7\60\1\64"+
    "\3\60\16\121\1\122\15\121\1\60\3\121\2\60\1\121"+
    "\1\60\1\121\2\60\1\123\1\61\1\117\1\124\1\123"+
    "\1\60\4\123\1\125\1\123\1\126\1\127\1\60\6\123"+
    "\1\64\52\123\1\60\1\61\13\60\1\62\7\60\1\64"+
    "\52\60\1\130\1\50\1\131\1\132\4\130\2\133\17\130"+
    "\16\134\1\130\15\134\1\130\3\134\2\130\1\134\1\130"+
    "\1\134\2\130\1\60\1\135\1\131\1\132\1\60\1\136"+
    "\2\60\2\137\3\60\1\140\1\136\6\60\1\136\3\60"+
    "\16\137\1\60\15\137\1\60\3\137\2\60\1\137\1\60"+
    "\1\137\3\60\1\135\1\131\1\132\1\60\1\136\2\60"+
    "\2\137\3\60\1\140\1\136\6\60\1\136\3\60\16\137"+
    "\1\141\15\137\1\60\3\137\2\60\1\137\1\60\1\137"+
    "\2\60\1\142\1\143\1\131\1\144\1\142\1\136\4\142"+
    "\1\145\1\142\1\146\1\147\1\136\6\142\1\136\52\142"+
    "\1\60\1\150\1\151\2\60\1\136\7\60\1\140\1\136"+
    "\6\60\1\136\4\60\1\152\1\153\5\60\1\154\10\60"+
    "\1\154\1\60\1\153\1\152\23\60\1\61\1\151\2\60"+
    "\1\136\7\60\1\140\1\136\6\60\1\136\2\60\1\155"+
    "\50\60\1\61\1\151\2\60\1\136\2\60\2\156\3\60"+
    "\1\140\1\136\6\60\1\136\2\60\1\155\16\156\1\60"+
    "\15\156\1\60\3\156\2\60\1\156\1\60\1\156\3\60"+
    "\1\61\1\151\2\60\1\136\7\60\1\140\1\136\6\60"+
    "\1\136\2\60\1\155\12\60\1\157\5\60\1\160\10\60"+
    "\1\157\15\60\1\161\1\61\1\151\1\162\1\161\1\136"+
    "\4\161\1\163\1\161\1\164\1\165\1\136\6\161\1\136"+
    "\2\161\1\166\47\161\1\167\1\61\1\151\1\170\1\167"+
    "\1\136\4\167\1\171\1\167\1\172\1\173\1\136\6\167"+
    "\1\136\2\167\1\174\47\167\1\175\1\61\1\151\1\176"+
    "\1\175\1\136\4\175\1\177\1\175\1\200\1\201\1\136"+
    "\6\175\1\136\52\175\1\202\1\203\1\204\12\202\1\205"+
    "\62\202\1\206\1\61\1\151\1\207\1\206\1\136\4\206"+
    "\1\210\1\206\1\211\1\212\1\136\6\206\1\136\52\206"+
    "\1\213\1\214\1\215\12\213\1\216\62\213\1\217\1\220"+
    "\13\217\1\221\62\217\5\222\1\223\6\222\1\224\1\140"+
    "\1\223\6\222\1\223\1\225\47\222\1\225\1\222\5\226"+
    "\1\227\4\226\1\230\2\226\1\140\1\227\6\226\1\227"+
    "\1\231\47\226\1\231\1\226\1\60\1\61\3\60\1\232"+
    "\7\60\1\140\1\232\6\60\1\233\52\60\1\234\1\235"+
    "\13\234\1\236\3\234\1\237\5\234\1\240\50\234\1\241"+
    "\1\242\13\241\1\243\10\241\1\244\51\241\1\245\1\246"+
    "\10\245\1\247\2\245\1\250\60\245\1\251\1\252\1\60"+
    "\1\61\1\253\3\60\2\253\1\254\4\60\1\62\1\60"+
    "\1\255\3\60\1\253\1\60\1\64\3\60\16\254\1\60"+
    "\15\254\1\60\2\254\2\60\4\254\1\256\1\257\1\47"+
    "\1\0\76\47\3\0\1\260\20\0\1\261\53\0\1\47"+
    "\1\0\3\47\1\51\7\47\1\262\1\51\6\47\1\51"+
    "\53\47\1\0\6\47\2\263\14\47\1\264\2\47\16\263"+
    "\1\47\15\263\1\47\3\263\2\47\1\263\1\47\1\263"+
    "\3\47\1\0\17\47\1\265\57\47\1\0\6\47\2\266"+
    "\17\47\16\266\1\47\15\266\1\47\3\266\2\47\1\266"+
    "\1\47\1\266\2\47\124\0\1\267\74\0\1\270\100\0"+
    "\1\271\62\0\1\272\7\0\1\273\1\272\6\0\1\272"+
    "\67\0\1\274\3\0\1\270\65\0\1\275\72\0\1\276"+
    "\102\0\1\73\10\0\1\73\6\0\1\73\60\0\4\74"+
    "\5\0\1\74\11\0\16\74\1\0\15\74\1\0\4\74"+
    "\1\0\3\74\10\0\4\74\5\0\1\74\11\0\5\74"+
    "\1\277\10\74\1\0\11\74\1\300\3\74\1\0\4\74"+
    "\1\0\3\74\10\0\4\74\5\0\1\74\11\0\5\74"+
    "\1\301\10\74\1\0\11\74\1\301\3\74\1\0\4\74"+
    "\1\0\3\74\10\0\4\74\5\0\1\74\11\0\5\74"+
    "\1\300\10\74\1\0\11\74\1\300\3\74\1\0\4\74"+
    "\1\0\3\74\7\0\1\100\10\0\1\100\6\0\1\100"+
    "\54\0\1\302\77\0\1\303\103\0\4\106\5\0\1\106"+
    "\11\0\16\106\1\0\15\106\1\0\4\106\1\0\3\106"+
    "\2\0\1\110\2\0\1\304\1\110\1\0\4\110\1\0"+
    "\1\110\1\0\1\110\1\0\6\110\1\0\53\110\1\0"+
    "\1\303\1\304\1\110\1\0\4\110\1\0\1\110\1\0"+
    "\1\110\1\0\6\110\1\0\52\110\12\305\1\306\2\305"+
    "\1\0\62\305\14\307\1\306\1\0\62\307\1\110\2\0"+
    "\1\304\1\110\1\0\4\110\1\0\1\110\1\0\1\110"+
    "\1\0\2\110\1\310\3\110\1\0\52\110\2\0\1\117"+
    "\1\311\102\0\4\121\5\0\1\121\11\0\16\121\1\0"+
    "\15\121\1\0\4\121\1\0\3\121\2\0\1\123\2\0"+
    "\1\312\1\123\1\0\4\123\1\0\1\123\1\0\1\123"+
    "\1\0\6\123\1\0\53\123\1\0\1\117\1\313\1\123"+
    "\1\0\4\123\1\0\1\123\1\0\1\123\1\0\6\123"+
    "\1\0\52\123\1\125\2\314\1\315\1\125\1\314\4\125"+
    "\1\316\1\125\1\314\1\123\1\314\6\125\1\314\52\125"+
    "\1\126\2\317\1\320\1\126\1\317\4\126\1\317\1\126"+
    "\1\316\1\123\1\317\6\126\1\317\52\126\1\123\2\0"+
    "\1\312\1\123\1\0\4\123\1\0\1\123\1\0\1\123"+
    "\1\0\2\123\1\321\3\123\1\0\52\123\1\130\3\0"+
    "\25\130\16\0\1\130\15\0\1\130\3\0\2\130\1\0"+
    "\1\130\1\0\2\130\2\0\1\322\75\0\1\130\3\0"+
    "\2\130\4\133\5\130\1\133\11\130\16\134\1\130\15\134"+
    "\1\130\3\134\1\133\1\130\1\134\1\133\1\134\2\130"+
    "\6\0\4\134\5\0\1\134\11\0\16\134\1\0\15\134"+
    "\1\0\4\134\1\0\3\134\5\0\1\260\4\0\2\323"+
    "\12\0\1\261\4\0\16\323\1\0\15\323\1\0\3\323"+
    "\2\0\1\323\1\0\1\323\7\0\1\136\7\0\1\273"+
    "\1\136\6\0\1\136\60\0\4\137\5\0\1\137\11\0"+
    "\16\137\1\0\15\137\1\0\4\137\1\0\3\137\2\0"+
    "\1\142\2\0\1\324\1\142\1\0\4\142\1\0\1\142"+
    "\1\0\1\142\1\0\6\142\1\0\52\142\3\0\1\260"+
    "\4\0\2\325\12\0\1\261\4\0\16\325\1\0\15\325"+
    "\1\0\3\325\2\0\1\325\1\0\1\325\2\0\1\142"+
    "\1\0\1\322\1\324\1\142\1\0\4\142\1\0\1\142"+
    "\1\0\1\142\1\0\6\142\1\0\52\142\12\326\1\327"+
    "\2\326\1\0\62\326\14\330\1\327\1\0\62\330\1\142"+
    "\2\0\1\324\1\142\1\0\4\142\1\0\1\142\1\0"+
    "\1\331\1\0\2\142\1\332\3\142\1\0\52\142\3\0"+
    "\1\260\20\0\1\333\120\0\1\334\66\0\1\335\16\0"+
    "\1\335\63\0\1\336\20\0\1\336\17\0\22\337\1\340"+
    "\55\337\6\0\4\156\5\0\1\156\11\0\16\156\1\0"+
    "\15\156\1\0\4\156\1\0\3\156\52\0\1\341\5\0"+
    "\1\341\105\0\1\342\13\0\1\161\2\0\1\343\1\161"+
    "\1\0\4\161\1\0\1\161\1\0\1\161\1\0\6\161"+
    "\1\0\52\161\1\163\2\344\1\345\1\163\1\344\4\163"+
    "\1\346\1\163\1\344\1\161\1\344\6\163\1\344\52\163"+
    "\1\347\2\350\1\351\1\352\1\350\4\352\1\350\1\347"+
    "\1\353\1\161\1\354\3\352\1\347\2\352\1\354\1\352"+
    "\2\347\37\352\5\347\2\352\1\347\1\161\2\0\1\343"+
    "\1\161\1\0\4\161\1\0\1\161\1\0\1\355\1\0"+
    "\2\161\1\356\3\161\1\0\52\161\1\166\2\337\1\357"+
    "\1\166\1\337\4\166\1\337\1\166\1\337\1\166\1\337"+
    "\3\166\1\360\2\166\1\337\52\166\1\167\2\0\1\361"+
    "\1\167\1\0\4\167\1\0\1\167\1\0\1\167\1\0"+
    "\6\167\1\0\52\167\1\171\2\362\1\363\1\171\1\362"+
    "\4\171\1\364\1\171\1\362\1\171\1\362\6\171\1\362"+
    "\52\171\1\172\2\365\1\366\1\172\1\365\4\172\1\365"+
    "\1\172\1\364\1\172\1\365\6\172\1\365\52\172\1\167"+
    "\2\0\1\361\1\167\1\0\4\167\1\0\1\167\1\0"+
    "\1\367\1\0\2\167\1\370\3\167\1\0\52\167\1\174"+
    "\2\337\1\371\1\174\1\337\4\174\1\337\1\174\1\337"+
    "\1\174\1\337\3\174\1\372\2\174\1\337\52\174\1\175"+
    "\2\0\1\373\1\175\1\0\4\175\1\0\1\175\1\0"+
    "\1\175\1\0\6\175\1\0\52\175\1\177\2\374\1\375"+
    "\1\177\1\374\4\177\1\376\1\177\1\374\1\175\1\374"+
    "\6\177\1\374\52\177\1\377\2\u0100\1\u0101\1\u0102\1\u0100"+
    "\4\u0102\1\u0100\1\377\1\u0103\1\175\1\u0104\3\u0102\1\377"+
    "\2\u0102\1\u0104\1\u0102\2\377\37\u0102\5\377\2\u0102\1\377"+
    "\1\175\2\0\1\373\1\175\1\0\4\175\1\0\1\175"+
    "\1\0\1\u0105\1\0\2\175\1\u0106\3\175\1\0\52\175"+
    "\2\202\1\0\77\202\1\0\21\202\1\u0107\55\202\1\0"+
    "\16\202\1\u0108\56\202\1\206\2\0\1\u0109\1\206\1\0"+
    "\4\206\1\0\1\206\1\0\1\206\1\0\6\206\1\0"+
    "\52\206\1\210\2\u010a\1\u010b\1\210\1\u010a\4\210\1\u010c"+
    "\1\210\1\u010a\1\206\1\u010a\6\210\1\u010a\52\210\1\u010d"+
    "\2\u010e\1\u010f\1\u0110\1\u010e\4\u0110\1\u010e\1\u010d\1\u0111"+
    "\1\206\1\u0112\3\u0110\1\u010d\2\u0110\1\u0112\1\u0110\2\u010d"+
    "\37\u0110\5\u010d\2\u0110\1\u010d\1\206\2\0\1\u0109\1\206"+
    "\1\0\4\206\1\0\1\206\1\0\1\u0113\1\0\2\206"+
    "\1\u0114\3\206\1\0\52\206\2\213\1\0\77\213\1\0"+
    "\21\213\1\u0115\55\213\1\0\16\213\1\u0116\56\213\14\222"+
    "\2\0\10\222\1\u0117\47\222\1\u0117\6\222\1\223\6\222"+
    "\1\0\1\273\1\223\6\222\1\223\1\u0117\47\222\1\u0117"+
    "\16\222\1\0\62\222\12\226\1\0\2\226\1\0\10\226"+
    "\1\u0118\47\226\1\u0118\6\226\1\227\4\226\1\0\2\226"+
    "\1\273\1\227\6\226\1\227\1\u0118\47\226\1\u0118\16\226"+
    "\1\0\62\226\27\0\1\u0119\77\0\1\u011a\77\0\1\u011b"+
    "\50\0\12\245\1\0\63\245\2\0\12\245\1\0\11\245"+
    "\1\u011c\51\245\2\0\12\245\1\0\6\245\1\u011d\54\245"+
    "\12\0\1\u011e\20\0\16\u011e\1\0\15\u011e\1\0\2\u011e"+
    "\2\0\4\u011e\12\0\1\254\6\0\1\254\11\0\16\254"+
    "\1\0\15\254\1\0\2\254\2\0\4\254\21\0\1\255"+
    "\70\0\1\u011f\20\0\16\u011f\1\0\15\u011f\1\0\2\u011f"+
    "\2\0\4\u011f\11\0\1\u0120\20\0\1\u0121\47\0\1\47"+
    "\1\0\17\47\1\u0122\57\47\1\0\4\47\4\263\5\47"+
    "\1\263\11\47\16\263\1\47\15\263\1\u0123\4\263\1\47"+
    "\3\263\3\47\1\0\15\47\1\u0124\15\47\1\u0125\43\47"+
    "\1\0\3\47\1\265\10\47\1\265\6\47\1\265\53\47"+
    "\1\0\4\47\4\266\5\47\1\266\11\47\16\266\1\47"+
    "\15\266\1\u0126\4\266\1\47\3\266\2\47\30\0\1\u0121"+
    "\54\0\1\270\10\0\1\270\6\0\1\270\54\0\1\u0127"+
    "\112\0\1\274\3\0\1\u0128\63\0\1\274\10\0\1\274"+
    "\6\0\1\274\54\0\1\u0129\103\0\4\74\5\0\1\74"+
    "\11\0\6\74\1\u012a\7\74\1\0\10\74\1\u012b\4\74"+
    "\1\0\4\74\1\0\3\74\10\0\4\74\5\0\1\74"+
    "\11\0\6\74\1\u012b\7\74\1\0\10\74\1\u012b\4\74"+
    "\1\0\4\74\1\0\3\74\10\0\4\74\5\0\1\74"+
    "\11\0\16\74\1\0\1\74\1\u012c\13\74\1\0\4\74"+
    "\1\0\3\74\2\0\1\110\2\0\1\304\1\110\1\270"+
    "\4\110\1\0\1\110\1\0\1\110\1\270\6\110\1\270"+
    "\52\110\12\314\1\316\2\314\1\0\62\314\14\317\1\316"+
    "\1\0\62\317\1\123\2\0\1\312\1\123\1\270\4\123"+
    "\1\0\1\123\1\0\1\123\1\270\6\123\1\270\52\123"+
    "\6\0\4\323\5\0\1\323\11\0\16\323\1\0\15\323"+
    "\1\0\4\323\1\0\3\323\10\0\4\325\5\0\1\325"+
    "\11\0\16\325\1\0\15\325\1\0\4\325\1\0\3\325"+
    "\2\0\1\142\2\0\1\324\1\142\1\274\4\142\1\0"+
    "\1\142\1\0\1\142\1\274\6\142\1\274\53\142\2\0"+
    "\1\324\1\142\1\270\4\142\1\0\1\142\1\0\1\142"+
    "\1\270\6\142\1\270\52\142\31\0\1\u012d\35\0\1\u012d"+
    "\44\0\1\u012e\16\0\1\u012e\65\0\1\u012f\10\0\1\u012f"+
    "\70\0\1\u0130\16\0\1\u0130\103\0\1\u0131\11\0\12\344"+
    "\1\346\2\344\1\0\62\344\1\347\2\350\1\u0132\1\347"+
    "\1\350\4\347\1\350\1\347\1\346\1\161\1\350\6\347"+
    "\1\350\52\347\14\350\1\346\1\0\62\350\1\347\2\350"+
    "\1\u0132\1\347\1\350\4\347\1\350\1\347\1\u0133\1\161"+
    "\1\350\6\347\1\350\52\347\14\0\1\u0134\63\0\14\350"+
    "\1\u0133\1\0\62\350\1\161\2\0\1\343\1\161\1\274"+
    "\4\161\1\0\1\161\1\0\1\161\1\274\6\161\1\274"+
    "\53\161\2\0\1\343\1\161\1\270\4\161\1\0\1\161"+
    "\1\0\1\161\1\270\6\161\1\270\52\161\12\362\1\364"+
    "\65\362\14\365\1\364\63\365\1\167\2\0\1\361\1\167"+
    "\1\274\4\167\1\0\1\167\1\0\1\167\1\274\6\167"+
    "\1\274\53\167\2\0\1\361\1\167\1\270\4\167\1\0"+
    "\1\167\1\0\1\167\1\270\6\167\1\270\52\167\12\374"+
    "\1\376\2\374\1\0\62\374\1\377\2\u0100\1\u0135\1\377"+
    "\1\u0100\4\377\1\u0100\1\377\1\376\1\175\1\u0100\6\377"+
    "\1\u0100\52\377\14\u0100\1\376\1\0\62\u0100\1\377\2\u0100"+
    "\1\u0135\1\377\1\u0100\4\377\1\u0100\1\377\1\u0136\1\175"+
    "\1\u0100\6\377\1\u0100\52\377\14\0\1\u0137\63\0\14\u0100"+
    "\1\u0136\1\0\62\u0100\1\175\2\0\1\373\1\175\1\274"+
    "\4\175\1\0\1\175\1\0\1\175\1\274\6\175\1\274"+
    "\53\175\2\0\1\373\1\175\1\270\4\175\1\0\1\175"+
    "\1\0\1\175\1\270\6\175\1\270\52\175\2\202\1\0"+
    "\25\202\1\u0138\51\202\1\0\2\202\1\u0108\10\202\1\u0108"+
    "\6\202\1\u0108\52\202\12\u010a\1\u010c\2\u010a\1\0\62\u010a"+
    "\1\u010d\2\u010e\1\u0139\1\u010d\1\u010e\4\u010d\1\u010e\1\u010d"+
    "\1\u010c\1\206\1\u010e\6\u010d\1\u010e\52\u010d\14\u010e\1\u010c"+
    "\1\0\62\u010e\1\u010d\2\u010e\1\u0139\1\u010d\1\u010e\4\u010d"+
    "\1\u010e\1\u010d\1\u013a\1\206\1\u010e\6\u010d\1\u010e\52\u010d"+
    "\14\0\1\u013b\63\0\14\u010e\1\u013a\1\0\62\u010e\1\206"+
    "\2\0\1\u0109\1\206\1\274\4\206\1\0\1\206\1\0"+
    "\1\206\1\274\6\206\1\274\53\206\2\0\1\u0109\1\206"+
    "\1\270\4\206\1\0\1\206\1\0\1\206\1\270\6\206"+
    "\1\270\52\206\2\213\1\0\25\213\1\u013c\51\213\1\0"+
    "\2\213\1\u0116\10\213\1\u0116\6\213\1\u0116\52\213\12\245"+
    "\1\0\15\245\1\u013d\45\245\2\0\5\245\1\u011d\4\245"+
    "\1\0\3\245\1\u011d\6\245\1\u011d\50\245\12\0\1\u011e"+
    "\6\0\1\u011e\10\0\1\u013e\16\u011e\1\0\15\u011e\1\0"+
    "\2\u011e\2\0\4\u011e\12\0\1\u011f\6\0\1\u011f\11\0"+
    "\16\u011f\1\0\15\u011f\1\0\2\u011f\2\0\4\u011f\11\0"+
    "\1\u013f\121\0\1\u0140\46\0\1\47\1\0\3\47\1\u0122"+
    "\10\47\1\u0122\6\47\1\u0122\53\47\1\0\15\47\1\u0124"+
    "\45\47\1\u0141\13\47\1\0\15\47\1\u0142\11\47\3\u0142"+
    "\5\47\1\u0142\10\47\1\u0142\1\47\2\u0142\5\47\1\u0142"+
    "\2\47\2\u0142\10\47\5\0\1\u0128\10\0\1\u0128\6\0"+
    "\1\u0128\60\0\1\74\1\u0143\2\74\5\0\1\74\11\0"+
    "\16\74\1\0\15\74\1\0\4\74\1\0\3\74\10\0"+
    "\4\74\5\0\1\74\11\0\14\74\1\u0144\1\74\1\0"+
    "\15\74\1\0\4\74\1\0\3\74\36\0\1\u0145\16\0"+
    "\1\u0145\63\0\1\u0146\20\0\1\u0146\55\0\1\u0147\22\0"+
    "\1\u0147\52\0\1\u0148\16\0\1\u0148\63\0\1\u0149\20\0"+
    "\1\u0149\22\0\2\u014a\1\0\4\u014a\2\0\1\353\1\0"+
    "\4\u014a\1\0\4\u014a\2\0\37\u014a\5\0\2\u014a\4\0"+
    "\2\u014b\1\0\4\u014b\2\0\1\u0103\1\0\4\u014b\1\0"+
    "\4\u014b\2\0\37\u014b\5\0\2\u014b\1\0\2\202\1\0"+
    "\26\202\1\u014c\46\202\3\0\2\u014d\1\0\4\u014d\2\0"+
    "\1\u0111\1\0\4\u014d\1\0\4\u014d\2\0\37\u014d\5\0"+
    "\2\u014d\1\0\2\213\1\0\26\213\1\u014e\46\213\12\245"+
    "\1\0\16\245\1\u014f\44\245\12\0\1\u0150\6\0\1\u0151"+
    "\11\0\16\u0150\1\0\15\u0150\1\0\2\u0150\2\0\4\u0150"+
    "\34\0\1\u0152\45\0\1\47\1\0\15\47\1\u0142\11\47"+
    "\3\u0142\5\47\1\u0142\10\47\1\u0142\1\47\2\u0142\5\47"+
    "\1\u0142\1\47\1\u0141\2\u0142\10\47\6\0\4\74\5\0"+
    "\1\74\11\0\12\74\1\u0153\3\74\1\0\15\74\1\0"+
    "\4\74\1\0\3\74\10\0\4\74\5\0\1\74\11\0"+
    "\11\74\1\u0154\4\74\1\0\15\74\1\0\4\74\1\0"+
    "\3\74\52\0\1\u0155\5\0\1\u0155\65\0\1\u0156\74\0"+
    "\1\u0157\10\0\1\u0157\66\0\1\u0158\10\0\1\u0158\71\0"+
    "\1\u0159\33\0\2\202\1\0\27\202\1\u015a\45\202\2\213"+
    "\1\0\27\213\1\u015b\45\213\12\245\1\0\17\245\1\u015c"+
    "\43\245\12\0\1\u0150\6\0\1\u0150\2\0\1\u015d\6\0"+
    "\16\u0150\1\0\15\u0150\1\0\2\u0150\2\0\4\u0150\21\0"+
    "\1\u0151\2\0\1\u015e\110\0\1\u015f\52\0\4\74\5\0"+
    "\1\74\11\0\16\74\1\0\3\74\1\u0160\11\74\1\0"+
    "\4\74\1\0\3\74\10\0\4\74\5\0\1\74\11\0"+
    "\3\74\1\u0161\12\74\1\0\3\74\1\u0161\11\74\1\0"+
    "\4\74\1\0\3\74\53\0\1\u0162\71\0\1\u0163\16\0"+
    "\1\u0163\63\0\1\u0164\67\0\1\u0165\22\0\1\u0165\47\0"+
    "\1\u0166\35\0\1\u0166\10\0\2\202\1\0\30\202\1\u0167"+
    "\44\202\2\213\1\0\30\213\1\u0168\44\213\12\245\1\0"+
    "\20\245\1\u0169\42\245\36\0\1\u016a\51\0\4\74\5\0"+
    "\1\74\11\0\16\74\1\0\6\74\1\u016b\6\74\1\0"+
    "\4\74\1\0\3\74\43\0\1\u016c\10\0\1\u016c\61\0"+
    "\1\u016d\16\0\1\u016d\60\0\1\u016e\16\0\1\u016e\24\0"+
    "\2\202\1\0\31\202\1\u016f\43\202\2\213\1\0\31\213"+
    "\1\u0170\43\213\12\245\1\0\21\245\1\u0171\41\245\35\0"+
    "\1\u0172\52\0\4\74\5\0\1\74\11\0\6\74\1\u0173"+
    "\7\74\1\0\15\74\1\0\4\74\1\0\3\74\2\0"+
    "\2\202\1\0\30\202\1\u0174\44\202\2\213\1\0\30\213"+
    "\1\u0175\44\213\12\245\1\0\20\245\1\u0176\42\245\32\0"+
    "\1\u0177\55\0\4\74\5\0\1\74\11\0\10\74\1\u0178"+
    "\5\74\1\0\15\74\1\0\4\74\1\0\3\74\2\0"+
    "\2\202\1\0\25\202\1\u0179\47\202\2\213\1\0\25\213"+
    "\1\u017a\47\213\12\245\1\0\15\245\1\u017b\45\245\10\0"+
    "\4\74\5\0\1\74\11\0\12\74\1\u017c\3\74\1\0"+
    "\15\74\1\0\4\74\1\0\3\74\10\0\4\74\5\0"+
    "\1\74\11\0\16\74\1\0\15\74\1\0\4\74\1\0"+
    "\2\74\1\u017d\10\0\4\74\5\0\1\74\11\0\10\74"+
    "\1\u017e\5\74\1\0\15\74\1\0\4\74\1\0\3\74"+
    "\10\0\4\74\5\0\1\74\11\0\10\74\1\u017f\5\74"+
    "\1\0\15\74\1\0\4\74\1\0\3\74\10\0\4\74"+
    "\5\0\1\74\11\0\16\74\1\0\3\74\1\u0180\11\74"+
    "\1\0\4\74\1\0\3\74\2\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  0,  0,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9, 
     1,  1,  1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9,  1, 
     1,  1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  9,  1,  1,  1,  1, 
     9,  1,  1,  1,  1,  1,  9,  1,  1,  9,  9,  1,  1,  1,  9,  9, 
     1,  1,  1,  1,  1,  1,  0,  1,  0,  0,  0,  1,  0,  9,  1,  1, 
     1,  9,  9,  0,  0,  9,  0,  1,  0,  0,  0,  0,  0,  9,  0,  0, 
     1,  9,  1,  0,  1,  0,  9,  0,  1,  1,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  9,  1,  0,  0,  1,  1,  0,  1,  1,  0,  1, 
     0,  0,  0,  9,  0,  0,  1,  1,  0,  1,  0,  0,  0,  9,  1,  0, 
     0,  1,  1,  0,  1,  1,  1,  1,  0,  0,  0,  9,  1,  0,  0,  1, 
     1,  0,  1,  1,  1,  1,  0,  0,  9,  9,  9,  1,  1,  1,  1,  0, 
     0,  1,  1,  1,  1,  1,  9,  1,  9,  1,  1,  1,  0,  0,  0,  0, 
     0,  0,  1,  0,  0,  1,  0,  1,  0,  1,  0,  1,  1,  0,  9,  0, 
     1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  1,  1,  0, 
     0,  0,  1,  1,  0,  0,  0,  0,  0,  1,  1,  1,  9,  9,  0,  1, 
     1,  0,  0,  0,  9,  9,  1,  1,  1,  0,  1,  9,  9,  9,  1,  1, 
     1,  0,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;
  
  /**  are we inside a raw tag? **/
  private boolean insideRaw = false;
  
  private TwigTokenizer twigTokenizer = null;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private String fBufferedText = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	
	// help for twig container text region
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;


	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has 
	// been completed
	private int fEmbeddedPostState = YYINITIAL;
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private String text = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;
	
	public static String twigLeftDelim = "{{";
	public static String twigRightDelim = "}}";
	public static String[] leftDelimiters = new String[] {"{{", "{%", "{#"};
	
	public static String stateHint;	
	
	private final XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean allowTWIG, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && yy_currentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			
			/**
			 * Look for starting Twig "{%"
			 */
			// Look for a TWIG beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			if(allowTWIG && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '{' && (yy_buffer[yy_currentPos] == '{' || (yy_buffer[yy_currentPos] == '%'))) {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			
			// 2) yy_currentPos - jspstarter.length : There's not searchStringLength of input available; check for a JSP 2 spots back in what we could read
			// ---
			// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			else if(allowTWIG && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
					yy_buffer[yy_currentPos - 1] == '{' && (yy_buffer[yy_currentPos] == '{' || yy_buffer[yy_currentPos] == '%')) {
				fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			// 3) yy_currentPos..(yy_currentPos+jspStartlength-1) : Check at the start of the block one time
			// ---
			// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
			// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
			else if(allowTWIG && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
					yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '{' && yy_buffer[yy_startRead + 1] == '{') {
				fLastInternalBlockStart = yy_markedPos = yy_startRead;
				yy_currentPos = yy_markedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(yy_markedPos == yy_startRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}

			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			if (n == YYEOF) {
				stillSearching = false;
			}
			else {
				same = true;
				// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				
				// safety check for array accesses (yy_currentPos is the *last* character we can check against)
				if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
					for(i = 0; i < searchStringLength; i++) {
						if(same && fIsCaseSensitiveBlocking)
							same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
						else if(same && !fIsCaseSensitiveBlocking)
							same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
					}
				}
				// safety check failed; no match is possible right now
				else {
					same = false;
				}
			}
			if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = yy_buffer[yy_currentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (yy_currentPos < yy_startRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		yy_markedPos = yy_currentPos - searchStringLength;
		yy_currentPos = yy_markedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (yy_markedPos == yy_startRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		yy_markedPos = yy_currentPos;
		yy_currentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(yy_markedPos == yy_startRead)
		return primGetNextToken();
	return searchContext;
}

private ITextRegion bufferedTextRegion = null;


/**
 * Method doScanEndTwig
 * 
 * @see doScan(searchString, req...) 
 * this version can handle two strings as options to search string
 * it originally written to support ?> or %> close tags to php
 * The two strings must be on the same length
 *
 * @param isAsp - whether the asp %> close is premited
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
//private ITextRegion bufferedTextRegion = null;
private final String doScanEndTwig(String searchContext, int exitState, int immediateFallbackState) throws IOException {

	if (Debug.debugTokenizer) {	
		System.err.println("do scan end twig, current pos: " + yy_currentPos);	
	}
	
	yypushback(1); // begin with the last char
	
	// the twigLexer should read until the last token, so
	// the position after this method should match
	// <ST_TWIG_CONTENT> "}}" otherwise we'll
	// get an infinite loop ;)
	
	String lexerState = "ST_" + searchContext;
	
	final AbstractTwigLexer twigLexer = getTwigLexer(stateHint); 
 
	bufferedTextRegion = new TwigScriptRegion(searchContext, yychar, project, twigLexer, stateHint);
	
	if (Debug.debugTokenizer)
		System.err.println("created twig script region between " + bufferedTextRegion.getStart() + " and " + bufferedTextRegion.getEnd());	

	// restore the locations / states
	reset(yy_reader, twigLexer.getZZBuffer(), twigLexer.getParamenters());
	
	
	if (Debug.debugTokenizer) {	
		System.err.println("end scan, position: " + yy_currentPos);	
	}
	
	
	yybegin(exitState);
	return searchContext;
}


/**
 * @param project
 * @param stream
 * @return a new lexer for the given project with the given stream initialized with current parameters
 */
private AbstractTwigLexer getTwigLexer(String lexerState) {

	final AbstractTwigLexer lexer = new TwigLexer(yy_reader);
	lexer.setTokenizer(this);
	int[] currentParameters = getParamenters();
	try {
		// set initial lexer state - we use reflection here since we don't know the constant value of 
		// of this state in specific Twig version lexer 
		currentParameters[6] = lexer.getClass().getField(lexerState).getInt(lexer);
	} catch (Exception e) {
		Logger.logException(e);
	}
	lexer.initialize(currentParameters[6]);
	lexer.reset(yy_reader, yy_buffer, currentParameters);
	lexer.setPatterns(project);

//	lexer.setAspTags(ProjectOptions.isSupportingAspTags(project));
	return lexer;
}

// call the doScan without searching for Twig internal code
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	return doScan(searchString, true, requireTailSeparator, searchContext, exitState, immediateFallbackState);	
}

	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {

				ITextRegion newToken;
				// if it is twig content we extract the tokens
				if (internalContext == TWIG_CONTENT) {
					newToken = bufferedTextRegion; 
					bufferedTextRegion.adjustStart(-containerStart);
				} else {
					newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				}
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength() );
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container

					ITextRegion newToken;
					// if it is twig content we extract the tokens
					if (internalContext == TWIG_CONTENT) {
						newToken = bufferedTextRegion; 
						bufferedTextRegion.adjustStart(-containerStart);
					} else {
						newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					}

					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
			} catch (Exception f) {
				// some other exception happened; never should
				Logger.logException(f);
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]);
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}

	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		return true;
	}

/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}

private IProject project;

public void setProject(IProject project) {
	this.project = project;
}

public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
	this.yy_reader = reader;
	this.yy_buffer = buffer;
	this.yy_markedPos = parameters[0];
	this.yy_pushbackPos = parameters[1];
	this.yy_currentPos = parameters[2];
	this.yy_startRead = parameters[3];
	this.yy_endRead = parameters[4];
	this.yyline = parameters[5];  
	this.yychar = this.yy_startRead - this.yy_pushbackPos;
}

public int[] getParamenters(){
	return new int[]{yy_markedPos, yy_pushbackPos, yy_currentPos, yy_startRead, yy_endRead, yyline, yy_lexical_state};
}

/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	fEmbeddedContainer = null;
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		if (fBufferedEmbeddedContainer != null) {
			ITextRegion container = fBufferedEmbeddedContainer;
			fBufferedEmbeddedContainer = null;
			fShouldLoadBuffered = false;
			return container;
		}
		context = fBufferedContext;
		text = fBufferedText;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == PROXY_CONTEXT) {
			return fEmbeddedContainer;
		} else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		text = yytext();
		if (context == XML_TAG_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = text;
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (yy_atEOF) {
			fTokenCount++;
			return null;
		}
	}
	
	// store the next token
	f_context = primGetNextToken();
	if (f_context == PROXY_CONTEXT) {
		fBufferedEmbeddedContainer = fEmbeddedContainer;
		fShouldLoadBuffered = true;
	} else if (f_context == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	} else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	} else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedText = yytext();
	if (fBufferedContext == XML_TAG_NAME) {
		if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
			fCurrentTagName = fBufferedText;
		else
			fCurrentTagName = null;
	}
	else if (fBufferedContext == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (fBufferedContext == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}else {
		fShouldLoadBuffered = true;
	}
	if (context == null) {
		// EOF
		return null;
	}
	fTokenCount++;

	// if it is twig content we create a twig script region
	if ((context == TWIG_CONTENT) || (context == TWIG_COMMENT))
	{	
//		if (Debug.debugTokenizer)
//			System.err.println("create twig region " + context);
		
		return bufferedTextRegion; 
	} else {

//		if (Debug.debugTokenizer)
//			System.err.println("create standard region " + context);

		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
}

/* user method */
public TwigTokenizer(){
	super();
}
/* user method */
public TwigTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	yy_reader = in;

	/* the current state of the DFA */
	yy_state = 0;

	/* the current lexical state */
	yy_lexical_state = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(yy_buffer, (char)0);

	/* the textposition at the last accepting state */
	yy_markedPos = 0;

	/* the textposition at the last state to be included in yytext */
	yy_pushbackPos = 0;

	/* the current text position in the buffer */
	yy_currentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	yy_startRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	yy_endRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* yy_atEOF == true <=> the scanner has returned a value for EOF */
	yy_atEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	yy_eof_done = false;


	/* user vars: */
	fLastInternalBlockStart = -1;	

	fTokenCount = 0;
	
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedText = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	text = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		TwigTokenizer newInstance = new TwigTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", true, false,  XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[17024];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4970) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    public void setTokenizer(TwigTokenizer tokenizer) {
        twigTokenizer = tokenizer;
    }

    public void startRaw() {
        
        insideRaw = true;
        
    }
    public void endRaw() {
    
        insideRaw = false;
        
    }    

  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}
	
	/* user method - skeleton.sse */
	protected final String findTwigDelimiter(String text, String insideOf, String delim, String delimType, int afterDelimType){
		
		int current = -1;
		int firstOccurence = text.length();
		int delimiter = -1;
		
		for (int i=0; i < leftDelimiters.length; i++) {
			
			current = text.indexOf(leftDelimiters[i]);
			
			if (current > -1 && current < firstOccurence) {
				firstOccurence = current;
				delimiter = i;
			}			
		}
		
		if (delimiter <= -1)
			return insideOf;
		
		switch (delimiter) {
		
		case 0:

            // don't evaluate inside raw blocks
            if (insideRaw) {
              return insideOf;
            }

			delim = "{{";

			if (Debug.debugTokenizer) {
				//	System.err.println("Delim: "+delim+" looking in: '"+text+"' startchar: "+startChar);
			}

			//System.err.println("a");
			//go to the char right before the text, so it doesnt mark the whole thing red...
			if (firstOccurence > 0){
				//					System.err.println("b");
				//push to right before the delim
				yypushback(yylength() - firstOccurence);
				return insideOf;
				//return YYINITIAL;
			} else {
				//					System.err.println("c");
				stateHint = "ST_TWIG_IN_PRINT";
				yybegin(afterDelimType);
				// pushback to just after the closing bracket
				int delemLen = delim.length();
				yypushback(yylength() - firstOccurence - delemLen);
				return delimType;
			}
				
		case 1:
			
			delim = "{%";
			
			if (Debug.debugTokenizer) {
//				System.err.println("Delim: "+delim+" looking in: '"+text+"' startchar: "+startChar);
			}
				
			if (firstOccurence != -1) {
			
				if (Debug.debugTokenizer)		
					System.err.println("a");
				//go to the char right before the text, so it doesnt mark the whole thing red...
				if (firstOccurence > 0){
				
					if (Debug.debugTokenizer)			
						System.err.println("b");
						
					//push to right before the delim
					yypushback(yylength() - firstOccurence);
					return insideOf;
					//return YYINITIAL;
				} else {
				
					if (Debug.debugTokenizer)			
						System.err.println("c");
					yybegin(afterDelimType);
					stateHint = "ST_TWIG_IN_STATEMENT";
					// pushback to just after the closing bracket
					int delemLen = delim.length();
					yypushback(yylength() - firstOccurence - delemLen);
					return TWIG_STMT_OPEN;
				}
			}
			
			

			break;
			
		case 2:

            // don't evaluate inside raw blocks
            if (insideRaw) {
              return insideOf;
            }
			
			// search for comments first
			delim = "{#";

			//System.err.println("a");
			//go to the char right before the text, so it doesnt mark the whole thing red...
			if (firstOccurence > 0){
				//					System.err.println("b");
				//push to right before the delim
				yypushback(yylength() - firstOccurence);
				return insideOf;
				//return YYINITIAL;
			} else {
				//					System.err.println("c");
				yybegin(ST_TWIG_COMMENT);
				stateHint = "ST_TWIG_COMMENT";
				// pushback to just after the closing bracket
				int delemLen = delim.length();
				yypushback(yylength() - firstOccurence - delemLen);
				return TWIG_COMMENT_OPEN;
			}

			
		default:
			return insideOf;
			
		}
		
		
		return insideOf;
	}

		

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      yychar+= yylength();

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_counted = false;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {    

        case 383: 
          { 
	if(Debug.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 385: break;
        case 374: 
        case 376: 
        case 377: 
        case 378: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 386: break;
        case 365: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 387: break;
        case 364: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 388: break;
        case 363: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 389: break;
        case 357: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 390: break;
        case 356: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 391: break;
        case 352: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 392: break;
        case 349: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable3");

    return TWIG_VARIABLE;
 }
        case 393: break;
        case 348: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable4");

    return TWIG_VARIABLE;
 }
        case 394: break;
        case 320: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 395: break;
        case 318: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 396: break;
        case 140: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 397: break;
        case 133: 
        case 135: 
        case 136: 
        case 137: 
        case 267: 
        case 268: 
        case 271: 
        case 272: 
        case 274: 
        case 313: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 398: break;
        case 131: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 399: break;
        case 124: 
        case 126: 
        case 127: 
        case 128: 
        case 253: 
        case 254: 
        case 257: 
        case 258: 
        case 260: 
        case 309: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 400: break;
        case 118: 
        case 120: 
        case 121: 
        case 122: 
        case 123: 
        case 243: 
        case 246: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 401: break;
        case 112: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 229: 
        case 230: 
        case 233: 
        case 234: 
        case 236: 
        case 306: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 402: break;
        case 109: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 403: break;
        case 104: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 404: break;
        case 101: 
          { 
	// begin embedded region: " + fEmbeddedHint
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	// JSP attribute value start - complex single quoted
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_SQUOTE, XML_TAG_ATTRIBUTE_VALUE_SQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        
	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE '");
	}
        
	return PROXY_CONTEXT;
 }
        case 405: break;
        case 100: 
          { 

	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_DQUOTE, XML_TAG_ATTRIBUTE_VALUE_DQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	
	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE \"");
	}
	
	return PROXY_CONTEXT;
 }
        case 406: break;
        case 97: 
        case 102: 
        case 214: 
        case 216: 
        case 217: 
          { 
	
	// attr value
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
   	yybegin(ST_XML_ATTRIBUTE_NAME);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_ATTRIBUTE_VALUE");
	}
    
    return XML_TAG_ATTRIBUTE_VALUE;	

 }
        case 407: break;
        case 96: 
          { 
	// equals
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_ATTRIBUTE_VALUE);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_EQUALS");
	}
    
    return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 408: break;
        case 94: 
          { 
	// attr name
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_EQUALS);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_ATTR_NAME");
	}
    
    
    return XML_TAG_ATTRIBUTE_NAME;
 }
        case 409: break;
        case 90: 
        case 91: 
          { 
	if(Debug.debugTokenizer)
		dump("TAG NAME");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
    yybegin(ST_XML_ATTRIBUTE_NAME);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME");
	}
    
    return XML_TAG_NAME;
 }
        case 410: break;
        case 88: 
          { 
	// tag close
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else yybegin(YYINITIAL);
	
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME closing");
	}
	
    return XML_TAG_CLOSE;
 }
        case 411: break;
        case 81: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 412: break;
        case 80: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 413: break;
        case 78: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 414: break;
        case 44: 
        case 45: 
        case 46: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedPostState = ST_CDATA_TEXT;
	fEmbeddedHint = XML_CDATA_TEXT;
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
 }
        case 415: break;
        case 39: 
        case 92: 
        case 98: 
        case 103: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    return XML_TAG_OPEN;
 }
        case 416: break;
        case 29: 
        case 138: 
        case 139: 
        case 141: 
        case 276: 
        case 315: 
        case 333: 
        case 346: 
        case 359: 
        case 367: 
        case 372: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 417: break;
        case 27: 
        case 129: 
        case 130: 
        case 132: 
        case 262: 
        case 311: 
        case 331: 
        case 345: 
        case 358: 
        case 366: 
        case 371: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 418: break;
        case 16: 
        case 87: 
          { 
	// inappropriate tag name
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
	
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME X");
	}
	
	
    return XML_CONTENT;
 }
        case 419: break;
        case 14: 
        case 82: 
        case 84: 
        case 85: 
        case 86: 
        case 205: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 420: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 26: 
        case 28: 
        case 58: 
        case 93: 
          { 
	if(Debug.debugTokenizer)
		dump("WHITE SPACE");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 421: break;
        case 0: 
        case 38: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 177: 
        case 178: 
        case 179: 
        case 181: 
        case 291: 
        case 292: 
        case 321: 
          { 
   if(Debug.debugTokenizer)
        dump("\nXML content");//$NON-NLS-1$

    final String text = yytext();
    assert text != null;
    
	if (Debug.debugTokenizer) {	
	  dump("FIND TWIG DELIMITER");
	}
    

    // checks the smarty case
    return findTwigDelimiter(text, XML_CONTENT, twigLeftDelim, TWIG_OPEN, ST_TWIG_CONTENT);

 }
        case 422: break;
        case 47: 
        case 48: 
        case 49: 
        case 50: 
        case 56: 
        case 57: 
        case 68: 
        case 72: 
        case 74: 
        case 75: 
        case 77: 
        case 79: 
        case 83: 
        case 89: 
        case 95: 
        case 99: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 110: 
        case 111: 
        case 113: 
        case 119: 
        case 125: 
        case 134: 
        case 148: 
        case 152: 
        case 153: 
        case 168: 
        case 173: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("current state " + yy_state);
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
	
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	}
	return UNDEFINED;
 }
        case 423: break;
        case 51: 
        case 154: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 424: break;
        case 52: 
        case 53: 
        case 54: 
        case 55: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 425: break;
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 190: 
        case 191: 
        case 192: 
        case 299: 
        case 322: 
        case 323: 
        case 338: 
        case 339: 
        case 351: 
        case 362: 
        case 370: 
        case 375: 
        case 379: 
        case 380: 
        case 381: 
        case 382: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 426: break;
        case 63: 
          { 

	if (Debug.debugTokenizer) {
	   dump("ST_PI_WS S");
	}

        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 427: break;
        case 64: 
        case 65: 
        case 66: 
        case 67: 
          { 
		// block scan until close is found
		
	if (Debug.debugTokenizer) {
	   dump("ST_PI_CONTENT");
	}
		
	return doScan("?>", false, false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 428: break;
        case 69: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 429: break;
        case 70: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 430: break;
        case 71: 
        case 73: 
        case 76: 
        case 197: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 431: break;
        case 142: 
        case 143: 
        case 144: 
          { 

	if (Debug.debugTokenizer)
		dump("DO BLOCK TAG SCAN");

	return doBlockTagScan();
 }
        case 432: break;
        case 145: 
        case 146: 
          { 

	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE XX");
	}

	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 433: break;
        case 147: 
          { 

	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE SQUOTED");
	}

	return XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
 }
        case 434: break;
        case 149: 
        case 150: 
          { 

	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE X");
	}

	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 435: break;
        case 151: 
          { 

	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE DQUOTED");
	}

	return XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 436: break;
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 159: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("DO SCAN END TWIG CONTENT");
	}

	return doScanEndTwig(TWIG_CONTENT, ST_TWIG_CONTENT, ST_TWIG_CONTENT);

 }
        case 437: break;
        case 160: 
        case 161: 
        case 162: 
        case 163: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("DO SCAN END TWIG COMMENT");
	}

	// twig comment scan
	return doScanEndTwig(TWIG_COMMENT, ST_TWIG_COMMENT, ST_TWIG_COMMENT);	

 }
        case 438: break;
        case 164: 
        case 165: 
        case 167: 
        case 283: 
        case 316: 
        case 334: 
        case 347: 
        case 360: 
        case 368: 
        case 373: 
          { 

	if(Debug.debugTokenizer)
		dump("TWIG DOUBLE QUOTES CONTENT");

    return TWIG_DOUBLE_QUOTES_CONTENT;
 }
        case 439: break;
        case 166: 
          { 

	if(Debug.debugTokenizer)
		dump("TWIG DOUBLE QUOTES END");

	yybegin(ST_TWIG_CONTENT);
    return TWIG_DOUBLE_QUOTES_END;
 }
        case 440: break;
        case 169: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("TWIG BACKTICK START");
	}

	yybegin(ST_TWIG_DOUBLE_QUOTES_SPECIAL);
    return TWIG_BACKTICK_START;
 }
        case 441: break;
        case 170: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("TWIG DELIMITER");
	}

    return TWIG_DELIMITER;
 }
        case 442: break;
        case 171: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("TWIG LABEL");
	}

    return TWIG_LABEL;
 }
        case 443: break;
        case 172: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("TWIG NUMBER");
	}

    return TWIG_NUMBER;
 }
        case 444: break;
        case 174: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("TWIG BACKTICK END");
	}

	yybegin(ST_TWIG_DOUBLE_QUOTES);
    return TWIG_BACKTICK_END;
 }
        case 445: break;
        case 175: 
          { 
	// end tag open
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    
	if (Debug.debugTokenizer) {
	   dump("XML INITIAL generic end");
	}
    
    return XML_END_TAG_OPEN;
 }
        case 446: break;
        case 176: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 447: break;
        case 180: 
        case 183: 
        case 199: 
        case 208: 
        case 237: 
        case 247: 
        case 261: 
        case 263: 
        case 275: 
        case 277: 
        case 284: 
          { 


	stateHint = "ST_TWIG_IN_STATEMENT";
	if(Debug.debugTokenizer)
		dump("twig processing instruction start");//$NON-NLS-1$
	if ("{%".equals(yytext())
			 && Character.isWhitespace(yy_buffer[yy_currentPos - 1])) {
		yybegin(ST_PI);
		return XML_PI_OPEN;

	} else {
		// removeing trailing whitespaces for the twig open
		String twigStart = yytext();
		int i = twigStart.length() - 1;
		while (i >= 0
				&& Character.isWhitespace(twigStart.charAt(i--))) {
			yypushback(1);
		}
		fStateStack.push(yystate());// YYINITIAL
		if (fStateStack.peek() == YYINITIAL) {
			// the simple case, just a regular scriptlet out in
			// content
			yybegin(ST_TWIG_CONTENT);
			stateHint = "ST_TWIG_IN_STATEMENT";
			return TWIG_STMT_OPEN;
		} else {
			if (yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
			else if (yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
				fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
			else if (yystate() == ST_CDATA_TEXT) {
				fEmbeddedPostState = ST_CDATA_TEXT;
				fEmbeddedHint = XML_CDATA_TEXT;
			}
			yybegin(ST_TWIG_CONTENT);
			assembleEmbeddedContainer(TWIG_STMT_OPEN, TWIG_STMT_CLOSE);
			if (yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
				yybegin(ST_BLOCK_TAG_SCAN);
				return BLOCK_TEXT;
			}
			// required help for successive embedded regions
			if (yystate() == ST_XML_TAG_NAME) {
				fEmbeddedHint = XML_TAG_NAME;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			} else if ((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
				fEmbeddedPostState = ST_XML_EQUALS;
			} else if (yystate() == ST_XML_ATTRIBUTE_VALUE) {
				fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
				fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
			}
			return PROXY_CONTEXT;
		}
	}
 }
        case 448: break;
        case 187: 
          { 

	if (Debug.debugTokenizer) {	
	  dump("TW START EMBEDDED");
	}

	stateHint = "ST_TWIG_IN_PRINT";	
	//removeing trailing whitespaces for the twig open
	String twigStart = yytext();
	int i = twigStart.length() - 1; 
	while(i >= 0 && Character.isWhitespace(twigStart.charAt(i--))){
		yypushback(1);
	}

	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		
		yybegin(ST_TWIG_CONTENT);		
		return TWIG_OPEN;
	}
	else {
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_TWIG_CONTENT);
		assembleEmbeddedContainer(TWIG_OPEN, TWIG_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
 }
        case 449: break;
        case 189: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 450: break;
        case 193: 
          { 
		// ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        
		
	if (Debug.debugTokenizer) {
	   dump("PI_CLOSE");
	}
        
        return XML_PI_CLOSE;
 }
        case 451: break;
        case 194: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 452: break;
        case 209: 
          { 
    yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME closing empty");
	}
	
	// empty tag close
    return XML_EMPTY_TAG_CLOSE;
 }
        case 453: break;
        case 210: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
 }
        case 454: break;
        case 212: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 455: break;
        case 223: 
        case 239: 
        case 249: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 456: break;
        case 280: 
          { 
	
	if(Debug.debugTokenizer)
		dump("TWIG STMT CLOSE");
	
	yybegin(YYINITIAL);
	return TWIG_STMT_CLOSE;
 }
        case 457: break;
        case 281: 
          { 
	
	if(Debug.debugTokenizer)
		dump("TWIG CLOSE");
	
	yybegin(YYINITIAL);
	return TWIG_CLOSE;
 }
        case 458: break;
        case 282: 
          { 
	
	if(Debug.debugTokenizer)
		dump("TWIG COMMENT CLOSE");
	
	yybegin(YYINITIAL);
	return TWIG_COMMENT_CLOSE;
 }
        case 459: break;
        case 285: 
          { 

	if (Debug.debugTokenizer)
		dump("TWIG DOLLAR VAR");
		
    return TWIG_VARIABLE;
 }
        case 460: break;
        case 286: 
          { 

	if (Debug.debugTokenizer)
		System.out.println("variable5");

    return TWIG_VARIABLE;
 }
        case 461: break;
        case 289: 
        case 295: 
          { 

	yybegin(ST_TWIG_CONTENT);
	stateHint = "ST_TWIG_IN_STATEMENT";
	if (Debug.debugTokenizer) {
	   dump("ST_TWIG_CONTENT");
	}
	
	return TWIG_STMT_OPEN;

 }
        case 462: break;
        case 290: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 463: break;
        case 293: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 464: break;
        case 294: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 465: break;
        case 296: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 466: break;
        case 297: 
        case 298: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 467: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
