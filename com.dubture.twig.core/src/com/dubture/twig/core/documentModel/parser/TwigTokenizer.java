/* The following code was generated by JFlex 1.4.1 on 7/17/15 6:26 PM */

/*******************************************************************************
 * This file is part of the Twig eclipse plugin.
 * 
 * (c) Robert Gruendler <r.gruendler@gmail.com>
 * 
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 ******************************************************************************/
/*nlsXXX*/
package com.dubture.twig.core.documentModel.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.php.internal.core.PHPVersion;
import com.dubture.twig.core.documentModel.parser.regions.TwigScriptRegion;
import org.eclipse.php.internal.core.documentModel.parser.PHPRegionContext;
import org.eclipse.php.internal.core.documentModel.parser.AbstractPhpLexer;
import org.eclipse.php.internal.core.documentModel.parser.PhpLexerFactory;
import org.eclipse.php.internal.core.documentModel.parser.regions.PhpScriptRegion;
import org.eclipse.php.internal.core.project.ProjectOptions;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import com.dubture.twig.core.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.Logger;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
import org.eclipse.wst.xml.core.internal.parser.regions.XMLParserRegionFactory;
import org.eclipse.wst.xml.core.internal.regions.DOMRegionContext;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/17/15 6:26 PM from the specification file
 * <tt>TwigTokenizer.jflex</tt>
 */
public class TwigTokenizer implements BlockTokenizer, PHPRegionContext, DOMRegionContext, TwigRegionContext {
 
  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_XML_COMMENT_END = 4;
  public static final int ST_BLOCK_TAG_SCAN = 30;
  public static final int ST_DHTML_ATTRIBUTE_VALUE = 14;
  public static final int ST_XML_PI_ATTRIBUTE_NAME = 8;
  public static final int ST_DHTML_TAG_CLOSE = 15;
  public static final int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 32;
  public static final int ST_DHTML_EQUALS = 13;
  public static final int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  public static final int ST_XML_ATTRIBUTE_VALUE = 19;
  public static final int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 31;
  public static final int ST_XML_ATTRIBUTE_NAME = 17;
  public static final int ST_XML_EQUALS = 18;
  public static final int YYINITIAL = 0;
  public static final int ST_XML_DOCTYPE_ID_SYSTEM = 25;
  public static final int ST_XML_ELEMENT_DECLARATION = 26;
  public static final int ST_XML_DECLARATION_CLOSE = 21;
  public static final int ST_TWIG_CONTENT = 34;
  public static final int ST_XML_DOCTYPE_DECLARATION = 22;
  public static final int ST_CDATA_END = 2;
  public static final int ST_PI_WS = 6;
  public static final int ST_CDATA_TEXT = 1;
  public static final int ST_XML_ELEMENT_DECLARATION_CONTENT = 27;
  public static final int ST_XML_ATTLIST_DECLARATION = 28;
  public static final int ST_XML_PI_EQUALS = 9;
  public static final int ST_XML_ATTLIST_DECLARATION_CONTENT = 29;
  public static final int ST_XML_DOCTYPE_ID_PUBLIC = 24;
  public static final int ST_DHTML_ATTRIBUTE_NAME = 12;
  public static final int ST_ABORT_EMBEDDED = 15;
  public static final int ST_XML_DOCTYPE_EXTERNAL_ID = 23;
  public static final int ST_PI_CONTENT = 7;
  public static final int ST_TWIG_COMMENT = 35;
  public static final int ST_BLOCK_TAG_INTERNAL_SCAN = 33;
  public static final int ST_PI = 5;
  public static final int ST_XML_DECLARATION = 20;
  public static final int ST_XML_TAG_NAME = 16;
  public static final int ST_XML_PI_TAG_CLOSE = 11;
  public static final int ST_XML_COMMENT = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\21\2\0\1\13\22\0\1\13\1\20\1\10\1\23"+
    "\1\15\1\16\1\11\1\12\1\15\1\15\1\15\1\15\1\15\1\6"+
    "\1\5\1\3\12\14\1\7\1\63\1\1\1\45\1\2\1\32\1\15"+
    "\1\30\1\64\1\26\1\27\1\50\1\61\1\36\1\36\1\42\1\36"+
    "\1\36\1\56\1\57\1\44\1\43\1\47\1\36\1\40\1\60\1\31"+
    "\1\62\2\36\1\55\1\46\1\36\1\25\1\0\1\17\1\0\1\7"+
    "\1\0\1\52\1\64\1\65\1\53\1\37\1\61\1\36\1\70\1\42"+
    "\2\36\1\35\1\34\1\44\1\43\1\47\1\36\1\40\1\41\1\51"+
    "\1\62\1\36\1\36\1\33\1\54\1\36\1\22\1\0\1\24\1\0"+
    "\70\0\1\67\10\0\27\66\1\0\37\66\1\0\10\66\62\66\2\0"+
    "\13\66\2\0\10\66\1\0\65\66\1\0\104\66\11\0\44\66\3\0"+
    "\2\66\4\0\36\66\70\0\131\66\22\0\7\66\16\0\2\67\56\0"+
    "\106\67\32\0\2\67\44\0\1\66\1\67\3\66\1\0\1\66\1\0"+
    "\24\66\1\0\54\66\1\0\7\66\3\0\1\66\1\0\1\66\1\0"+
    "\1\66\1\0\1\66\1\0\22\66\15\0\14\66\1\0\102\66\1\0"+
    "\14\66\1\0\44\66\1\0\4\67\11\0\65\66\2\0\2\66\2\0"+
    "\2\66\3\0\34\66\2\0\10\66\2\0\2\66\67\0\46\66\2\0"+
    "\1\66\7\0\46\66\12\0\21\67\1\0\27\67\1\0\3\67\1\0"+
    "\1\67\1\0\2\67\1\0\1\67\13\0\33\66\5\0\3\66\56\0"+
    "\32\66\5\0\1\67\12\66\10\67\15\0\12\67\6\0\1\67\107\66"+
    "\2\0\5\66\1\0\17\66\1\0\4\66\1\0\1\66\17\67\2\66"+
    "\2\67\1\0\4\67\2\0\12\67\u0207\0\3\67\1\0\65\66\2\0"+
    "\1\67\1\66\20\67\3\0\4\67\3\0\12\66\2\67\2\0\12\67"+
    "\21\0\3\67\1\0\10\66\2\0\2\66\2\0\26\66\1\0\7\66"+
    "\1\0\1\66\3\0\4\66\2\0\1\67\1\0\7\67\2\0\2\67"+
    "\2\0\3\67\11\0\1\67\4\0\2\66\1\0\3\66\2\67\2\0"+
    "\12\67\2\66\20\0\1\67\2\0\6\66\4\0\2\66\2\0\26\66"+
    "\1\0\7\66\1\0\2\66\1\0\2\66\1\0\2\66\2\0\1\67"+
    "\1\0\5\67\4\0\2\67\2\0\3\67\13\0\4\66\1\0\1\66"+
    "\7\0\12\67\2\67\3\66\14\0\3\67\1\0\7\66\1\0\1\66"+
    "\1\0\3\66\1\0\26\66\1\0\7\66\1\0\2\66\1\0\5\66"+
    "\2\0\1\67\1\66\10\67\1\0\3\67\1\0\3\67\22\0\1\66"+
    "\5\0\12\67\21\0\3\67\1\0\10\66\2\0\2\66\2\0\26\66"+
    "\1\0\7\66\1\0\2\66\2\0\4\66\2\0\1\67\1\66\6\67"+
    "\3\0\2\67\2\0\3\67\10\0\2\67\4\0\2\66\1\0\3\66"+
    "\4\0\12\67\22\0\2\67\1\0\6\66\3\0\3\66\1\0\4\66"+
    "\3\0\2\66\1\0\1\66\1\0\2\66\3\0\2\66\3\0\3\66"+
    "\3\0\10\66\1\0\3\66\4\0\5\67\3\0\3\67\1\0\4\67"+
    "\11\0\1\67\17\0\11\67\21\0\3\67\1\0\10\66\1\0\3\66"+
    "\1\0\27\66\1\0\12\66\1\0\5\66\4\0\7\67\1\0\3\67"+
    "\1\0\4\67\7\0\2\67\11\0\2\66\4\0\12\67\22\0\2\67"+
    "\1\0\10\66\1\0\3\66\1\0\27\66\1\0\12\66\1\0\5\66"+
    "\4\0\7\67\1\0\3\67\1\0\4\67\7\0\2\67\7\0\1\66"+
    "\1\0\2\66\4\0\12\67\22\0\2\67\1\0\10\66\1\0\3\66"+
    "\1\0\27\66\1\0\20\66\4\0\6\67\2\0\3\67\1\0\4\67"+
    "\11\0\1\67\10\0\2\66\4\0\12\67\221\0\56\66\1\0\1\66"+
    "\1\67\2\66\7\67\5\0\6\66\1\67\10\67\1\0\12\67\47\0"+
    "\2\66\1\0\1\66\2\0\2\66\1\0\1\66\2\0\1\66\6\0"+
    "\4\66\1\0\7\66\1\0\3\66\1\0\1\66\1\0\1\66\2\0"+
    "\2\66\1\0\2\66\1\0\1\66\1\67\2\66\6\67\1\0\2\67"+
    "\1\66\2\0\5\66\1\0\1\67\1\0\6\67\2\0\12\67\76\0"+
    "\2\67\6\0\12\67\13\0\1\67\1\0\1\67\1\0\1\67\4\0"+
    "\2\67\10\66\1\0\41\66\7\0\24\67\1\0\6\67\4\0\6\67"+
    "\1\0\1\67\1\0\25\67\3\0\7\67\1\0\1\67\346\0\46\66"+
    "\12\0\47\66\11\0\1\66\1\0\2\66\1\0\3\66\1\0\1\66"+
    "\1\0\2\66\1\0\5\66\51\0\1\66\1\0\1\66\1\0\1\66"+
    "\13\0\1\66\1\0\1\66\1\0\1\66\3\0\2\66\3\0\1\66"+
    "\5\0\3\66\1\0\1\66\1\0\1\66\1\0\1\66\1\0\1\66"+
    "\3\0\2\66\3\0\2\66\1\0\1\66\50\0\1\66\11\0\1\66"+
    "\2\0\1\66\2\0\2\66\7\0\2\66\1\0\1\66\1\0\7\66"+
    "\50\0\1\66\4\0\1\66\10\0\1\66\u0c06\0\234\66\4\0\132\66"+
    "\6\0\26\66\2\0\6\66\2\0\46\66\2\0\6\66\2\0\10\66"+
    "\1\0\1\66\1\0\1\66\1\0\1\66\1\0\37\66\2\0\65\66"+
    "\1\0\7\66\1\0\1\66\3\0\3\66\1\0\7\66\3\0\4\66"+
    "\2\0\6\66\4\0\15\66\5\0\3\66\1\0\7\66\323\0\15\67"+
    "\4\0\1\67\104\0\1\66\3\0\2\66\2\0\1\66\121\0\3\66"+
    "\u0e82\0\1\67\1\0\1\66\31\0\11\66\6\67\1\0\5\67\13\0"+
    "\124\66\4\0\2\67\2\0\2\67\2\0\132\66\1\0\3\67\6\0"+
    "\50\66\u1cd3\0\u51a6\66\u0c5a\0\u2ba4\66\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\4\0\1\2\2\0\3\2\3\0\1\3\1\0"+
    "\1\4\12\2\1\5\1\2\1\6\6\0\1\1\1\7"+
    "\3\1\3\10\3\11\1\12\1\11\4\13\1\11\1\2"+
    "\1\14\1\11\3\14\1\15\4\16\1\17\1\20\1\21"+
    "\3\11\1\21\1\11\1\22\1\11\1\23\1\24\1\3"+
    "\1\11\3\3\1\4\1\25\1\11\2\26\1\7\1\2"+
    "\1\27\1\11\1\30\1\31\1\7\1\11\1\32\1\33"+
    "\1\31\1\7\1\34\4\11\1\35\2\11\1\36\1\11"+
    "\4\36\1\37\1\11\4\37\1\40\1\11\3\40\2\5"+
    "\1\41\1\5\1\42\1\11\3\42\2\6\1\43\1\6"+
    "\3\44\1\45\1\46\1\47\1\50\1\51\1\11\1\12"+
    "\5\52\4\53\1\54\1\55\3\1\1\56\1\0\1\56"+
    "\3\0\1\57\1\0\1\60\3\14\1\61\2\0\1\21"+
    "\1\0\1\56\5\0\1\3\2\0\1\56\1\62\1\63"+
    "\1\0\1\64\1\0\1\31\1\0\2\31\5\0\1\65"+
    "\5\0\2\36\2\0\2\36\1\0\1\56\1\36\1\0"+
    "\1\65\3\0\1\37\2\0\1\56\1\37\1\0\1\65"+
    "\3\0\2\40\2\0\2\40\1\0\1\56\1\40\1\5"+
    "\1\56\3\0\2\42\2\0\2\42\1\0\1\56\1\42"+
    "\1\6\1\56\1\66\1\67\1\70\1\71\2\0\1\72"+
    "\2\1\1\73\1\74\1\75\1\76\2\77\1\14\6\0"+
    "\1\36\2\0\1\40\1\0\1\5\1\0\1\42\1\0"+
    "\1\6\1\100\1\0\1\101\1\1\2\14\7\0\1\5"+
    "\1\0\1\6\1\0\2\14\5\0\1\5\1\6\1\0"+
    "\1\14\1\102\3\0\1\103\1\104\1\5\1\6\1\0"+
    "\1\14\1\105\1\106\1\107\1\5\1\6\1\0\1\14"+
    "\1\5\1\6\1\110\1\14\2\110\4\14\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u0921\0\u095a\0\u09cc\0\u0921"+
    "\0\u0993\0\u0921\0\u095a\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0921\0\u095a\0\u0993"+
    "\0\u0c3f\0\u0c78\0\u0921\0\u0cb1\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0c3f\0\u0921\0\u0d95\0\u0dce\0\u0921\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0921\0\u0f5d\0\u0f96\0\u0fcf\0\u1008"+
    "\0\u1041\0\u107a\0\u0a3e\0\u0921\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u0921\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u13d1\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\u14ee\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u0921\0\u1761"+
    "\0\u179a\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u0921"+
    "\0\u18f0\0\u0921\0\u095a\0\u0993\0\u1929\0\u1962\0\u0921\0\u199b"+
    "\0\u0921\0\u0a05\0\u0a05\0\u0921\0\u095a\0\u19d4\0\u0993\0\u1a0d"+
    "\0\u0921\0\u095a\0\u0993\0\u1a46\0\u0921\0\u1a7f\0\u1ab8\0\u1af1"+
    "\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u0a05\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u0921\0\u1cf2\0\u1d2b\0\u1d64\0\u0921\0\u0cb1\0\u0cea"+
    "\0\u0921\0\u0d23\0\u1d9d\0\u0d95\0\u0e07\0\u0e40\0\u1dd6\0\u0e79"+
    "\0\u0921\0\u1e0f\0\u0eb2\0\u1e48\0\u0921\0\u1e81\0\u10b3\0\u1eba"+
    "\0\u115e\0\u0921\0\u1197\0\u1ef3\0\u1f2c\0\u1a7f\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u12ed\0\u0921\0\u2010\0\u2049\0\u13d1\0\u2082\0\u140a"+
    "\0\u0921\0\u20bb\0\u20f4\0\u212d\0\u212d\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u14b5\0\u13d1\0\u14ee\0\u224a\0\u1527\0\u0921\0\u2283"+
    "\0\u1560\0\u22bc\0\u22f5\0\u15d2\0\u14ee\0\u160b\0\u232e\0\u1644"+
    "\0\u0921\0\u2367\0\u23a0\0\u23d9\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u252f\0\u179a\0\u2568\0\u17d3\0\u0921\0\u25a1"+
    "\0\u25da\0\u2613\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u0921\0\u0921\0\u0921\0\u0921\0\u27a2\0\u27db\0\u0804"+
    "\0\u2814\0\u284d\0\u0804\0\u0921\0\u2886\0\u0921\0\u28bf\0\u0ae9"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u20bb\0\u2a4e"+
    "\0\u2a4e\0\u2367\0\u2a87\0\u2a87\0\u2ac0\0\u25a1\0\u2af9\0\u2af9"+
    "\0\u2b32\0\u0921\0\u2b6b\0\u0804\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2166\0\u2412\0\u2d6c\0\u264c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u0ae9\0\u308a\0\u30c3"+
    "\0\u30fc\0\u0921\0\u0921\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u0921"+
    "\0\u0921\0\u0921\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336"+
    "\0\u0921\0\u336f\0\u16ef\0\u187e\0\u33a8\0\u33e1\0\u341a\0\u3453"+
    "\0\u0ae9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\45\1\46\7\45\1\47\4\45\1\50\3\45\1\51"+
    "\46\45\1\52\1\53\20\52\1\54\46\52\1\55\1\56"+
    "\15\55\1\57\1\55\1\60\1\61\46\55\1\62\1\63"+
    "\2\62\1\64\6\62\1\64\5\62\1\64\1\65\46\62"+
    "\1\55\1\56\4\55\1\66\12\55\1\60\1\61\47\55"+
    "\1\56\2\55\1\67\2\55\1\70\3\55\1\67\5\55"+
    "\1\67\1\61\3\55\4\70\1\71\1\72\6\70\1\73"+
    "\2\70\1\55\7\70\1\74\5\70\1\55\3\70\1\55"+
    "\1\70\1\55\1\56\2\55\1\75\6\55\1\75\5\55"+
    "\1\75\1\61\7\55\1\71\36\55\1\76\1\77\17\76"+
    "\1\60\1\100\7\76\1\101\36\76\1\55\1\56\2\55"+
    "\1\67\2\55\1\102\3\55\1\67\5\55\1\67\1\61"+
    "\3\55\4\102\1\55\12\102\1\55\15\102\1\55\3\102"+
    "\1\55\1\102\1\55\1\56\2\55\1\67\2\55\1\102"+
    "\3\55\1\67\5\55\1\67\1\61\3\55\4\102\1\55"+
    "\12\102\1\103\15\102\1\55\3\102\1\55\1\102\1\104"+
    "\1\56\1\55\1\105\1\67\3\104\1\106\1\104\1\107"+
    "\1\67\5\104\1\67\1\110\46\104\1\55\1\56\17\55"+
    "\1\60\1\61\7\55\1\111\37\55\1\56\1\112\1\113"+
    "\3\55\1\114\11\55\1\60\1\61\3\55\4\114\1\55"+
    "\12\114\1\55\15\114\1\55\3\114\1\55\1\114\1\55"+
    "\1\56\1\112\1\113\3\55\1\114\11\55\1\60\1\61"+
    "\3\55\4\114\1\55\12\114\1\115\15\114\1\55\3\114"+
    "\1\55\1\114\1\116\1\56\1\112\1\117\1\55\3\116"+
    "\1\120\1\116\1\121\1\55\5\116\1\60\1\122\46\116"+
    "\1\55\1\56\17\55\1\60\1\61\46\55\1\123\1\46"+
    "\1\124\1\125\3\123\1\126\16\123\4\127\1\123\12\127"+
    "\1\123\15\127\1\123\3\127\1\123\1\127\1\55\1\130"+
    "\1\124\1\125\1\131\2\55\1\132\3\55\1\131\5\55"+
    "\1\131\1\133\3\55\4\132\1\55\12\132\1\55\15\132"+
    "\1\55\3\132\1\55\1\132\1\55\1\130\1\124\1\125"+
    "\1\131\2\55\1\132\3\55\1\131\5\55\1\131\1\133"+
    "\3\55\4\132\1\55\12\132\1\134\15\132\1\55\3\132"+
    "\1\55\1\132\1\135\1\136\1\124\1\137\1\131\3\135"+
    "\1\140\1\135\1\141\1\131\5\135\1\131\1\142\46\135"+
    "\1\55\1\143\1\144\1\55\1\131\6\55\1\131\5\55"+
    "\1\131\1\133\4\55\1\145\1\146\6\55\1\147\10\55"+
    "\1\147\1\55\1\146\1\145\16\55\1\56\1\144\1\55"+
    "\1\131\6\55\1\131\5\55\1\131\1\133\2\55\1\150"+
    "\44\55\1\56\1\144\1\55\1\131\2\55\1\151\3\55"+
    "\1\131\5\55\1\131\1\133\2\55\1\150\4\151\1\55"+
    "\12\151\1\55\15\151\1\55\3\151\1\55\1\151\1\55"+
    "\1\56\1\144\1\55\1\131\6\55\1\131\5\55\1\131"+
    "\1\133\2\55\1\150\13\55\1\152\5\55\1\153\10\55"+
    "\1\152\10\55\1\154\1\56\1\144\1\155\1\131\3\154"+
    "\1\156\1\154\1\157\1\131\5\154\1\131\1\160\2\154"+
    "\1\161\43\154\1\162\1\56\1\144\1\163\1\131\3\162"+
    "\1\164\1\162\1\165\1\131\5\162\1\131\1\166\2\162"+
    "\1\167\43\162\1\170\1\56\1\144\1\171\1\131\3\170"+
    "\1\172\1\170\1\173\1\131\5\170\1\131\1\174\46\170"+
    "\1\175\1\176\1\177\17\175\1\200\46\175\1\201\1\56"+
    "\1\144\1\202\1\131\3\201\1\203\1\201\1\204\1\131"+
    "\5\201\1\131\1\205\46\201\1\206\1\207\1\210\17\206"+
    "\1\211\46\206\1\212\1\213\20\212\1\214\46\212\1\215"+
    "\1\216\10\215\1\217\56\215\1\220\1\216\6\220\1\221"+
    "\60\220\1\55\1\56\2\55\1\222\6\55\1\222\5\55"+
    "\1\223\1\133\46\55\1\224\1\225\14\224\1\226\3\224"+
    "\1\227\1\224\1\230\44\224\1\231\1\232\20\231\1\233"+
    "\1\234\45\231\1\45\1\0\67\45\3\0\1\235\14\0"+
    "\1\236\50\0\1\45\1\0\5\45\1\237\13\45\1\240"+
    "\2\45\4\237\1\45\12\237\1\45\15\237\1\45\3\237"+
    "\1\45\1\237\1\45\1\0\5\45\1\241\16\45\4\241"+
    "\1\45\12\241\1\45\15\241\1\45\3\241\1\45\1\241"+
    "\1\45\1\0\14\45\1\242\52\45\111\0\1\243\66\0"+
    "\1\244\71\0\1\245\55\0\1\246\6\0\1\246\5\0"+
    "\1\246\1\247\64\0\1\244\3\0\1\250\54\0\1\251"+
    "\66\0\1\67\6\0\1\67\5\0\1\67\54\0\3\70"+
    "\4\0\1\70\11\0\4\70\1\0\12\70\1\0\15\70"+
    "\1\0\5\70\2\0\1\252\73\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\1\70\1\253\10\70\1\0\11\70"+
    "\1\254\3\70\1\0\5\70\5\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\1\70\1\255\10\70\1\0\11\70"+
    "\1\255\3\70\1\0\5\70\5\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\1\70\1\254\10\70\1\0\11\70"+
    "\1\254\3\70\1\0\5\70\4\0\1\75\6\0\1\75"+
    "\5\0\1\75\51\0\1\256\73\0\3\102\4\0\1\102"+
    "\11\0\4\102\1\0\12\102\1\0\15\102\1\0\5\102"+
    "\1\104\2\0\1\257\1\0\3\104\1\0\1\104\2\0"+
    "\5\104\1\0\47\104\1\260\1\0\6\260\1\261\60\260"+
    "\1\262\1\0\10\262\1\261\56\262\1\104\2\0\1\257"+
    "\1\0\3\104\1\0\1\104\2\0\2\104\1\263\2\104"+
    "\1\0\47\104\2\0\1\112\1\264\72\0\3\114\4\0"+
    "\1\114\11\0\4\114\1\0\12\114\1\0\15\114\1\0"+
    "\5\114\1\116\2\0\1\265\1\0\3\116\1\0\1\116"+
    "\2\0\5\116\1\0\50\116\1\0\1\112\1\266\1\0"+
    "\3\116\1\0\1\116\2\0\5\116\1\0\47\116\1\120"+
    "\1\0\1\267\1\270\1\267\3\120\1\271\1\120\2\267"+
    "\5\120\1\267\47\120\1\121\1\0\1\272\1\273\1\272"+
    "\3\121\1\272\1\121\1\271\1\272\5\121\1\272\47\121"+
    "\1\116\2\0\1\265\1\0\3\116\1\0\1\116\2\0"+
    "\2\116\1\274\2\116\1\0\47\116\1\123\3\0\22\123"+
    "\4\0\1\123\12\0\1\123\15\0\1\123\3\0\1\123"+
    "\3\0\1\275\66\0\1\123\3\0\1\123\3\126\4\123"+
    "\1\126\11\123\4\127\1\123\12\127\1\123\15\127\1\123"+
    "\3\127\1\126\1\127\5\0\3\127\4\0\1\127\11\0"+
    "\4\127\1\0\12\127\1\0\15\127\1\0\5\127\3\0"+
    "\1\235\3\0\1\276\10\0\1\236\5\0\4\276\1\0"+
    "\12\276\1\0\15\276\1\0\3\276\1\0\1\276\4\0"+
    "\1\131\6\0\1\131\5\0\1\131\1\247\53\0\3\132"+
    "\4\0\1\132\11\0\4\132\1\0\12\132\1\0\15\132"+
    "\1\0\5\132\1\135\2\0\1\277\1\0\3\135\1\0"+
    "\1\135\2\0\5\135\1\0\47\135\3\0\1\235\3\0"+
    "\1\300\10\0\1\236\5\0\4\300\1\0\12\300\1\0"+
    "\15\300\1\0\3\300\1\0\1\300\1\135\1\0\1\275"+
    "\1\277\1\0\3\135\1\0\1\135\2\0\5\135\1\0"+
    "\47\135\1\301\1\0\6\301\1\302\60\301\1\303\1\0"+
    "\10\303\1\302\56\303\1\135\2\0\1\277\1\0\3\135"+
    "\1\0\1\135\2\0\2\135\1\304\2\135\1\0\1\305"+
    "\46\135\3\0\1\235\14\0\1\306\113\0\1\307\56\0"+
    "\1\310\17\0\1\310\54\0\1\311\20\0\1\311\12\0"+
    "\17\312\1\313\51\312\5\0\3\151\4\0\1\151\11\0"+
    "\4\151\1\0\12\151\1\0\15\151\1\0\5\151\46\0"+
    "\1\314\5\0\1\314\76\0\1\315\6\0\1\154\2\0"+
    "\1\316\1\0\3\154\1\0\1\154\2\0\5\154\1\0"+
    "\47\154\1\156\1\0\1\317\1\320\1\317\3\156\1\321"+
    "\1\156\2\317\5\156\1\317\47\156\1\322\1\0\1\323"+
    "\1\324\1\323\3\325\1\323\1\322\1\326\1\327\3\325"+
    "\1\322\1\325\1\327\1\322\1\325\2\322\40\325\2\322"+
    "\1\325\1\154\2\0\1\316\1\0\3\154\1\0\1\154"+
    "\2\0\2\154\1\330\2\154\1\0\1\331\46\154\1\161"+
    "\2\312\1\332\1\312\3\161\1\312\1\161\2\312\3\161"+
    "\1\333\1\161\1\312\47\161\1\162\2\0\1\334\1\0"+
    "\3\162\1\0\1\162\2\0\5\162\1\0\47\162\1\164"+
    "\2\335\1\336\1\335\3\164\1\337\1\164\2\335\5\164"+
    "\1\335\47\164\1\165\2\340\1\341\1\340\3\165\1\340"+
    "\1\165\1\337\1\340\5\165\1\340\47\165\1\162\2\0"+
    "\1\334\1\0\3\162\1\0\1\162\2\0\2\162\1\342"+
    "\2\162\1\0\1\343\46\162\1\167\2\312\1\344\1\312"+
    "\3\167\1\312\1\167\2\312\3\167\1\345\1\167\1\312"+
    "\47\167\1\170\2\0\1\346\1\0\3\170\1\0\1\170"+
    "\2\0\5\170\1\0\47\170\1\172\1\0\1\347\1\350"+
    "\1\347\3\172\1\351\1\172\2\347\5\172\1\347\47\172"+
    "\1\352\1\0\1\353\1\354\1\353\3\355\1\353\1\352"+
    "\1\356\1\357\3\355\1\352\1\355\1\357\1\352\1\355"+
    "\2\352\40\355\2\352\1\355\1\170\2\0\1\346\1\0"+
    "\3\170\1\0\1\170\2\0\2\170\1\360\2\170\1\0"+
    "\1\361\46\170\2\175\1\0\70\175\1\0\15\175\1\362"+
    "\52\175\1\0\13\175\1\363\52\175\1\201\2\0\1\364"+
    "\1\0\3\201\1\0\1\201\2\0\5\201\1\0\47\201"+
    "\1\203\1\0\1\365\1\366\1\365\3\203\1\367\1\203"+
    "\2\365\5\203\1\365\47\203\1\370\1\0\1\371\1\372"+
    "\1\371\3\373\1\371\1\370\1\374\1\375\3\373\1\370"+
    "\1\373\1\375\1\370\1\373\2\370\40\373\2\370\1\373"+
    "\1\201\2\0\1\364\1\0\3\201\1\0\1\201\2\0"+
    "\2\201\1\376\2\201\1\0\1\377\46\201\2\206\1\0"+
    "\70\206\1\0\15\206\1\u0100\52\206\1\0\13\206\1\u0101"+
    "\52\206\1\215\1\0\10\215\1\0\56\215\3\0\1\u0102"+
    "\14\0\1\243\50\0\1\220\1\0\6\220\1\0\60\220"+
    "\24\0\1\u0103\70\0\1\u0104\70\0\1\u0105\52\0\1\u0106"+
    "\16\0\1\u0107\43\0\1\45\1\0\3\45\3\237\4\45"+
    "\1\237\11\45\4\237\1\45\12\237\1\45\15\237\1\u0108"+
    "\5\237\1\45\1\0\12\45\1\u0109\16\45\1\u010a\36\45"+
    "\1\0\3\45\3\241\4\45\1\241\11\45\4\241\1\45"+
    "\12\241\1\45\15\241\1\u010b\5\241\1\45\1\0\2\45"+
    "\1\242\6\45\1\242\5\45\1\242\47\45\25\0\1\u0107"+
    "\47\0\1\244\6\0\1\244\5\0\1\244\51\0\1\u010c"+
    "\104\0\1\u010d\3\0\1\250\52\0\1\250\6\0\1\250"+
    "\5\0\1\250\51\0\1\u010e\73\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\2\70\1\u010f\7\70\1\0\10\70"+
    "\1\u0110\4\70\1\0\5\70\5\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\2\70\1\u0110\7\70\1\0\10\70"+
    "\1\u0110\4\70\1\0\5\70\5\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\12\70\1\0\1\70\1\u0111\13\70"+
    "\1\0\5\70\1\104\2\0\1\257\1\244\3\104\1\0"+
    "\1\104\1\0\1\244\5\104\1\244\47\104\1\267\1\0"+
    "\6\267\1\271\60\267\1\272\1\0\10\272\1\271\56\272"+
    "\1\116\2\0\1\265\1\244\3\116\1\0\1\116\1\0"+
    "\1\244\5\116\1\244\47\116\5\0\3\276\4\0\1\276"+
    "\11\0\4\276\1\0\12\276\1\0\15\276\1\0\5\276"+
    "\5\0\3\300\4\0\1\300\11\0\4\300\1\0\12\300"+
    "\1\0\15\300\1\0\5\300\1\135\2\0\1\277\1\244"+
    "\3\135\1\0\1\135\1\0\1\244\5\135\1\244\50\135"+
    "\2\0\1\277\1\250\3\135\1\0\1\135\1\0\1\250"+
    "\5\135\1\250\47\135\26\0\1\u0112\36\0\1\u0112\34\0"+
    "\1\u0113\17\0\1\u0113\56\0\1\u0114\10\0\1\u0114\61\0"+
    "\1\u0115\16\0\1\u0115\74\0\1\u0116\4\0\1\317\1\0"+
    "\6\317\1\321\60\317\1\322\1\0\1\323\1\u0117\1\323"+
    "\3\322\1\323\1\322\1\321\1\323\5\322\1\323\47\322"+
    "\1\323\1\0\10\323\1\321\56\323\1\322\1\0\1\323"+
    "\1\u0117\1\323\3\322\1\323\1\322\1\u0118\1\323\5\322"+
    "\1\323\47\322\12\0\1\u0119\56\0\1\323\1\0\10\323"+
    "\1\u0118\56\323\1\154\2\0\1\316\1\244\3\154\1\0"+
    "\1\154\1\0\1\244\5\154\1\244\50\154\2\0\1\316"+
    "\1\250\3\154\1\0\1\154\1\0\1\250\5\154\1\250"+
    "\47\154\10\335\1\337\60\335\12\340\1\337\56\340\1\162"+
    "\2\0\1\334\1\244\3\162\1\0\1\162\1\0\1\244"+
    "\5\162\1\244\50\162\2\0\1\334\1\250\3\162\1\0"+
    "\1\162\1\0\1\250\5\162\1\250\47\162\1\347\1\0"+
    "\6\347\1\351\60\347\1\352\1\0\1\353\1\u011a\1\353"+
    "\3\352\1\353\1\352\1\351\1\353\5\352\1\353\47\352"+
    "\1\353\1\0\10\353\1\351\56\353\1\352\1\0\1\353"+
    "\1\u011a\1\353\3\352\1\353\1\352\1\u011b\1\353\5\352"+
    "\1\353\47\352\12\0\1\u011c\56\0\1\353\1\0\10\353"+
    "\1\u011b\56\353\1\170\2\0\1\346\1\244\3\170\1\0"+
    "\1\170\1\0\1\244\5\170\1\244\50\170\2\0\1\346"+
    "\1\250\3\170\1\0\1\170\1\0\1\250\5\170\1\250"+
    "\47\170\2\175\1\0\22\175\1\u011d\45\175\1\0\1\175"+
    "\1\363\6\175\1\363\5\175\1\363\47\175\1\365\1\0"+
    "\6\365\1\367\60\365\1\370\1\0\1\371\1\u011e\1\371"+
    "\3\370\1\371\1\370\1\367\1\371\5\370\1\371\47\370"+
    "\1\371\1\0\10\371\1\367\56\371\1\370\1\0\1\371"+
    "\1\u011e\1\371\3\370\1\371\1\370\1\u011f\1\371\5\370"+
    "\1\371\47\370\12\0\1\u0120\56\0\1\371\1\0\10\371"+
    "\1\u011f\56\371\1\201\2\0\1\364\1\244\3\201\1\0"+
    "\1\201\1\0\1\244\5\201\1\244\50\201\2\0\1\364"+
    "\1\250\3\201\1\0\1\201\1\0\1\250\5\201\1\250"+
    "\47\201\2\206\1\0\22\206\1\u0121\45\206\1\0\1\206"+
    "\1\u0101\6\206\1\u0101\5\206\1\u0101\47\206\6\0\1\u0122"+
    "\110\0\1\u0123\42\0\1\45\1\0\12\45\1\u0109\46\45"+
    "\1\u0124\6\45\1\0\12\45\1\u0125\11\45\3\u0125\6\45"+
    "\1\u0125\10\45\1\u0125\1\45\2\u0125\5\45\1\u0125\2\45"+
    "\2\u0125\3\45\4\0\1\u010d\6\0\1\u010d\5\0\1\u010d"+
    "\54\0\1\70\1\u0126\1\70\4\0\1\70\11\0\4\70"+
    "\1\0\12\70\1\0\15\70\1\0\5\70\5\0\3\70"+
    "\4\0\1\70\11\0\4\70\1\0\10\70\1\u0127\1\70"+
    "\1\0\15\70\1\0\5\70\31\0\1\u0128\17\0\1\u0128"+
    "\54\0\1\u0129\20\0\1\u0129\46\0\1\u012a\22\0\1\u012a"+
    "\42\0\1\u012b\17\0\1\u012b\54\0\1\u012c\20\0\1\u012c"+
    "\15\0\1\u012d\1\0\3\u012d\2\0\1\326\4\u012d\1\0"+
    "\2\u012d\1\0\1\u012d\2\0\40\u012d\2\0\1\u012d\3\0"+
    "\1\u012e\1\0\3\u012e\2\0\1\356\4\u012e\1\0\2\u012e"+
    "\1\0\1\u012e\2\0\40\u012e\2\0\1\u012e\2\175\1\0"+
    "\23\175\1\u012f\42\175\3\0\1\u0130\1\0\3\u0130\2\0"+
    "\1\374\4\u0130\1\0\2\u0130\1\0\1\u0130\2\0\40\u0130"+
    "\2\0\1\u0130\2\206\1\0\23\206\1\u0131\42\206\27\0"+
    "\1\u0132\41\0\1\45\1\0\12\45\1\u0125\11\45\3\u0125"+
    "\6\45\1\u0125\10\45\1\u0125\1\45\2\u0125\5\45\1\u0125"+
    "\1\45\1\u0124\2\u0125\3\45\5\0\3\70\4\0\1\70"+
    "\11\0\4\70\1\0\6\70\1\u0133\3\70\1\0\15\70"+
    "\1\0\5\70\5\0\3\70\4\0\1\70\11\0\4\70"+
    "\1\0\5\70\1\u0134\4\70\1\0\15\70\1\0\5\70"+
    "\46\0\1\u0135\5\0\1\u0135\56\0\1\u0136\65\0\1\u0137"+
    "\10\0\1\u0137\57\0\1\u0138\10\0\1\u0138\62\0\1\u0139"+
    "\26\0\2\175\1\0\24\175\1\u013a\41\175\2\206\1\0"+
    "\24\206\1\u013b\41\206\30\0\1\u013c\45\0\3\70\4\0"+
    "\1\70\11\0\4\70\1\0\12\70\1\0\3\70\1\u013d"+
    "\11\70\1\0\5\70\5\0\3\70\4\0\1\70\11\0"+
    "\3\70\1\u013e\1\0\12\70\1\0\3\70\1\u013e\11\70"+
    "\1\0\5\70\47\0\1\u013f\62\0\1\u0140\16\0\1\u0140"+
    "\54\0\1\u0141\60\0\1\u0142\22\0\1\u0142\37\0\1\u0143"+
    "\36\0\1\u0143\3\0\2\175\1\0\25\175\1\u0144\40\175"+
    "\2\206\1\0\25\206\1\u0145\40\206\31\0\1\u0146\44\0"+
    "\3\70\4\0\1\70\11\0\4\70\1\0\12\70\1\0"+
    "\6\70\1\u0147\6\70\1\0\5\70\37\0\1\u0148\10\0"+
    "\1\u0148\51\0\1\u0149\17\0\1\u0149\50\0\1\u014a\17\0"+
    "\1\u014a\17\0\2\175\1\0\26\175\1\u014b\37\175\2\206"+
    "\1\0\26\206\1\u014c\37\206\30\0\1\u014d\45\0\3\70"+
    "\4\0\1\70\11\0\4\70\1\0\2\70\1\u014e\7\70"+
    "\1\0\15\70\1\0\5\70\2\175\1\0\25\175\1\u014f"+
    "\40\175\2\206\1\0\25\206\1\u0150\40\206\25\0\1\u0151"+
    "\50\0\3\70\4\0\1\70\11\0\4\70\1\0\4\70"+
    "\1\u0152\5\70\1\0\15\70\1\0\5\70\2\175\1\0"+
    "\22\175\1\u0153\43\175\2\206\1\0\22\206\1\u0154\43\206"+
    "\5\0\3\70\4\0\1\70\11\0\4\70\1\0\6\70"+
    "\1\u0155\3\70\1\0\15\70\1\0\5\70\5\0\3\70"+
    "\4\0\1\70\11\0\4\70\1\0\12\70\1\0\15\70"+
    "\1\0\4\70\1\u0156\5\0\3\70\4\0\1\70\11\0"+
    "\4\70\1\0\4\70\1\u0157\5\70\1\0\15\70\1\0"+
    "\5\70\5\0\3\70\4\0\1\70\11\0\4\70\1\0"+
    "\4\70\1\u0158\5\70\1\0\15\70\1\0\5\70\5\0"+
    "\3\70\4\0\1\70\11\0\4\70\1\0\12\70\1\0"+
    "\3\70\1\u0159\11\70\1\0\5\70";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13452];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


   /* error codes */
  final private static int ZZ_UNKNOWN_ERROR = 0;
  //final private static int ZZ_ILLEGAL_STATE = 1;
  final private static int ZZ_NO_MATCH = 2;
  final private static int ZZ_PUSHBACK_2BIG = 3;
  /* error codes */

  /* error messages for the codes above */
  final private static String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\0\1\1\2\0\3\1\3\0\1\1\1\0"+
    "\16\1\6\0\5\1\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\13\1\1\11\4\1\1\11\6\1\1\11"+
    "\2\1\1\11\6\1\1\11\7\1\1\11\7\1\1\11"+
    "\32\1\1\11\10\1\1\11\1\1\1\11\4\1\1\11"+
    "\1\1\1\11\2\1\1\11\4\1\1\11\3\1\1\11"+
    "\5\1\1\0\1\1\3\0\1\1\1\0\1\11\3\1"+
    "\1\11\2\0\1\11\1\0\1\1\5\0\1\11\2\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\11\1\0"+
    "\2\1\5\0\1\11\5\0\1\11\1\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\3\0\1\11\2\0\2\1"+
    "\1\0\1\1\3\0\1\11\1\1\2\0\2\1\1\0"+
    "\4\1\3\0\1\11\1\1\2\0\2\1\1\0\4\1"+
    "\4\11\2\0\4\1\1\11\1\1\1\11\3\1\6\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\4\1\7\0\1\1\1\0\1\1"+
    "\1\0\2\1\5\0\2\1\1\0\2\1\3\0\2\11"+
    "\2\1\1\0\1\1\3\11\2\1\1\0\3\1\1\11"+
    "\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  //private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;
  
  /** are we inside a raw tag? **/
  private boolean insideRaw = false;
  
  private TwigTokenizer twigTokenizer = null;
  

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private String fBufferedText = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	
	// help for php container text region
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;


	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();

	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has 
	// been completed
	private int fEmbeddedPostState = YYINITIAL;
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private String text = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList();

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;
	
	public static String twigLeftDelim = "{{";
	public static String twigRightDelim = "}}";
	public static String[] leftDelimiters = new String[] {"{{", "{%", "{#"};
	
	public static String stateHint;	
	
	private final XMLParserRegionFactory fRegionFactory = new XMLParserRegionFactory();
/**
 * user method 
 */
public final void addBlockMarker(BlockMarker marker) {
	if(containsTagName(marker.getTagName()))
		return;
	fBlockMarkers.add(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(BlockMarker marker) {
	fBlockMarkers.remove(marker);
}
/**
 * user method 
 */
public final void removeBlockMarker(String tagname) {
	if (fBlockMarkers != null) {
		Iterator blocks = fBlockMarkers.iterator();
		while (blocks.hasNext()) {
			if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
				blocks.remove();
		}
	}
}
/* user method */
public boolean getBlockMarkerCaseSensitivity() {
        return getBlockMarkerCaseSensitivity(fCurrentTagName);
}
/* user method */
public boolean getBlockMarkerCaseSensitivity(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		boolean casesensitive = marker.isCaseSensitive();
		if(casesensitive && marker.getTagName().equals(name))
			return casesensitive;
		else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
			return casesensitive;
	}
	return true;
}
/* user method */
public String getBlockMarkerContext() {
	return getBlockMarkerContext(fCurrentTagName);
}
/* user method */
public String getBlockMarkerContext(String name) {
	Iterator iterator = fBlockMarkers.iterator();
	while(iterator.hasNext()) {
		BlockMarker marker = (BlockMarker)iterator.next();
		if(marker.getTagName().equals(name))
			return marker.getContext();
	}
	return BLOCK_TEXT;
}
/* user method */
public List getBlockMarkers() {
	return fBlockMarkers;
}
/* user method */
public final int getOffset() {
	return fOffset + yychar;
}
private final boolean isBlockMarker() {
	return isBlockMarker(fCurrentTagName);
}
private final boolean isBlockMarker(String tagName) {
	if (!fIsBlockingEnabled)
		return false;
	return containsTagName(tagName);
}
/**
 * user method
 */
public final void beginBlockTagScan(String newTagName) {
	beginBlockMarkerScan(newTagName, BLOCK_TEXT);
}
/**
 * user method
 *
 * Special tokenizer setup.  Allows tokenization to be initiated at the
 * start of a text block within a "newTagName" tag.
 *
 * Example: 
 *	Tokenizer toker = new Tokenizer();
 *	toker.setCaseSensitiveBlocking(false);
 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
 *	toker.getRegions(); 
 *
 * Returns:
 *	BLOCK_TEXT: 0-40
 *	XML_END_TAG_OPEN: 41-42
 *	XML_TAG_NAME: 43-48
 *	XML_TAG_CLOSE: 49-49
 *	XML_CONTENT: 50-57
 *
 */
public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
	yybegin(ST_BLOCK_TAG_SCAN);
	fCurrentTagName = newTagName;
}
/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean allowTwig, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	// Disable further block (probably)
	fIsBlockingEnabled = false;
	int searchStringLength = searchString.length();
	int n = 0;
	char lastCheckChar;
	int i;
	boolean same = false;
	while (stillSearching) {
		n = 0;
		// Ensure that enough data from the input exists to compare against the search String.
		n = yy_advance();
		while(n != YYEOF && zzCurrentPos < searchStringLength)
			n = yy_advance();
		// If the input was too short or we've exhausted the input, stop immediately.
		if (n == YYEOF) {
			stillSearching = false;
		}
		else {
			
			/**
			 * Look for starting PHPs "{?"
			 */
			// Look for a PHP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			if(allowTwig && zzStartRead != fLastInternalBlockStart && zzCurrentPos > 0 && zzCurrentPos < zzBuffer.length - 1 &&
					zzBuffer[zzCurrentPos - 1] == '{' && (zzBuffer[zzCurrentPos] == '{' || (zzBuffer[zzCurrentPos] == '%'))) {
				fLastInternalBlockStart = zzMarkedPos = zzCurrentPos - 1;
				zzCurrentPos = zzMarkedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(zzMarkedPos == zzStartRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			
			// 2) zzCurrentPos - jspstarter.length : There's not searchStringLength of input available; check for a JSP 2 spots back in what we could read
			// ---
			// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
			// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
			// spill over the end of the buffer while checking.
			else if(allowTwig && zzStartRead != fLastInternalBlockStart && zzCurrentPos > 0 && zzCurrentPos < zzBuffer.length - 1 &&
					zzBuffer[zzCurrentPos - 1] == '{' && (zzBuffer[zzCurrentPos] == '{' || zzBuffer[zzCurrentPos] == '%')) {
				fLastInternalBlockStart = zzMarkedPos = zzCurrentPos - 1;
				zzCurrentPos = zzMarkedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(zzMarkedPos == zzStartRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}
			// 3) zzCurrentPos..(zzCurrentPos+jspStartlength-1) : Check at the start of the block one time
			// ---
			// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
			// since it relies upon zzCurrentPos equaling exactly the previous end +1 to work as designed.
			else if(allowTwig && zzStartRead != fLastInternalBlockStart && zzStartRead > 0 &&
					zzStartRead < zzBuffer.length - 1 && zzBuffer[zzStartRead] == '{' && zzBuffer[zzStartRead + 1] == '{') {
				fLastInternalBlockStart = zzMarkedPos = zzStartRead;
				zzCurrentPos = zzMarkedPos + 1;
				int resumeState = yystate();
				yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
				if(zzMarkedPos == zzStartRead) {
					String jspContext = primGetNextToken();
					yybegin(resumeState);
					return jspContext;
				}
				return searchContext;
			}

			// Check the characters in the target versus the last targetLength characters read from the buffer
			// and see if it matches
			if (n == YYEOF) {
				stillSearching = false;
			}
			else {
				same = true;
				// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				
				// safety check for array accesses (zzCurrentPos is the *last* character we can check against)
				if(zzCurrentPos >= searchStringLength && zzCurrentPos <= zzBuffer.length) {
					for(i = 0; i < searchStringLength; i++) {
						if(same && fIsCaseSensitiveBlocking)
							same = zzBuffer[i + zzCurrentPos - searchStringLength] == searchString.charAt(i);
						else if(same && !fIsCaseSensitiveBlocking)
							same = Character.toLowerCase(zzBuffer[i + zzCurrentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
					}
				}
				// safety check failed; no match is possible right now
				else {
					same = false;
				}
			}
			if (same && requireTailSeparator && zzCurrentPos < zzBuffer.length) {
				// Additional check for close tags to ensure that targetString="</script" doesn't match
				// "</scriptS"
				lastCheckChar = zzBuffer[zzCurrentPos];
				// Succeed on "</script>" and "</script "
				if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
					stillSearching = false;
			}
			else {
				stillSearching = !same || (zzCurrentPos < zzStartRead + searchStringLength);
			}
		}
	}
	if (n != YYEOF || same) {
		// We've stopped short of the end or definitely found a match
		zzMarkedPos = zzCurrentPos - searchStringLength;
		zzCurrentPos = zzMarkedPos + 1;
		// If the searchString occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if (zzMarkedPos == zzStartRead) {
			yybegin(immediateFallbackState);
			return primGetNextToken();
		}
	}
	else {
		// We ran through the rest of the input
		zzMarkedPos = zzCurrentPos;
		zzCurrentPos++;
	}
	yybegin(exitState);
	// If the ending occurs at the very beginning of what would have
	// been a Block, resume scanning normally immediately
	if(zzMarkedPos == zzStartRead)
		return primGetNextToken();
	return searchContext;
}

/**
 * Method doScanEndTwig
 * 
 * @see doScan(searchString, req...) 
 * this version can handle two strings as options to search string
 * it originally written to support ?> or %> close tags to php
 * The two strings must be on the same length
 *
 * @param isAsp - whether the asp %> close is premited
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private ITextRegion bufferedTextRegion = null;
private final String doScanEndTwig(String searchContext, int exitState, int immediateFallbackState) throws IOException {

	if (Debug.debugTokenizer) {	
		System.err.println("do scan end twig, current pos: " + zzCurrentPos);	
	}
	
	yypushback(1); // begin with the last char
	
	// the phpLexer should read until the last token, so
	// the position after this method should match
	// <ST_TWIG_CONTENT> "}}" otherwise we'll
	// get an infinite loop ;)
	
	String lexerState = "ST_" + searchContext;
	
	final AbstractTwigLexer twigLexer = getTwigLexer(stateHint); 
 
	bufferedTextRegion = new TwigScriptRegion(searchContext, yychar, project, twigLexer, stateHint);
	
	if (Debug.debugTokenizer)
		System.err.println("created twig script region between " + bufferedTextRegion.getStart() + " and " + bufferedTextRegion.getEnd());	

	// restore the locations / states
	reset(zzReader, twigLexer.getZZBuffer(), twigLexer.getParamenters());
	
	
	if (Debug.debugTokenizer) {	
		System.err.println("end scan, position: " + zzCurrentPos);	
	}
	
	
	yybegin(exitState);
	return searchContext;
}


/**
 * @param project
 * @param stream
 * @return a new lexer for the given project with the given stream initialized with current parameters
 */
private AbstractTwigLexer getTwigLexer(String lexerState) {

	final AbstractTwigLexer lexer = new TwigLexer(zzReader);
	int[] currentParameters = getParamenters();
	try {
		// set initial lexer state - we use reflection here since we don't know the constant value of 
		// of this state in specific PHP version lexer 
		currentParameters[6] = lexer.getClass().getField(lexerState).getInt(lexer);
	} catch (Exception e) {
		Logger.logException(e);
	}
	lexer.initialize(currentParameters[6]);
	lexer.reset(zzReader, zzBuffer, currentParameters);
	lexer.setPatterns(project);

//	lexer.setAspTags(ProjectOptions.isSupportingAspTags(project));
	return lexer;
}

// call the doScan without searching for PHP internal code
private final String doScan(String searchString, boolean requireTailSeparator, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	return doScan(searchString, true, requireTailSeparator, searchContext, exitState, immediateFallbackState);	
}

	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String[] endTypes) {
		assembleEmbeddedContainer(startType, endTypes, null);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {

				ITextRegion newToken;
				// if it is php content we extract the tokens
				if (internalContext == TWIG_CONTENT) {
					newToken = bufferedTextRegion; 
					bufferedTextRegion.adjustStart(-containerStart);
				} else {
					newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				}
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength() );
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container

					ITextRegion newToken;
					// if it is php content we extract the tokens
					if (internalContext == TWIG_CONTENT) {
						newToken = bufferedTextRegion; 
						bufferedTextRegion.adjustStart(-containerStart);
					} else {
						newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					}

					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + newToken.getLength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + newToken.getLength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
				Logger.logException(e);
				internalContext = null;
				notFinished = false;
				break;
			} catch (Exception f) {
				// some other exception happened; never should
				internalContext = null;
				notFinished = false;
				break;
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]);
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}

	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		return true;
	}

/**
 * user method
 *
 * A generic lookahead-like operation
 */
private final String doBlockScan(String target, String targetContext, int immediateFallbackState) throws IOException {
	return doScan(target, false, targetContext, immediateFallbackState, immediateFallbackState);
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
        fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}

private IProject project;

public void setProject(IProject project) {
	this.project = project;
}

public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
	this.zzReader = reader;
	this.zzBuffer = buffer;
	this.zzMarkedPos = parameters[0];
	this.zzPushbackPos = parameters[1];
	this.zzCurrentPos = parameters[2];
	this.zzStartRead = parameters[3];
	this.zzEndRead = parameters[4];
	this.yyline = parameters[5];  
	this.yychar = this.zzStartRead - this.zzPushbackPos;
}

public int[] getParamenters(){
	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
}

/**
 * user method
 *
 * Converts the raw context String returned by the primGetNextToken()
 * method into a full ITextRegion by pulling in values for the
 * current offset within the scanning text.
 *
 * Returns null when EOF is encountered and attaches intermittently
 * discovered whitespace onto the end of useful regions.
 *
 * Note that this algorithm caches the token following the one being returned
 * so that whitespace can be collapsed.
 */
public final ITextRegion getNextToken() throws IOException {
	fEmbeddedContainer = null;
	// load the starting non-whitespace token (assume that it is so)
	if (fShouldLoadBuffered) {
		if (fBufferedEmbeddedContainer != null) {
			ITextRegion container = fBufferedEmbeddedContainer;
			fBufferedEmbeddedContainer = null;
			fShouldLoadBuffered = false;
			return container;
		}
		context = fBufferedContext;
		text = fBufferedText;
		start = fBufferedStart;
		textLength = length = fBufferedLength;
		fShouldLoadBuffered = false;
	}
	else {
		context = primGetNextToken();
		if (context == PROXY_CONTEXT) {
			return fEmbeddedContainer;
		} else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		text = yytext();
		if (context == XML_TAG_NAME) {
			if(containsTagName(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead))
				fCurrentTagName = text;
			else
				fCurrentTagName = null;
		}
		else if (context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		}
		else if (context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		start = yychar;
		textLength = length = yylength();
		if (zzAtEOF) {
			fTokenCount++;
			return null;
		}
	}
	
	// store the next token
	f_context = primGetNextToken();
	if (f_context == PROXY_CONTEXT) {
		fBufferedEmbeddedContainer = fEmbeddedContainer;
		fShouldLoadBuffered = true;
	} else if (f_context == XML_TAG_NAME) {
		if(containsTagName(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead))
			fCurrentTagName = yytext();
		else
			fCurrentTagName = null;
	} else if (f_context == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	} else if (f_context == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedContext = f_context;
	fBufferedText = yytext();
	if (fBufferedContext == XML_TAG_NAME) {
		if(containsTagName(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead))
			fCurrentTagName = fBufferedText;
		else
			fCurrentTagName = null;
	}
	else if (fBufferedContext == XML_TAG_OPEN) {
		fIsBlockingEnabled = true;
	}
	else if (fBufferedContext == XML_END_TAG_OPEN) {
		fIsBlockingEnabled = false;
	}
	fBufferedStart = yychar;
	fBufferedLength = yylength();
	if (fBufferedContext == WHITE_SPACE) {
		fShouldLoadBuffered = false;
		length += fBufferedLength;
	}else {
		fShouldLoadBuffered = true;
	}
	if (context == null) {
		// EOF
		return null;
	}
	fTokenCount++;

	// if it is twig content we create a twig script region
	if ((context == TWIG_CONTENT) || (context == TWIG_COMMENT))
	{	
//		if (Debug.debugTokenizer)
//			System.err.println("create twig region " + context);
		
		return bufferedTextRegion; 
	} else {

//		if (Debug.debugTokenizer)
//			System.err.println("create standard region " + context);

		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
}

/* user method */
public TwigTokenizer(){
	super();
}
/* user method */
public TwigTokenizer(char[] charArray){
		this(new CharArrayReader(charArray));
}
/* user method */
public void reset(char[] charArray) {
	reset(new CharArrayReader(charArray), 0);
}
/* user method */
public void reset(char[] charArray, int newOffset) {
	reset(new CharArrayReader(charArray), newOffset);
}
/* user method */
public void reset(java.io.InputStream in) {
	reset(new java.io.InputStreamReader(in), 0);
}
/* user method */
public void reset(java.io.InputStream in, int newOffset) {
	reset(new java.io.InputStreamReader(in), newOffset);
}
/* user method */
public void reset(java.io.Reader in) {
	reset(in, 0);
}
/**
 * user method *
 *
 * Reset internal counters and vars to "newly created" values, in the hopes
 * that resetting a pre-existing tokenizer is faster than creating a new one.
 *
 * This method contains code blocks that were essentially duplicated from the
 * <em>generated</em> output of this specification before this method was
 * added.  Those code blocks were under the above copyright.
 */
public void reset(java.io.Reader in, int newOffset) {
	if (Debug.debugTokenizer) {
		System.out.println("resetting tokenizer");//$NON-NLS-1$
	}
	fOffset = newOffset;

	/* the input device */
	zzReader = in;

	/* the current state of the DFA */
	zzState = 0;

	/* the current lexical state */
	zzLexicalState = YYINITIAL;

	/* this buffer contains the current text to be matched and is
	the source of the yytext() string */
	java.util.Arrays.fill(zzBuffer, (char)0);

	/* the textposition at the last accepting state */
	zzMarkedPos = 0;

	/* the textposition at the last state to be included in yytext */
	zzPushbackPos = 0;

	/* the current text position in the buffer */
	zzCurrentPos = 0;

	/* startRead marks the beginning of the yytext() string in the buffer */
	zzStartRead = 0;

	/** 
	 * endRead marks the last character in the buffer, that has been read
	 * from input 
	 */
	zzEndRead = 0;

	/* number of newlines encountered up to the start of the matched text */
	yyline = 0;

	/* the number of characters up to the start of the matched text */
	yychar = 0;

	/* zzAtEOF == true <=> the scanner has returned a value for EOF */
	zzAtEOF = false;

	/* denotes if the user-EOF-code has already been executed */
	//yy_eof_done = false;


	/* user vars: */
	fLastInternalBlockStart = -1;	

	fTokenCount = 0;
	
	fShouldLoadBuffered = false;
	fBufferedContext = null;
	fBufferedText = null;
	fBufferedStart = 1;
	fBufferedLength = 0;
	fStateStack = new IntStack();

	context = null;
	text = null;
	start = 0;
	textLength = 0;
	length = 0;
}

	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		TwigTokenizer newInstance = new TwigTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		return newInstance;
	}
/* user method */
private final String scanXMLCommentText() throws IOException {
	// Scan for '-->' and return the text up to that point as
	//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
	//  case change to the ST_XML_COMMENT_END state and return the next
	//  context as usual.
	return doScan("-->", true, false,  XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
}


private void assembleEmbeddedTwigOpen() {
	
	
	
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1378) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    public void setTokenizer(TwigTokenizer tokenizer) {
        twigTokenizer = tokenizer;
    }

    public void startRaw() {
        insideRaw = true;
    }
    public void endRaw() {
        insideRaw = false;
    } 
  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (zzCurrentPos < zzEndRead) return zzBuffer[zzCurrentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (zzAtEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (zzRefill()) {
        return YYEOF;
    }

    return zzBuffer[zzCurrentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */
    if (zzReader != null)
      zzReader.close();
  }
  
   /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = 0;
    zzLexicalState = YYINITIAL;
  }



  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return zzLexicalState;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }
  
  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return zzMarkedPos-zzStartRead;
  }
  
  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

	Logger.log(Logger.ERROR, message);
	try {
    throw new Error(message);
    } catch(Error e) {
        // BC
    }
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}
	
/* user method - skeleton.sse */
	protected final String findTwigDelimiter(String text, String insideOf, String delim, String delimType, int afterDelimType) {

	    int current = -1;
	    int firstOccurence = text.length();
	    int delimiter = -1;

	    for (int i=0; i < leftDelimiters.length; i++) {

	        current = text.indexOf(leftDelimiters[i]);

	        if (current > -1 && current < firstOccurence) {
	            firstOccurence = current;
	            delimiter = i;
	        }
	    }

	    if (delimiter <= -1)
	        return insideOf;

	    switch (delimiter) {

	        case 0:

	            // don't evaluate inside raw blocks
	            if (insideRaw) {
	                return insideOf;
	            }

	            delim = "{{";

	            if (Debug.debugTokenizer) {
	                // System.err.println("Delim: "+delim+" looking in: '"+text+"' startchar: "+startChar);
	            }

	            //System.err.println("a");
	            //go to the char right before the text, so it doesnt mark the whole thing red...
	            if (firstOccurence > 0){
	                // System.err.println("b");
	                //push to right before the delim
	                yypushback(yylength() - firstOccurence);
	                return insideOf;
	                //return YYINITIAL;
	            } else {
	                // System.err.println("c");
	                stateHint = "ST_TWIG_IN_PRINT";
	                fStateStack.push(yystate());
	                yybegin(afterDelimType);
	                // pushback to just after the closing bracket
	                int delemLen = delim.length();
	                yypushback(yylength() - firstOccurence - delemLen);
	                return delimType;
	            }

	        case 1:

	            delim = "{%";

	            if (Debug.debugTokenizer) {
	                // System.err.println("Delim: "+delim+" looking in: '"+text+"' startchar: "+startChar);
	            }

	            if (firstOccurence != -1) {

	                if (Debug.debugTokenizer)
	                    System.err.println("a");
	                //go to the char right before the text, so it doesnt mark the whole thing red...
	                if (firstOccurence > 0){

	                    if (Debug.debugTokenizer)
	                        System.err.println("b");

	                    //push to right before the delim
	                    yypushback(yylength() - firstOccurence);
	                    return insideOf;
	                    //return YYINITIAL;
	                } else {

	                    if (Debug.debugTokenizer)
	                        System.err.println("c");
	                    
	                    fStateStack.push(yystate());
	                    yybegin(afterDelimType);
	                    stateHint = "ST_TWIG_IN_STATEMENT";
	                    // pushback to just after the closing bracket
	                    int delemLen = delim.length();
	                    yypushback(yylength() - firstOccurence - delemLen);
	                    return TWIG_STMT_OPEN;
	                }
	            }



	            break;

	        case 2:

	            // don't evaluate inside raw blocks
	            if (insideRaw) {
	                return insideOf;
	            }

	            // search for comments first
	            delim = "{#";

	            //System.err.println("a");
	            //go to the char right before the text, so it doesnt mark the whole thing red...
	            if (firstOccurence > 0){
	                // System.err.println("b");
	                //push to right before the delim
	                yypushback(yylength() - firstOccurence);
	                return insideOf;
	                //return YYINITIAL;
	            } else {
	                // System.err.println("c");
	                fStateStack.push(yystate());
	                yybegin(ST_TWIG_COMMENT);
	                stateHint = "ST_TWIG_COMMENT";
	                // pushback to just after the closing bracket
	                int delemLen = delim.length();
	                yypushback(yylength() - firstOccurence - delemLen);
	                return TWIG_COMMENT_OPEN;
	            }


	        default:
	            return insideOf;

	    }


	    return insideOf;
	}


		

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return zzAtEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { if (Debug.debugTokenizer)
		dump("DO BLOCK TAG SCAN");

	return doBlockTagScan();
          }
        case 74: break;
        case 22: 
          { if(Debug.debugTokenizer)
		dump("TAG NAME");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
    yybegin(ST_XML_ATTRIBUTE_NAME);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME");
	}
    
    return XML_TAG_NAME;
          }
        case 75: break;
        case 16: 
          { if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
          }
        case 76: break;
        case 66: 
          { if(Debug.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
          }
        case 77: break;
        case 11: 
          { if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
          }
        case 78: break;
        case 10: 
          { if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
          }
        case 79: break;
        case 55: 
          { if(Debug.debugTokenizer)
		dump("TWIG STMT CLOSE");
	
	//yybegin(YYINITIAL);
	yybegin(fStateStack.pop());
	return TWIG_STMT_CLOSE;
          }
        case 80: break;
        case 30: 
          { if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
          }
        case 81: break;
        case 42: 
          { if (Debug.debugTokenizer) {	
	  dump("DO SCAN END TWIG CONTENT");
	}

	return doScanEndTwig(TWIG_CONTENT, ST_TWIG_CONTENT, ST_TWIG_CONTENT);
          }
        case 82: break;
        case 19: 
          { if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
          }
        case 83: break;
        case 62: 
          { if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
          }
        case 84: break;
        case 13: 
          { if (Debug.debugTokenizer) {
	   dump("ST_PI_WS S");
	}

        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
          }
        case 85: break;
        case 61: 
          { if (Debug.debugTokenizer) {	
	  dump("TW START EMBEDDED");
	}

	stateHint = "ST_TWIG_IN_STATEMENT";	
	//removeing trailing whitespaces for the twig open
	String twigStart = yytext();
	int i = twigStart.length() - 1; 
	while(i >= 0 && Character.isWhitespace(twigStart.charAt(i--))){
		yypushback(1);
	}

	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		
		yybegin(ST_TWIG_CONTENT);		
		return TWIG_STMT_OPEN;
	}
	else {
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_TWIG_CONTENT);
		assembleEmbeddedContainer(TWIG_OPEN, TWIG_STMT_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
          }
        case 86: break;
        case 9: 
          { if (Debug.debugTokenizer) {
		System.out.println("current state " + zzState);
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
	
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	}
	return UNDEFINED;
          }
        case 87: break;
        case 33: 
          { if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
          }
        case 88: break;
        case 8: 
          { if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedPostState = ST_CDATA_TEXT;
	fEmbeddedHint = XML_CDATA_TEXT;
	String blockContext = doBlockScan("]]>", XML_CDATA_TEXT, ST_CDATA_END);//$NON-NLS-1$
	if(blockContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return blockContext;
          }
        case 89: break;
        case 44: 
          { // end tag open
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    
	if (Debug.debugTokenizer) {
	   dump("XML INITIAL generic end");
	}
    
    return XML_END_TAG_OPEN;
          }
        case 90: break;
        case 18: 
          { if(Debug.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
          }
        case 91: break;
        case 32: 
          { if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
          }
        case 92: break;
        case 63: 
          { if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
          }
        case 93: break;
        case 6: 
          { if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
          }
        case 94: break;
        case 53: 
          { return XML_DOCTYPE_INTERNAL_SUBSET;
          }
        case 95: break;
        case 45: 
          { fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
          }
        case 96: break;
        case 15: 
          { if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
          }
        case 97: break;
        case 48: 
          { if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
          }
        case 98: break;
        case 49: 
          { // ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        
		
	if (Debug.debugTokenizer) {
	   dump("PI_CLOSE");
	}
        
        return XML_PI_CLOSE;
          }
        case 99: break;
        case 64: 
          { if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
          }
        case 100: break;
        case 26: 
          { fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_DQUOTE, XML_TAG_ATTRIBUTE_VALUE_DQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	
	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE \"");
	}
	
	return PROXY_CONTEXT;
          }
        case 101: break;
        case 58: 
          { if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
          }
        case 102: break;
        case 60: 
          { if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
          }
        case 103: break;
        case 34: 
          { if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
          }
        case 104: break;
        case 29: 
          { if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
          }
        case 105: break;
        case 43: 
          { if (Debug.debugTokenizer) {	
	  dump("DO SCAN END TWIG COMMENT");
	}

	// twig comment scan
	return doScanEndTwig(TWIG_COMMENT, ST_TWIG_COMMENT, ST_TWIG_COMMENT);
          }
        case 106: break;
        case 39: 
          { if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE SQUOTED");
	}

	return XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
          }
        case 107: break;
        case 23: 
          { // attr name
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_EQUALS);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_ATTR_NAME");
	}
    
    
    return XML_TAG_ATTRIBUTE_NAME;
          }
        case 108: break;
        case 4: 
          { // inappropriate tag name
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
	
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME X");
	}
	
	
    return XML_CONTENT;
          }
        case 109: break;
        case 69: 
          { if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
          }
        case 110: break;
        case 31: 
          { if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
          }
        case 111: break;
        case 40: 
          { if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE X");
	}

	return XML_TAG_ATTRIBUTE_VALUE;
          }
        case 112: break;
        case 41: 
          { if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE DQUOTED");
	}

	return XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
          }
        case 113: break;
        case 35: 
          { if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
          }
        case 114: break;
        case 38: 
          { // begin embedded region: " + fEmbeddedHint
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// tag inside of JSP attribute value start
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
        
	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE EMBEDDED");
	}
        
        
	return PROXY_CONTEXT;
          }
        case 115: break;
        case 14: 
          { // block scan until close is found
		
	if (Debug.debugTokenizer) {
	   dump("ST_PI_CONTENT");
	}
		
	return doScan("?>", false, false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
          }
        case 116: break;
        case 2: 
          { if(Debug.debugTokenizer)
		dump("WHITE SPACE");//$NON-NLS-1$
        return WHITE_SPACE;
          }
        case 117: break;
        case 17: 
          { if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
          }
        case 118: break;
        case 51: 
          { String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
          }
        case 119: break;
        case 67: 
          { if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
          }
        case 120: break;
        case 70: 
          { if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
          }
        case 121: break;
        case 65: 
          { if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
          }
        case 122: break;
        case 37: 
          { if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE XX");
	}

	return XML_TAG_ATTRIBUTE_VALUE;
          }
        case 123: break;
        case 57: 
          { if(Debug.debugTokenizer)
		dump("TWIG COMMENT CLOSE");
	
	yybegin(YYINITIAL);
	return TWIG_COMMENT_CLOSE;
          }
        case 124: break;
        case 24: 
          { // equals
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_ATTRIBUTE_VALUE);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_EQUALS");
	}
    
    return XML_TAG_ATTRIBUTE_EQUALS;
          }
        case 125: break;
        case 68: 
          { if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
          }
        case 126: break;
        case 59: 
          { if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
          }
        case 127: break;
        case 52: 
          { String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
          }
        case 128: break;
        case 54: 
          { // begin embedded region: " + fEmbeddedHint);//$NON-NLS-1$
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	// Php attribute value start - end tag
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_END_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
        
	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE EMBEDDED 2");
	}
        
	return PROXY_CONTEXT;
          }
        case 129: break;
        case 28: 
          { if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
          }
        case 130: break;
        case 46: 
          { stateHint = "ST_TWIG_IN_STATEMENT";
	if(Debug.debugTokenizer) {
		dump("twig processing instruction start");//$NON-NLS-1$
	}
	
	// removeing trailing whitespaces for the php open
	String phpStart = yytext();
	int i = phpStart.length() - 1;
	while (i >= 0
			&& Character.isWhitespace(phpStart.charAt(i--))) {
		yypushback(1);
	}
	fStateStack.push(yystate());// YYINITIAL
	if (fStateStack.peek() == YYINITIAL) {
		// the simple case, just a regular scriptlet out in
		// content
		yybegin(ST_TWIG_CONTENT);
		stateHint = "ST_TWIG_IN_STATEMENT";
		return TWIG_STMT_OPEN;
	} else {
		if (yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if (yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if (yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_TWIG_CONTENT);
		assembleEmbeddedContainer(TWIG_STMT_OPEN, TWIG_STMT_CLOSE);
		if (yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if (yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		} else if ((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		} else if (yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
          }
        case 131: break;
        case 12: 
          { if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
          }
        case 132: break;
        case 56: 
          { if(Debug.debugTokenizer)
		dump("TWIG CLOSE");
	
	//yybegin(YYINITIAL);
	yybegin(fStateStack.pop());
	return TWIG_CLOSE;
          }
        case 133: break;
        case 27: 
          { // begin embedded region: " + fEmbeddedHint
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	// JSP attribute value start - complex single quoted
	assembleEmbeddedContainer(XML_TAG_ATTRIBUTE_VALUE_SQUOTE, XML_TAG_ATTRIBUTE_VALUE_SQUOTE);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        
	if (Debug.debugTokenizer) {
	   dump("XML ATTR VALUE '");
	}
        
	return PROXY_CONTEXT;
          }
        case 134: break;
        case 72: 
          { if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
          }
        case 135: break;
        case 3: 
          { if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
          }
        case 136: break;
        case 20: 
          { if(Debug.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
          }
        case 137: break;
        case 21: 
          { // tag close
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else yybegin(YYINITIAL);
	
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME closing");
	}
	
    return XML_TAG_CLOSE;
          }
        case 138: break;
        case 7: 
          { if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
    yybegin(ST_XML_TAG_NAME);
    return XML_TAG_OPEN;
          }
        case 139: break;
        case 1: 
          { if(Debug.debugTokenizer)
        dump("\nXML content");//$NON-NLS-1$

    final String text = yytext();
    assert text != null;
    
	if (Debug.debugTokenizer) {	
	  dump("FIND TWIG DELIMITER");
	}
    

    // checks the smarty case
    return findTwigDelimiter(text, XML_CONTENT, twigLeftDelim, TWIG_OPEN, ST_TWIG_CONTENT);
          }
        case 140: break;
        case 25: 
          { // attr value
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
   	yybegin(ST_XML_ATTRIBUTE_NAME);
    
	if (Debug.debugTokenizer) {
	   dump("ST_XML_ATTRIBUTE_VALUE");
	}
    
    return XML_TAG_ATTRIBUTE_VALUE;
          }
        case 141: break;
        case 47: 
          { if (Debug.debugTokenizer) {	
	  dump("TW START EMBEDDED");
	}

	stateHint = "ST_TWIG_IN_PRINT";	
	//removeing trailing whitespaces for the twig open
	String twigStart = yytext();
	int i = twigStart.length() - 1; 
	while(i >= 0 && Character.isWhitespace(twigStart.charAt(i--))){
		yypushback(1);
	}

	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		
		yybegin(ST_TWIG_CONTENT);		
		return TWIG_OPEN;
	}
	else {
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_TWIG_CONTENT);
		assembleEmbeddedContainer(TWIG_OPEN, TWIG_CLOSE);
		if(yystate() == ST_ABORT_EMBEDDED) {
			// leave with unchanged state
			return PROXY_CONTEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
          }
        case 142: break;
        case 5: 
          { if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
          }
        case 143: break;
        case 73: 
          { if(Debug.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
          }
        case 144: break;
        case 71: 
          { if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
          }
        case 145: break;
        case 50: 
          { yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	
	if (Debug.debugTokenizer) {
	   dump("ST_XML_TAG_NAME closing empty");
	}
	
	// empty tag close
    return XML_EMPTY_TAG_CLOSE;
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
